#include "util.h"
/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

// vendor headers
#include "hls_stream.h"
#include "ap_int.h"
#include "ap_fixed.h"

// common headers
#include <stdio.h>
#include <string.h>
#include <iostream>


using namespace std;
using namespace hls;

#define cal_aligned_size(x,y) ((x+y-1)/y*y)

typedef ap_uint<192> U1_ConfigInst;

// Data types
typedef float U1_data_t0;
typedef ap_uint<512> U1_bus_t0;
#define U1_DATA0_WIDTH 32
#define U1_DATA0_PACK_FACTOR (512/U1_DATA0_WIDTH)
typedef float U1_data_t1;
typedef ap_uint<512> U1_bus_t1;
#define U1_DATA1_WIDTH 32
#define U1_DATA1_PACK_FACTOR (512/U1_DATA1_WIDTH)
typedef float U1_data_t2;
typedef ap_uint<512> U1_bus_t2;
#define U1_DATA2_WIDTH 32
#define U1_DATA2_PACK_FACTOR (512/U1_DATA2_WIDTH)
typedef unsigned int uint;
union ufloat{
  float f;
  unsigned int u;
};

// Macros
// Macros
#define U1_IN_IMG_W_T 50
#define U1_OUT_NUM 960
#define U1_IN_IMG_H_T 14
#define U1_OUT_IMG_H 384
#define U1_LAYER_BATCH 2
#define U1_STRIDE 1
#define U1_K 5
#define U1_OUT_NUM_T 96
#define U1_IN_IMG_W 386
#define U1_IN_IMG_H 386
#define U1_IN_NUM_T 96
#define U1_IN_NUM 960
#define U1_OUT_IMG_H_T 12
#define U1_OUT_IMG_W_T 48
#define U1_OUT_IMG_W 384
#define U1_DATA0_SIZE 143036160
#define U1_DATA0_SIZE_ALIGNED (cal_aligned_size(143036160, U1_DATA0_PACK_FACTOR))
#define U1_DATA1_SIZE 8294400
#define U1_DATA1_SIZE_ALIGNED (cal_aligned_size(8294400, U1_DATA1_PACK_FACTOR))
#define U1_DATA2_SIZE 141557760
#define U1_DATA2_SIZE_ALIGNED (cal_aligned_size(141557760, U1_DATA2_PACK_FACTOR))

#define U1_ROW_IL_FACTOR 12
#define U1_COL_IL_FACTOR 6
#define U1_SA_ROWS 8
#define U1_SA_COLS 8
#define U1_LOCAL_REG_NUM 864
#define U1_LOCAL_ACCUM_NUM 108
#define U1_SIMD_FACTOR 8
#define U1_DATA0_FC_SIMD_FACTOR 8
#define U1_DATA0_FC_GROUP_FACTOR 1
#define U1_DATA0_FC_SPLIT_FACTOR 1
#define U1_DATA1_FC_SIMD_FACTOR 8
#define U1_DATA1_FC_GROUP_FACTOR 1
#define U1_DATA1_FC_SPLIT_FACTOR 1
#define U1_DATA2_FC_SIMD_FACTOR 8
#define U1_DATA2_FC_GROUP_FACTOR 1
#define U1_DATA2_FC_SPLIT_FACTOR 1

#define U1_DATA0_BUF_SIZE 10752
#define U1_DATA0_HEAD_BUF_SIZE 672000
#define U1_DATA1_BUF_SIZE 10368
#define U1_DATA1_HEAD_BUF_SIZE 829440
#define U1_DATA2_BUF_SIZE 13824
#define U1_DATA2_HEAD_BUF_SIZE 2211840

// Functions and structs
struct U1_Data0TransferChannelType{
  U1_Data0TransferChannelType(){}
  U1_Data0TransferChannelType(
    ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> data_t,
    unsigned int feeder_id_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    feeder_id = feeder_id_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> data;
  unsigned int feeder_id;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

struct U1_Data1TransferChannelType{
  U1_Data1TransferChannelType(){}
  U1_Data1TransferChannelType(
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> data_t,
    unsigned int feeder_id_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    feeder_id = feeder_id_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> data;
  unsigned int feeder_id;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

struct U1_Data2TransferChannelType{
  U1_Data2TransferChannelType(){}
  U1_Data2TransferChannelType(
    ap_uint<U1_DATA2_WIDTH*U1_DATA2_FC_SIMD_FACTOR> data_t){
    data = data_t;
  }
  ap_uint<U1_DATA2_WIDTH*U1_DATA2_FC_SIMD_FACTOR> data;
};

struct U1_Data0PEChannelType{
  U1_Data0PEChannelType(){}
  U1_Data0PEChannelType(
    ap_uint<256> data_t
  ){
    data = data_t;
  }
  U1_Data0PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    FILTER_S = filter_s_t;
  }
  U1_Data0PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<256> data;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

typedef ap_uint<256> U1_Data0SIMDType;

struct U1_Data1PEChannelType{
  U1_Data1PEChannelType(){}
  U1_Data1PEChannelType(
    ap_uint<256> data_t
  ){
    data = data_t;
  }
  U1_Data1PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    FILTER_S = filter_s_t;
  }
  U1_Data1PEChannelType(
    ap_uint<256> data_t,
    bool new_pair_t,
    bool last_pair_t,
    unsigned int filter_s_t
  ){
    data = data_t;
    new_pair = new_pair_t;
    last_pair = last_pair_t;
    FILTER_S = filter_s_t;
  }
  ap_uint<256> data;
  bool new_pair;
  bool last_pair;
  unsigned int FILTER_S;
};

typedef ap_uint<256> U1_Data1SIMDType;

struct U1_Data2PEChannelType{
  U1_Data2PEChannelType(){}
  U1_Data2PEChannelType(
    U1_data_t2 data_t){
    data = data_t;
  }
  U1_data_t2 data;
};

void U1_DataFeed0Head_Shim(
  U1_bus_t0* cin,
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_cin,
  uint LAYER_IN_NUM,
  uint LAYER_OUT_NUM,
  uint LAYER_IN_NUM_T,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H,
  uint LAYER_IN_IMG_W,
  uint LAYER_OUT_IMG_H,
  uint LAYER_OUT_IMG_W,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_FILTER_S,
  uint LAYER_BATCH,
  uint LAYER_STRIDE,
  stream<U1_ConfigInst> &fifo_kernel_config_out
);

void U1_DataFeed0Head(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out0,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
);

void U1_DataFeed1Head_Shim(
  U1_bus_t1* weight,
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_weight,
  uint LAYER_IN_NUM,
  uint LAYER_OUT_NUM,
  uint LAYER_IN_NUM_T,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H,
  uint LAYER_IN_IMG_W,
  uint LAYER_OUT_IMG_H,
  uint LAYER_OUT_IMG_W,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_FILTER_S,
  uint LAYER_BATCH,
  uint LAYER_STRIDE
);

void U1_DataFeed1Head(
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out0,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
);

void U1_DataCollect2Head_Shim(
  U1_bus_t2* cout,
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_cout,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  uint LAYER_IN_NUM,
  uint LAYER_OUT_NUM,
  uint LAYER_IN_NUM_T,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H,
  uint LAYER_IN_IMG_W,
  uint LAYER_OUT_IMG_H,
  uint LAYER_OUT_IMG_W,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE
);

void U1_DataCollect2Head(
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_out,
  stream<U1_Data2TransferChannelType> &fifo_transfer_in0,
  stream<uint> &fifo_config_in
);

void U1_DataFeed0Engine0_wrapper(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
);

void U1_DataFeed0EngineLast(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out1
);

void U1_DataFeed1Engine0_wrapper(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
);

void U1_DataFeed1EngineLast(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in
);

void U1_DataCollect2Engine0_wrapper(
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_in1,
  stream<uint> &fifo_config_out
);

void U1_DataCollect2EngineLast(
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_out
);

void U1_kernel(
  U1_bus_t0* cin,
  U1_bus_t1* weight,
  U1_bus_t2* cout,
  bool init,
  unsigned int FILTER_S
);

//template<typename To, typename From>
//inline To Reinterpret(const From& val){
//  return reinterpret_cast<const To&>(val);
//}

template<class data_t, class bus_t, int WIDTH>
data_t data_select(
  bus_t bus_data,
  uint offset
){
  data_t ret;
  ret = Reinterpret<data_t>((ap_uint<WIDTH>)bus_data(WIDTH-1 + offset*WIDTH, offset*WIDTH));
  return ret;
}
/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_DataFeed0Head_Shim(
  U1_bus_t0* cin,
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_cin,
  uint LAYER_IN_NUM,
  uint LAYER_OUT_NUM,
  uint LAYER_IN_NUM_T,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H,
  uint LAYER_IN_IMG_W,
  uint LAYER_OUT_IMG_H,
  uint LAYER_OUT_IMG_W,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_BATCH,
  stream<U1_ConfigInst> &fifo_kernel_config_out
){
#pragma HLS INLINE off

  uint LAYER_TASK_NUM1 = (LAYER_IN_NUM / LAYER_IN_NUM_T) * (LAYER_OUT_NUM / LAYER_OUT_NUM_T) * (LAYER_OUT_IMG_H / LAYER_IN_IMG_H_T * LAYER_STRIDE) * (LAYER_OUT_IMG_W / LAYER_IN_IMG_W_T * LAYER_STRIDE);
  uint LAYER_TASK_NUM2 = (LAYER_OUT_NUM / LAYER_OUT_NUM_T) * (LAYER_OUT_IMG_H / LAYER_IN_IMG_H_T * LAYER_STRIDE) * (LAYER_OUT_IMG_W / LAYER_IN_IMG_W_T * LAYER_STRIDE);
  uint LAYER_LOCAL_ACCUM_NUM = LAYER_IN_NUM_T / U1_SIMD_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S;
  uint LAYER_LOCAL_REG_NUM = (LAYER_IN_IMG_H_T / LAYER_STRIDE) * (LAYER_IN_IMG_W_T / U1_SA_COLS / LAYER_STRIDE) * LAYER_OUT_NUM_T / U1_SA_ROWS;
  uint LAYER_ROW_IL_FACTOR = LAYER_OUT_NUM_T / U1_SA_ROWS;
  uint LAYER_COL_IL_FACTOR = LAYER_IN_IMG_W_T / U1_SA_COLS / LAYER_STRIDE;

  ap_uint<32> CIN_OFFSET = 0;
  ap_uint<32> WEIGHT_OFFSET = 0;
  ap_uint<32> BIAS_OFFSET = 0;
  ap_uint<32> COUT_OFFSET = 0;
  ap_uint<16> FILTER_S1 = LAYER_FILTER_S;
  ap_uint<16> FILTER_S2 = LAYER_FILTER_S;
  ap_uint<32> STRIDE = LAYER_STRIDE;
  ap_uint<32> LAYER_EN = 0;
  ap_uint<32> LAYER_IN_NUM_cast = LAYER_IN_NUM;
  ap_uint<32> LAYER_OUT_NUM_cast = LAYER_OUT_NUM;
  ap_uint<32> LAYER_IN_NUM_T_cast = LAYER_IN_NUM_T;
  ap_uint<32> LAYER_OUT_NUM_T_cast = LAYER_OUT_NUM_T;
  ap_uint<32> LAYER_IN_IMG_H_T_cast = LAYER_IN_IMG_H_T;
  ap_uint<32> LAYER_IN_IMG_W_T_cast = LAYER_IN_IMG_W_T;
  ap_uint<32> LAYER_IN_IMG_H_cast = LAYER_IN_IMG_H;
  ap_uint<32> LAYER_IN_IMG_W_cast = LAYER_IN_IMG_W;
  ap_uint<32> LAYER_OUT_IMG_H_cast = LAYER_OUT_IMG_H;
  ap_uint<32> LAYER_OUT_IMG_W_cast = LAYER_OUT_IMG_W;
  ap_uint<32> LAYER_BATCH_cast = LAYER_BATCH;

  ap_uint<32> LAYER_TASK_NUM1_cast = LAYER_TASK_NUM1;
  ap_uint<32> LAYER_TASK_NUM2_cast = LAYER_TASK_NUM2;
  ap_uint<32> LAYER_LOCAL_ACCUM_NUM_cast = LAYER_LOCAL_ACCUM_NUM;
  ap_uint<32> LAYER_LOCAL_REG_NUM_cast = LAYER_LOCAL_REG_NUM;
  ap_uint<32> LAYER_ROW_IL_FACTOR_cast = LAYER_ROW_IL_FACTOR;
  ap_uint<32> LAYER_COL_IL_FACTOR_cast = LAYER_COL_IL_FACTOR;

  U1_bus_t0 cin_buf[U1_DATA0_HEAD_BUF_SIZE / U1_DATA0_PACK_FACTOR];
  ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> sel_tmp[U1_DATA0_PACK_FACTOR / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp complete dim=1

  for (ap_uint<2> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    U1_ConfigInst inst0 = (LAYER_OUT_IMG_W_cast, LAYER_OUT_IMG_H_cast, LAYER_IN_IMG_W_cast, LAYER_IN_IMG_H_cast, LAYER_OUT_NUM_cast, LAYER_IN_NUM_cast);
    U1_ConfigInst inst1 = (LAYER_OUT_IMG_W_cast, LAYER_OUT_IMG_H_cast, LAYER_IN_IMG_W_cast, LAYER_IN_IMG_H_cast, LAYER_OUT_NUM_cast, LAYER_IN_NUM_cast);
    U1_ConfigInst inst2 = (STRIDE, FILTER_S2, FILTER_S1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);
    U1_ConfigInst inst3 = (LAYER_BATCH_cast, LAYER_IN_IMG_W_T_cast, LAYER_IN_IMG_H_T_cast, LAYER_OUT_NUM_T_cast, LAYER_IN_NUM_T_cast, LAYER_EN);
    U1_ConfigInst inst4 = (LAYER_COL_IL_FACTOR_cast, LAYER_ROW_IL_FACTOR_cast, LAYER_LOCAL_REG_NUM_cast, LAYER_LOCAL_ACCUM_NUM_cast, LAYER_TASK_NUM2_cast, LAYER_TASK_NUM1_cast);

    fifo_kernel_config_out.write(inst0);
    fifo_kernel_config_out.write(inst1);
    fifo_kernel_config_out.write(inst2);
    fifo_kernel_config_out.write(inst3);
    fifo_kernel_config_out.write(inst4);

    for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += LAYER_IN_IMG_H_T / LAYER_STRIDE){
      for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += LAYER_IN_IMG_W_T / LAYER_STRIDE){
        for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += LAYER_OUT_NUM_T){
          uint chunk_offset = out_img_h_t * LAYER_IN_IMG_W * LAYER_IN_NUM;
          for (int in_img_h_t = 0; in_img_h_t < LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1; in_img_h_t++){
            uint local_chunk_offset = chunk_offset + in_img_h_t * LAYER_IN_IMG_W * LAYER_IN_NUM + out_img_w_t * LAYER_IN_NUM;
            memcpy((void*)(cin_buf + in_img_h_t * (LAYER_IN_IMG_W_T + LAYER_FILTER_S - 1) * LAYER_IN_NUM / U1_DATA0_PACK_FACTOR), (void*)(cin + local_chunk_offset / U1_DATA0_PACK_FACTOR), sizeof(U1_data_t0) * (LAYER_IN_IMG_W_T + LAYER_FILTER_S - 1) * LAYER_IN_NUM);
          }
          for (int in_num_t = 0; in_num_t < LAYER_IN_NUM; in_num_t += LAYER_IN_NUM_T){
            for (int ii = 0; ii < LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR; ii++){
              for (int hh = 0; hh < LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1; hh++){
                for (int ww = 0; ww < LAYER_IN_IMG_W_T + LAYER_FILTER_S - 1; ww++){
#pragma HLS PIPELINE II=1
                  uint cin_local_idx = hh * (LAYER_IN_IMG_W_T + LAYER_FILTER_S - 1) * LAYER_IN_NUM + ww * LAYER_IN_NUM + (in_num_t + ii * U1_DATA0_FC_SIMD_FACTOR);
                  uint cin_bus_idx = cin_local_idx / U1_DATA0_PACK_FACTOR;
                  uint cin_bus_offset = cin_local_idx % U1_DATA0_PACK_FACTOR;
                  U1_bus_t0 bus_data = cin_buf[cin_bus_idx];
                  ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> fifo_cin_data;
                  for (ap_uint<2> s = 0; s < U1_DATA0_PACK_FACTOR / U1_DATA0_FC_SIMD_FACTOR; s++){
#pragma HLS UNROLL
                    sel_tmp[s] = bus_data(U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR - 1, 0);
                    bus_data = bus_data >> (U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR);
                  }
                  fifo_cin_data = sel_tmp[cin_bus_offset / U1_DATA0_FC_SIMD_FACTOR];
                  fifo_transfer_cin.write(fifo_cin_data);
                }
              }
            }
          }
        }
      }
    }
  }
}

void U1_DataFeed0Head(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out0,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_out0

  // loader buffer
   ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> cin_buf[U1_IN_NUM_T * U1_IN_IMG_H_T * U1_IN_IMG_W_T / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=cin_buf dim=1 block factor=1

  // Read instructions
  U1_ConfigInst inst0 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst0);
  U1_ConfigInst inst1 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst1);
  U1_ConfigInst inst2 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst2);
  U1_ConfigInst inst3 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst3);
  U1_ConfigInst inst4 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst4);
  U1_ConfigInst inst5 = fifo_kernel_config_in.read();
  fifo_kernel_config_out.write(inst5);
  ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  ap_uint<2> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // Read instructions
      inst0 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst0);
      inst1 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst1);
      inst2 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst2);
      inst3 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst3);
      inst4 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst4);
      inst5 = fifo_kernel_config_in.read();
      fifo_kernel_config_out.write(inst5);
    }
    ap_uint<32> EXT_LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
    // inst1
    ap_uint<32> EXT_LAYER_IN_NUM     = inst1(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_IN_H       = inst1(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_IN_W       = inst1(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_OUT_H      = inst1(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_OUT_W      = inst1(32*5+31, 32*5);
    // inst2
    ap_uint<32> EXT_CIN_OFFSET       = inst2(32*0+31, 32*0);
    ap_uint<32> EXT_WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
    ap_uint<32> EXT_BIAS_OFFSET      = inst2(32*2+31, 32*2);
    ap_uint<32> EXT_COUT_OFFSET      = inst2(32*3+31, 32*3);
    ap_uint<16> EXT_FILTER_S1        = inst2(32*4+15, 32*4);
    ap_uint<16> EXT_FILTER_S2        = inst2(32*4+31, 32*4+16);
    ap_uint<32> EXT_STRIDE           = inst2(32*5+31, 32*5);
    // inst3
    ap_uint<32> EXT_LAYER_EN         = inst3(32*0+31, 32*0);
    ap_uint<32> EXT_PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
    ap_uint<16> EXT_LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
    ap_uint<16> EXT_LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
    ap_uint<32> EXT_LAYER_IN_IMG_H_T = inst3(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_IN_IMG_W_T = inst3(32*4+31, 32*4);
    ap_uint<1>  EXT_CONV_1ST_EN      = EXT_LAYER_EN[0];
    ap_uint<1>  EXT_DEPTH_CONV_EN    = EXT_LAYER_EN[1];
    ap_uint<1>  EXT_CONV_EN          = EXT_LAYER_EN[2];
    ap_uint<1>  EXT_RELU_EN          = EXT_LAYER_EN[3];
    ap_uint<1>  EXT_RELU6_EN         = EXT_LAYER_EN[4];
    ap_uint<1>  EXT_POOL_EN          = EXT_LAYER_EN[5];

    ap_uint<32> EXT_LAYER_TASK_NUM1        = inst4(32*0+31, 32*0);
    ap_uint<32> EXT_LAYER_TASK_NUM2        = inst4(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_LOCAL_ACCUM_NUM  = inst4(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_LOCAL_REG_NUM    = inst4(32*3+31, 32*3);
    ap_uint<32> EXT_LAYER_ROW_IL_FACTOR    = inst4(32*4+31, 32*4);
    ap_uint<32> EXT_LAYER_COL_IL_FACTOR    = inst4(32*5+31, 32*5);
//1 2 4 571547937
    ap_uint<32> EXT_KH_KW               = inst5(32*0+31, 32*0);    
    ap_uint<32> EXT_K_NUM               = inst5(32*1+31, 32*1);
    ap_uint<32> EXT_LAYER_TCONV_STRIDE  = inst5(32*2+31, 32*2);
    ap_uint<32> EXT_LAYER_DILATION_RATE = inst5(32*3+31, 32*3);
    ap_uint<16> EXT_FILTER_D1           = inst5(32*4+15, 32*4);
    ap_uint<16> EXT_FILTER_D0           = inst5(32*4+31, 32*4+16);
    ap_uint<32> EXT_LAYER_CONV_TYPE     = inst5(32*5+31, 32*5);
    
    // cout<<EXT_LAYER_CONV_TYPE<<" "<<EXT_FILTER_D0<<" "<<EXT_FILTER_D1<<" "<<EXT_LAYER_DILATION_RATE<<" "<<EXT_LAYER_TCONV_STRIDE<<" "<<EXT_K_NUM<<" "<<EXT_KH_KW<<endl;

    uint EXT_FILTER_S = (EXT_CONV_EN == 1)? (uint)EXT_FILTER_S2: 1;
    bool separable_conv = (EXT_DEPTH_CONV_EN == 1) && (EXT_CONV_EN == 1);
    bool conv2d = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 1);
    bool max_pool = (EXT_DEPTH_CONV_EN == 0) && (EXT_CONV_EN == 0);
    uint stride1 = (EXT_DEPTH_CONV_EN == 0)? 1 : (uint)EXT_STRIDE;
    uint stride2 = (EXT_DEPTH_CONV_EN == 0)? (uint)EXT_STRIDE : 1;

    uint LAYER_IN_IMG_H = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_H_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_H_HW;
    uint LAYER_IN_IMG_W = (EXT_DEPTH_CONV_EN == 1)? (uint)EXT_LAYER_IN_W_HW - (uint)EXT_FILTER_S1 + 1: (uint)EXT_LAYER_IN_W_HW;
    uint LAYER_OUT_IMG_H = EXT_LAYER_OUT_H;
    uint LAYER_OUT_IMG_W = EXT_LAYER_OUT_W;
    uint LAYER_IN_NUM = EXT_LAYER_IN_NUM_HW;
    uint LAYER_OUT_NUM = EXT_LAYER_OUT_NUM_HW;
    uint LAYER_IN_NUM_T = EXT_LAYER_IN_NUM_T;
    uint LAYER_OUT_NUM_T = EXT_LAYER_OUT_NUM_T;
    uint LAYER_IN_IMG_H_T;
    uint LAYER_IN_IMG_W_T;
    if (stride1 == 1){
      LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T;
      LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T;
    } else if (stride1 == 2){
      LAYER_IN_IMG_H_T = EXT_LAYER_IN_IMG_H_T / 2;
      LAYER_IN_IMG_W_T = EXT_LAYER_IN_IMG_W_T / 2;
    }
    ///////////////////////TCONV///////////////////////
    uint LAYER_FILTER_S = EXT_FILTER_S2;
    uint LAYER_STRIDE = stride2;

    uint LAYER_TASK_NUM1 = EXT_LAYER_TASK_NUM1;
    uint LAYER_TASK_NUM2 = EXT_LAYER_TASK_NUM2;
    uint LAYER_LOCAL_ACCUM_NUM = EXT_LAYER_LOCAL_ACCUM_NUM;
    uint LAYER_LOCAL_REG_NUM = EXT_LAYER_LOCAL_REG_NUM;
    uint LAYER_ROW_IL_FACTOR = EXT_LAYER_ROW_IL_FACTOR;
    uint LAYER_COL_IL_FACTOR = EXT_LAYER_COL_IL_FACTOR;

    //////////////////new parameters///////////////////////  
    uint LAYER_CONV_TYPE = EXT_LAYER_CONV_TYPE;
    uint FILTER_D0 = EXT_FILTER_D0;
    uint FILTER_D1 = EXT_FILTER_D1;
    uint LAYER_DILATION_RATE = EXT_LAYER_DILATION_RATE;
    uint LAYER_TCONV_STRIDE = EXT_LAYER_TCONV_STRIDE;
    uint K_NUM = EXT_K_NUM;
    uint KH_KW = EXT_KH_KW;

    // cout<<EXT_LAYER_CONV_TYPE<<" "<<EXT_K_NUM<<endl;
    // uint KH_KW = {EXT_KH_KW(31, 28), EXT_KH_KW(27, 24), EXT_KH_KW(23, 20), EXT_KH_KW(19, 16)};
    // for(int i=7; i>=0; i--){
    //   // cout<<EXT_KH_KW(4*i+3, 4*i)<<endl;
    //   cout<<"EXT_KH_KW("<<4*i+3<<", "<< 4*i<<") = "<<EXT_KH_KW(4*i+3, 4*i)<<endl;
    // }
    // cout<<EXT_KH_KW(3,0)<<" "<<K_Hs[1]<<endl;
    // uint K_Ws[4] = {EXT_KH_KW(15, 12), EXT_KH_KW(11, 8), EXT_KH_KW(7, 4), EXT_KH_KW(3, 0)};
    
    // uint LAYER_CONV_TYPE = 0;  
    // uint K_NUM = 1;
    // uint KH_KW = {3};
    // uint K_Ws[4] = {3};

    // write out configurations
    fifo_config_out0.write(LAYER_IN_NUM_T);
    fifo_config_out0.write(LAYER_OUT_NUM_T);
    fifo_config_out0.write(LAYER_IN_IMG_H_T);
    fifo_config_out0.write(LAYER_IN_IMG_W_T);
    fifo_config_out0.write(LAYER_FILTER_S);
    fifo_config_out0.write(LAYER_TASK_NUM1);
    fifo_config_out0.write(LAYER_TASK_NUM2);
    fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out0.write(LAYER_COL_IL_FACTOR);
    fifo_config_out0.write(LAYER_STRIDE);
    fifo_config_out0.write(LAYER_BATCH);
    //////////////////new parameters///////////////////////
    fifo_config_out0.write(LAYER_CONV_TYPE);
    fifo_config_out0.write(FILTER_D0);
    fifo_config_out0.write(FILTER_D1);	
    fifo_config_out0.write(LAYER_DILATION_RATE);
    fifo_config_out0.write(LAYER_TCONV_STRIDE);
    fifo_config_out0.write(K_NUM);
    fifo_config_out0.write(KH_KW);
    // fifo_config_out0.write(K_Hs[1]);
    // fifo_config_out0.write(K_Hs[2]);
    // fifo_config_out0.write(K_Hs[3]);
    // fifo_config_out0.write(K_Ws[0]);
    // fifo_config_out0.write(K_Ws[1]);
    // fifo_config_out0.write(K_Ws[2]);
    // fifo_config_out0.write(K_Ws[3]);



    fifo_config_out1.write(LAYER_IN_NUM);
    fifo_config_out1.write(LAYER_IN_NUM_T);
    fifo_config_out1.write(LAYER_OUT_NUM_T);
    fifo_config_out1.write(LAYER_IN_IMG_H_T);
    fifo_config_out1.write(LAYER_IN_IMG_W_T);
    fifo_config_out1.write(LAYER_FILTER_S);
    fifo_config_out1.write(LAYER_TASK_NUM1);
    fifo_config_out1.write(LAYER_TASK_NUM2);
    fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out1.write(LAYER_COL_IL_FACTOR);
    fifo_config_out1.write(LAYER_STRIDE);
    fifo_config_out1.write(LAYER_BATCH);
    //////////////////new parameters///////////////////////
    fifo_config_out1.write(LAYER_CONV_TYPE);
    fifo_config_out1.write(FILTER_D0);
    fifo_config_out1.write(FILTER_D1);	
    fifo_config_out1.write(LAYER_DILATION_RATE);
    fifo_config_out1.write(LAYER_TCONV_STRIDE);
    fifo_config_out1.write(K_NUM);
    fifo_config_out1.write(KH_KW);
    // fifo_config_out1.write(K_Hs[1]);
    // fifo_config_out1.write(K_Hs[2]);
    // fifo_config_out1.write(K_Hs[3]);
    // fifo_config_out1.write(K_Ws[0]);
    // fifo_config_out1.write(K_Ws[1]);
    // fifo_config_out1.write(K_Ws[2]);
    // fifo_config_out1.write(K_Ws[3]);
    ///////////////TCONV///////////////
    // if(LAYER_CONV_TYPE == 1){
    //   LAYER_FILTER_S = 2;
    // }
    ///////////////////////////////////
    ///////////////DCONV///////////////
    // if(LAYER_CONV_TYPE == 2){
    //   LAYER_FILTER_S = 5;
    // }
    ///////////////////////////////////

    // cout<<"U1_DataFeed0Head: "<<FILTER_D0<<endl;

    ap_uint<29> task_iter = 0;
    ap_uint<11> in_num_t = 0;
    bool done2 = 0;
    while(!done2){
      if (FILTER_D0 > 1){
        bool done3 = 0;
        ap_uint<11> ii = 0;
        ap_uint<10> hh = 0;
        ap_uint<10> ww = 0;
        while(!done3){
#pragma HLS PIPELINE II=1
          uint cin_local_idx = hh *  (LAYER_IN_IMG_W_T + FILTER_D0 - 1) * LAYER_IN_NUM_T + ww * LAYER_IN_NUM_T + ii * U1_DATA0_FC_SIMD_FACTOR;
          cin_buf[cin_local_idx / U1_DATA0_FC_SIMD_FACTOR] = fifo_transfer_in.read();
          // cout<<cin_local_idx / U1_DATA0_FC_SIMD_FACTOR<<endl;
          ww++;
          //changed to -2 to match the actual size of the input where it is padded with 1 not 2
          if (ww == LAYER_IN_IMG_W_T + FILTER_D0 - 1){
            ww = 0;
            hh++;
            if (hh == LAYER_IN_IMG_H_T + FILTER_D0 - 1){
              hh = 0;
              ii++;
              if (ii == LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR){
                ii = 0;
                done3 = 1;
              }
            }
          }
        }
      }
      bool init_final = (in_num_t == 0);
      bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));
      // write to SA
      ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> sel_tmp0[U1_DATA0_PACK_FACTOR / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp0 complete dim=1
      ap_uint<11> t3 = 0;
      ap_uint<10> t1 = 0;
      ap_uint<4> t0 = 0;
      ap_uint<7> t2 = 0;
      bool done4 = 0;
      while(!done4){
#pragma HLS PIPELINE II=1
        uint local_in_img_w = t0 * (LAYER_IN_IMG_W_T / U1_SA_COLS) + t2;
        uint local_in_num = in_num_t + t3 * U1_DATA0_FC_SIMD_FACTOR;
        uint local_in_img_h = t1;
        uint feeder_id = t0 / U1_DATA0_FC_GROUP_FACTOR;
        ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> wide_data0;
        if (FILTER_D0 > 1){
          uint cin_local_index = local_in_img_h * (LAYER_IN_IMG_W_T + FILTER_D0 - 1) * LAYER_IN_NUM_T + local_in_img_w * LAYER_IN_NUM_T + t3 * U1_DATA0_FC_SIMD_FACTOR;
          uint cin_bus_index = cin_local_index / U1_DATA0_FC_SIMD_FACTOR;
          wide_data0 = cin_buf[cin_bus_index];
        } else {
          wide_data0 = fifo_transfer_in.read();
        }
        fifo_transfer_out0.write(U1_Data0TransferChannelType(
          wide_data0,
          (uint)feeder_id, init_final, last, FILTER_D0));

        t2++;
        //changed to -2 to match the actual size of the input where it is padded with 1 not 2
        if (t2 == LAYER_IN_IMG_W_T / U1_SA_COLS + FILTER_D0 - 1){
          t2 = 0;
          t0++;
          if (t0 == U1_SA_COLS / U1_DATA0_FC_SPLIT_FACTOR){
            t0 = 0;
            t1++;
            if (t1 == LAYER_IN_IMG_H_T + FILTER_D0 - 1){
              t1 = 0;
              t3++;
              if (t3 == LAYER_IN_NUM_T / U1_DATA0_FC_SIMD_FACTOR){
                t3 = 0;
                done4 = 1;
              }
            }
          }
        }
      }

      in_num_t += LAYER_IN_NUM_T;
      if (in_num_t == LAYER_IN_NUM){
        in_num_t = 0;
        task_iter++;
        if (task_iter == LAYER_TASK_NUM2){
          task_iter = 0;
          done2 = 1;
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_DataFeed1Head_Shim(
  U1_bus_t1* weight,
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_weight,
  uint LAYER_IN_NUM,
  uint LAYER_OUT_NUM,
  uint LAYER_IN_NUM_T,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H,
  uint LAYER_IN_IMG_W,
  uint LAYER_OUT_IMG_H,
  uint LAYER_OUT_IMG_W,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_BATCH
){
#pragma HLS INLINE off
  U1_bus_t1 weight_buf[U1_DATA1_HEAD_BUF_SIZE / U1_DATA1_PACK_FACTOR];
  ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> sel_tmp[U1_DATA1_PACK_FACTOR / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp complete dim=1

  for (ap_uint<2> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += LAYER_IN_IMG_H_T / LAYER_STRIDE){
      for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += LAYER_IN_IMG_W_T / LAYER_STRIDE){
        for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += LAYER_OUT_NUM_T){
          uint chunk_offset = out_num_t * FILTER_S * FILTER_S * LAYER_IN_NUM;
          memcpy((void*)weight_buf, (void*)(weight + chunk_offset / U1_DATA1_PACK_FACTOR), sizeof(U1_data_t1) * LAYER_OUT_NUM_T * FILTER_S * FILTER_S * LAYER_IN_NUM);
          for (int in_num_t = 0; in_num_t < LAYER_IN_NUM; in_num_t += LAYER_IN_NUM_T){
            for (int oo =0; oo < LAYER_OUT_NUM_T; oo++){
              for (int p = 0; p < FILTER_S; p++){
                for (int q = 0; q < FILTER_S; q++){
                  for (int ii = 0; ii < LAYER_IN_NUM_T / U1_DATA1_FC_SIMD_FACTOR; ii++){
#pragma HLS PIPELINE II=1
                    uint weight_local_idx = oo * FILTER_S * FILTER_S * LAYER_IN_NUM + p * FILTER_S * LAYER_IN_NUM + q * LAYER_IN_NUM + (in_num_t + ii * U1_DATA1_FC_SIMD_FACTOR);
                    uint weight_bus_idx = weight_local_idx / U1_DATA1_PACK_FACTOR;
                    uint weight_bus_offset = weight_local_idx % U1_DATA1_PACK_FACTOR;
                    U1_bus_t1 bus_data = weight_buf[weight_bus_idx];
                    ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> fifo_weight_data;
                    for (ap_uint<2> s = 0; s < U1_DATA1_PACK_FACTOR / U1_DATA1_FC_SIMD_FACTOR; s++){
#pragma HLS UNROLL
                      sel_tmp[s] = bus_data(U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR - 1, 0);
                      bus_data = bus_data >> (U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR);
                    }
                    fifo_weight_data = sel_tmp[weight_bus_offset / U1_DATA1_FC_SIMD_FACTOR];
                    fifo_transfer_weight.write(fifo_weight_data);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void U1_DataFeed1Head(
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out0,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_out0

  // read in configurations
  uint LAYER_IN_NUM = fifo_config_in.read();
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();
  ///////////tweak//////////////
  // if(LAYER_CONV_TYPE == 2){
  //   LAYER_FILTER_S = (KH_KW>>28);
  // }
  ///////////tweak//////////////


  // cout<<"U1_DataFeed1Head: "<<FILTER_D1<<endl;
  // loader buffer
   ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> weight_buf[U1_IN_NUM_T * U1_OUT_NUM_T * U1_K * U1_K / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=weight_buf dim=1 block factor=1

  bool done1 = 0;
  ap_uint<2> layer_iter = 0;
  while(!done1){
    if (layer_iter > 0){
      LAYER_IN_NUM = fifo_config_in.read();
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();
    }
    // write out configurations
    fifo_config_out.write(LAYER_IN_NUM_T);
    fifo_config_out.write(LAYER_OUT_NUM_T);
    fifo_config_out.write(LAYER_IN_IMG_H_T);
    fifo_config_out.write(LAYER_IN_IMG_W_T);
    fifo_config_out.write(LAYER_FILTER_S);
    fifo_config_out.write(LAYER_TASK_NUM1);
    fifo_config_out.write(LAYER_TASK_NUM2);
    fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
    fifo_config_out.write(LAYER_LOCAL_REG_NUM);
    fifo_config_out.write(LAYER_ROW_IL_FACTOR);
    fifo_config_out.write(LAYER_COL_IL_FACTOR);
    fifo_config_out.write(LAYER_STRIDE);
    fifo_config_out.write(LAYER_BATCH);
    //////////////////new parameters///////////////////////
    fifo_config_out.write(LAYER_CONV_TYPE);
    fifo_config_out.write(FILTER_D0);
    fifo_config_out.write(FILTER_D1);	
    fifo_config_out.write(LAYER_DILATION_RATE);
    fifo_config_out.write(LAYER_TCONV_STRIDE);
    fifo_config_out.write(K_NUM);
    fifo_config_out.write(KH_KW);
    // fifo_config_out.write(K_Hs[1]);
    // fifo_config_out.write(K_Hs[2]);
    // fifo_config_out.write(K_Hs[3]);
    // fifo_config_out.write(K_Ws[0]);
    // fifo_config_out.write(K_Ws[1]);
    // fifo_config_out.write(K_Ws[2]);
    // fifo_config_out.write(K_Ws[3]);

    bool done2 = 0;
    uint task_iter = 0;
    ap_uint<11> in_num_t = 0;
    while(!done2){
      bool init_final = (in_num_t == 0);
      bool last = (in_num_t == (LAYER_IN_NUM - LAYER_IN_NUM_T));
      // write to SA
      ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> sel_tmp0[U1_DATA1_PACK_FACTOR / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp0 complete dim=1
      ap_uint<10> t0 = 0;
      ap_uint<10> t1 = 0;
      ap_uint<10> t2 = 0;
      ap_uint<10> t3 = 0;
      ap_uint<11> t4 = 0;
      bool done3 = 0;
      while(!done3){
#pragma HLS PIPELINE II=1
        ap_uint<4> feeder_id = t0 / U1_DATA1_FC_GROUP_FACTOR;
        ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> wide_data0;
        wide_data0 = fifo_transfer_in.read();
        fifo_transfer_out0.write(U1_Data1TransferChannelType(
          wide_data0,
          (uint)feeder_id, init_final, last, FILTER_D1));

        t4++;
        if (t4 == LAYER_IN_NUM_T / U1_DATA1_FC_SIMD_FACTOR){
          t4 = 0;
          t3++;
          if (t3 == FILTER_D1){
            t3 = 0;
            t2++;
            if (t2 == FILTER_D1){
              t2 = 0;
              t1++;
              if (t1 == LAYER_ROW_IL_FACTOR){
                t1 = 0;
                t0++;
                if (t0 == U1_SA_ROWS / U1_DATA1_FC_SPLIT_FACTOR){
                  t0 = 0;
                  done3 = 1;
                }
              }
            }
          }
        }
      }

      in_num_t += LAYER_IN_NUM_T;
      if (in_num_t == LAYER_IN_NUM){
        in_num_t = 0;
        task_iter++;
        if (task_iter == LAYER_TASK_NUM2){
          task_iter = 0;
          done2 = 1;
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_DataCollect2Head_Shim(
  U1_bus_t2* cout,
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_cout,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  uint LAYER_IN_NUM,
  uint LAYER_OUT_NUM,
  uint LAYER_IN_NUM_T,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H,
  uint LAYER_IN_IMG_W,
  uint LAYER_OUT_IMG_H,
  uint LAYER_OUT_IMG_W,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE
){
#pragma HLS INLINE off

  U1_ConfigInst inst0 = fifo_kernel_config_in.read();
  U1_ConfigInst inst1 = fifo_kernel_config_in.read();
  U1_ConfigInst inst2 = fifo_kernel_config_in.read();
  U1_ConfigInst inst3 = fifo_kernel_config_in.read();
  U1_ConfigInst inst4 = fifo_kernel_config_in.read();
  ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  U1_bus_t2 cout_buf[U1_DATA2_HEAD_BUF_SIZE / U1_DATA2_PACK_FACTOR];
  ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> sel_tmp[U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp complete dim=1

  for (ap_uint<2> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      U1_ConfigInst inst0 = fifo_kernel_config_in.read();
      U1_ConfigInst inst1 = fifo_kernel_config_in.read();
      U1_ConfigInst inst2 = fifo_kernel_config_in.read();
      U1_ConfigInst inst3 = fifo_kernel_config_in.read();
      U1_ConfigInst inst4 = fifo_kernel_config_in.read();
    }
    for (int out_img_h_t = 0; out_img_h_t < LAYER_OUT_IMG_H; out_img_h_t += LAYER_IN_IMG_H_T / LAYER_STRIDE){
      for (int out_img_w_t = 0; out_img_w_t < LAYER_OUT_IMG_W; out_img_w_t += LAYER_IN_IMG_W_T / LAYER_STRIDE){
        for (int out_num_t = 0; out_num_t < LAYER_OUT_NUM; out_num_t += LAYER_OUT_NUM_T){
          for (int o = 0; o < LAYER_OUT_NUM_T / U1_DATA2_PACK_FACTOR; o++){
            for (int oo = 0; oo < U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR; oo++){
              for (int h = 0; h < LAYER_IN_IMG_H_T / LAYER_STRIDE; h++){
                for (int w = 0; w < LAYER_IN_IMG_W_T / LAYER_STRIDE; w++){
#pragma HLS PIPELINE II=1
#pragma HLS DEPENDENCE INTER false variable=cout_buf
                  uint cout_local_index = h * LAYER_IN_IMG_W_T / LAYER_STRIDE * LAYER_OUT_NUM + w * LAYER_OUT_NUM + o * U1_DATA2_PACK_FACTOR + oo * U1_DATA2_FC_SIMD_FACTOR + out_num_t;
                  U1_bus_t2 bus_data = cout_buf[cout_local_index / U1_DATA2_PACK_FACTOR];
                  for (ap_uint<2> s = 0; s < U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR; s++){
#pragma HLS UNROLL
                    sel_tmp[s] = bus_data(U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR - 1, 0);
                    bus_data = bus_data >> (U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR);
                  }
                  ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> fifo_cout_data = fifo_transfer_cout.read();
                  sel_tmp[oo] = fifo_cout_data;
                  U1_bus_t2 wide_pack = (
#if U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR == 1
                    sel_tmp[0]
#elif U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR == 2
                    sel_tmp[1], sel_tmp[0]
#elif U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR == 4
                    sel_tmp[3], sel_tmp[2], sel_tmp[1], sel_tmp[0]
#elif U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR == 8
                    sel_tmp[7], sel_tmp[6], sel_tmp[5], sel_tmp[4],
                    sel_tmp[3], sel_tmp[2], sel_tmp[1], sel_tmp[0]
#elif U1_DATA2_PACK_FACTOR / U1_DATA2_FC_SIMD_FACTOR == 16
                    sel_tmp[15], sel_tmp[14], sel_tmp[13], sel_tmp[12],
                    sel_tmp[11], sel_tmp[10], sel_tmp[9], sel_tmp[8],
                    sel_tmp[7], sel_tmp[6], sel_tmp[5], sel_tmp[4],
                    sel_tmp[3], sel_tmp[2], sel_tmp[1], sel_tmp[0]
#endif
                  );
                  cout_buf[cout_local_index / U1_DATA2_PACK_FACTOR] = wide_pack;
                }
              }
            }
          }
        }
        unsigned int chunk_offset = out_img_h_t * U1_OUT_IMG_W * LAYER_OUT_NUM;
        for (int h = 0; h < LAYER_IN_IMG_H_T / LAYER_STRIDE; h++){
          uint local_chunk_offset = chunk_offset + h * U1_OUT_IMG_W * LAYER_OUT_NUM + out_img_w_t * LAYER_OUT_NUM;
          memcpy((void*)(cout + local_chunk_offset / U1_DATA2_PACK_FACTOR), (void*)(cout_buf + h * U1_OUT_IMG_W_T * LAYER_OUT_NUM / U1_DATA2_PACK_FACTOR), sizeof(U1_data_t2) * LAYER_IN_IMG_W_T / LAYER_STRIDE * LAYER_OUT_NUM);
        }
      }
    }
  }
}

void U1_DataCollect2Head(
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_transfer_out,
  stream<U1_Data2TransferChannelType> &fifo_transfer_in0,
  stream<uint> &fifo_config_in
){
#pragma HLS INLINE off
#pragma HLS DATA_PACK variable=fifo_transfer_in0

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();
  // cout<<"U1_DataCollect2Head: "<<LAYER_FILTER_S<<endl;
  // loader buffer
  ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> cout_buf[U1_OUT_IMG_H_T * U1_OUT_IMG_W_T * U1_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR];
  ap_uint<2> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

    }
    int task_num = 0;
    ap_uint<11> t3 = 0;
    ap_uint<8> t1 = 0;
    ap_uint<8> t1_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
    ap_uint<8> t0 = 0;
    ap_uint<8> t2 = 0;
    ap_uint<8> t2_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / U1_SA_COLS / LAYER_STRIDE;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data2TransferChannelType fifo_data0 = fifo_transfer_in0.read();
      fifo_transfer_out.write(fifo_data0.data);
      t2++;
      if (t2 == t2_bound){
        t2 = 0;
        t0++;
        if (t0 == U1_SA_COLS / U1_DATA2_FC_SPLIT_FACTOR){
          t0 = 0;
          t1++;
          if (t1 == t1_bound){
            t1 = 0;
            t3++;
            if (t3 == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
              t3 = 0;
              task_num++;
              if (task_num == LAYER_TASK_NUM2){
                task_num = 0;
                done2 = 1;
              }
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_Data0FeedData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE/U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_DILATION_RATE,
  uint K_NUM,
  uint KH_KW
){
#pragma HLS INLINE off

  bool more_to_feed_to_sys_arr = true;
  ap_uint<10> c0_counter = 0;
  ap_uint<10> c1_counter = 0;
  ap_uint<10> c2_counter = 0;
  ap_uint<10> c3_counter = 0;
  ap_uint<10> c4_counter = 0;
  ap_uint<10> c5_counter = 0;
  ap_uint<10> i = 0;

  ap_uint<5> c0_counter_bound;
  if (LAYER_STRIDE == 1){
    c0_counter_bound = LAYER_IN_IMG_H_T;
  } else if (LAYER_STRIDE == 2){
    c0_counter_bound = LAYER_IN_IMG_H_T / 2;
  }
  // LAYER_STRIDE = 2;
  // int i_bound = 1;
  // int KH_KW = {3};//{2,2,1,1};
  // int K_Ws[4] = {3};//{2,1,2,1};
  ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA0_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1
  ap_uint<4> K_H;
  ap_uint<4> K_W;
  // for(int i=0; i<K_NUM; i++){
    // cout<<"iteration "<<i<<endl;
     
      // switch(i){
      //   case 0: K_H = 2; K_W = 2; break;
      //   case 1: K_H = 2; K_W = 1; break;
      //   case 2: K_H = 1; K_W = 2; break;
      //   case 3: K_H = 1; K_W = 1; break;
      // }
      more_to_feed_to_sys_arr = true;
      while(more_to_feed_to_sys_arr){
        K_H = (KH_KW<<i*4)>>28;
        K_W = (KH_KW<<(i+4)*4)>>28;
    #pragma HLS PIPELINE II=1
        // cout<<c0_counter<<" "<<c1_counter<<" "<<c2_counter<<" "<<c3_counter<<" "<<c4_counter<<" "<<c5_counter<<endl;
        ap_uint<15> buffer_ind_to_feed_to_sys_arr;
        ap_uint<15> w_idx, h_idx;
        // LAYER_STRIDE = 2;
        if (LAYER_STRIDE == 1){
          w_idx = c2_counter + c4_counter*LAYER_DILATION_RATE;
          h_idx = c0_counter + c3_counter*LAYER_DILATION_RATE;
        } else if (LAYER_STRIDE == 2){
          w_idx = c2_counter * 2 + 1 + c4_counter;
          h_idx = c0_counter * 2 + 1 + c3_counter;
        }
        // if(LAYER_CONV_TYPE == 2){
        //   w_idx = c2_counter + c4_counter * 2;//dilation rate
        //   h_idx = c0_counter + c3_counter * 2;
        // }
        // cout<<w_idx<<" "<<h_idx<<endl;

        // LAYER_STRIDE = 1;
        //changed to -2 to match the actual size of the input where it is padded with 1 not 2
        // cout<<w_idx<<" "<<h_idx<<endl;//" "<<c2_counter<<" "<<c3_counter<<" "<<c4_counter<<" "<<c5_counter<<endl;
        ap_uint<15> w_bound = LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S - 1; //5
        ap_uint<15> h_bound = LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1; // 33
        // cout<<w_bound<<" "<<h_bound<<endl;
        buffer_ind_to_feed_to_sys_arr = (w_idx + h_idx * w_bound + c5_counter * U1_SIMD_FACTOR / U1_DATA0_FC_SIMD_FACTOR * h_bound * w_bound) * U1_DATA0_FC_SIMD_FACTOR + c5_counter * U1_SIMD_FACTOR % U1_DATA0_FC_SIMD_FACTOR;
        // cout<<buffer_ind_to_feed_to_sys_arr<<endl;
        ap_uint<15> wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA0_FC_SIMD_FACTOR + ((KH_KW>>28)-K_W)+((KH_KW>>28)-K_H)*(LAYER_COL_IL_FACTOR+1);
        ap_uint<15> wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA0_FC_SIMD_FACTOR;
        
        
        // cout<<c5_counter<<" "<<wide_index<<endl;

        U1_Data0TransferChannelType buf_data_0 = buffer[0][wide_index];

        // cout<<wide_index+(LAYER_FILTER_S-K_W)+(LAYER_FILTER_S-K_H)*(LAYER_COL_IL_FACTOR+1)<<endl;
        // cout<<(2-K_H)<<" "<<(2-K_W)*5<<endl;
        // cout<<buffer_ind_to_feed_to_sys_arr<<endl;//wide_index<<endl;
        ap_uint<U1_DATA0_WIDTH*U1_DATA0_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
        ap_uint<U1_DATA0_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
        for (int s = 0; s < U1_DATA0_FC_SIMD_FACTOR / U1_SIMD_FACTOR; s++){
    #pragma HLS UNROLL
          sel_tmp_0[s] = wide_data_0(U1_DATA0_WIDTH * U1_SIMD_FACTOR-1, 0);
          wide_data_0 = wide_data_0 >> (U1_DATA0_WIDTH * U1_SIMD_FACTOR);
        }
        data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

        U1_Data0PEChannelType fifo_data_to_feed_0;
        fifo_data_to_feed_0 = U1_Data0PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
        // float num[8];
        // for(int i=0; i<8; i++){
        //   num[i] = Reinterpret<float>((ap_uint<32>)fifo_data_to_feed_0.data((i+1)*32-1, 32*i));
        //   printf("%10f\t", num[i]);
        // }
        // printf("\n");
        fifo_feed_0.write(fifo_data_to_feed_0);

        // counter logic
        c0_counter++;
        if (c0_counter == c0_counter_bound){
          c0_counter = 0;
          // cout<<wide_index-248<<" "<<wide_offset<<endl;
          c1_counter++;
          if (c1_counter == LAYER_ROW_IL_FACTOR){
            c1_counter = 0;
            c2_counter++;
            if (c2_counter == LAYER_COL_IL_FACTOR){
              c2_counter = 0;
              c3_counter++;
              if (c3_counter == K_H){
                // cout<<endl;
                c3_counter = 0;
                c4_counter++;
                if (c4_counter == K_W){
                  c4_counter = 0;
                  c5_counter++;
                  if (c5_counter == LAYER_IN_NUM_T / U1_SIMD_FACTOR){
                    c5_counter = 0;
                    i++;
                    if(i == K_NUM){
                      i = 0;
                      more_to_feed_to_sys_arr = false;
                    }
                  }
                }
              }
            }
          }
        }
      }
}

void U1_Data1FeedData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE/U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool more_to_feed_to_sys_arr = true;

  ap_uint<10> c0_counter = 0;
  ap_uint<10> c1_counter = 0;
  ap_uint<10> c2_counter = 0;
  ap_uint<10> c3_counter = 0;
  ap_uint<10> c4_counter = 0;
  ap_uint<10> c5_counter = 0;

  ap_uint<10> c0_counter_bound;
  if (LAYER_STRIDE == 1){
    c0_counter_bound = LAYER_IN_IMG_H_T;
  } else if (LAYER_STRIDE == 2){
    c0_counter_bound = LAYER_IN_IMG_H_T / 2;
  }

  ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> sel_tmp_0[U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=sel_tmp_0 complete dim=1

  while(more_to_feed_to_sys_arr){
#pragma HLS PIPELINE II=1
    ap_uint<15> buffer_ind_to_feed_to_sys_arr;
    buffer_ind_to_feed_to_sys_arr = c1_counter * LAYER_FILTER_S * LAYER_FILTER_S * LAYER_IN_NUM_T + c3_counter * LAYER_FILTER_S * LAYER_IN_NUM_T + c4_counter * LAYER_IN_NUM_T + c5_counter * U1_SIMD_FACTOR;
    ap_uint<15> wide_index = buffer_ind_to_feed_to_sys_arr / U1_DATA1_FC_SIMD_FACTOR;
    ap_uint<15> wide_offset = buffer_ind_to_feed_to_sys_arr % U1_DATA1_FC_SIMD_FACTOR;

    U1_Data1TransferChannelType buf_data_0 = buffer[0][wide_index];
    
    ap_uint<U1_DATA1_WIDTH*U1_DATA1_FC_SIMD_FACTOR> wide_data_0 = buf_data_0.data;
    ap_uint<U1_DATA1_WIDTH*U1_SIMD_FACTOR> data_to_feed_0;
    for (int s = 0; s < U1_DATA1_FC_SIMD_FACTOR/U1_SIMD_FACTOR; s++){
#pragma HLS UNROLL
      sel_tmp_0[s] = wide_data_0(U1_DATA1_WIDTH * U1_SIMD_FACTOR-1, 0);
      wide_data_0 = wide_data_0 >> (U1_DATA1_WIDTH * U1_SIMD_FACTOR);
    }
    data_to_feed_0 = sel_tmp_0[wide_offset / U1_SIMD_FACTOR];

    U1_Data1PEChannelType fifo_data_to_feed_0;
    fifo_data_to_feed_0 = U1_Data1PEChannelType(data_to_feed_0, buf_data_0.new_pair, buf_data_0.last_pair, buf_data_0.FILTER_S);
    fifo_feed_0.write(fifo_data_to_feed_0);

    // counter logic
    c0_counter++;
    if (c0_counter == c0_counter_bound){
      c0_counter = 0;
      c1_counter++;
      if (c1_counter == LAYER_ROW_IL_FACTOR){
        c1_counter = 0;
        c2_counter++;
        if (c2_counter == LAYER_COL_IL_FACTOR){
          c2_counter = 0;
          c3_counter++;
          if (c3_counter == LAYER_FILTER_S){
            c3_counter = 0;
            c4_counter++;
            if (c4_counter == LAYER_FILTER_S){
              c4_counter = 0;
              c5_counter++;
              if (c5_counter == LAYER_IN_NUM_T / U1_SIMD_FACTOR){
                c5_counter = 0;
                more_to_feed_to_sys_arr = false;
              }
            }
          }
        }
      }
    }
  }
}

void U1_Data0ReadData0(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 8 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  ap_uint<15> transfer_counter = 0;
  ap_uint<15> data0_buf_size;
  ap_uint<15> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<12> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  //changed to -2 to match the actual size of the input where it is padded with 1 not 2
  // the first read
  data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S - 1) / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (8 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;
  int count = 0;
  while(more_to_forward){
    // cout<<local_transfer_size<<endl;
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<12> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      // cout<<buffer_gs_id<<" "<<buffer_ind_to_write_to_buffer<<endl;
      // float num[8];
      //   // printf("output: ");
      //   for(int i=0; i<8; i++){
      //     num[i] = Reinterpret<float>((ap_uint<32>)data_read_from_fifo.data((i+1)*32-1, 32*i));
      //     printf("%10f\t", num[i]);
      //   }
      // printf("\n");
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }
  // for(int ch=0; ch<2; ch++){
  //   for(int i=0; i<33; i++){
  //     for(int j=0; j<5; j++){
  //       float num = Reinterpret<float>((ap_uint<32>) buffer[0][ch*33*5+5*i+j].data(31,0));
  //       printf("%10f\t", num);
  //     }
  //     cout<<endl;
  //   }
  // }
  // cout<<endl;
}

void U1_Data0ReadDataLast(
  U1_Data0TransferChannelType buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR],
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 8 / U1_DATA0_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<15> transfer_counter = 0;
  ap_uint<15> data0_buf_size;
  ap_uint<15> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<12> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;
  // LAYER_FILTER_S = 2;
  //changed to -2 to match the actual size of the input where it is padded with 1 not 2
  // the first read
  data0_buf_size = LAYER_IN_NUM_T * (LAYER_IN_IMG_H_T + LAYER_FILTER_S - 1) * (LAYER_COL_IL_FACTOR * LAYER_STRIDE + LAYER_FILTER_S - 1) / U1_DATA0_FC_SIMD_FACTOR;
  local_transfer_size = data0_buf_size * (8 / U1_DATA0_FC_SPLIT_FACTOR - engine_id) * U1_DATA0_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data0TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<12> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data0_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA0_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_Data1ReadData0(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 8 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  ap_uint<20> transfer_counter = 0;
  ap_uint<20> data1_buf_size;
  ap_uint<20> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<20> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  // the first read
  data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S / U1_DATA1_FC_SIMD_FACTOR;
  // cout<<data1_buf_size<<endl;
  local_transfer_size = data1_buf_size * (8 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;
  // cout<<local_transfer_size<<endl;
  int count = 0;
  while(more_to_forward){
    count++;
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    if (!LAST_ENGINE){
      if (data_is_to_forward){
        // cout<<"forwarding.."<<endl;
        fifo_transfer_out.write(data_read_from_fifo);
      }
    }
    ap_uint<12> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }
  // cout<<count<<endl;
  // exit(0);
}

void U1_Data1ReadDataLast(
  U1_Data1TransferChannelType buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR],
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  unsigned int engine_id,
  uint LAYER_IN_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_FILTER_S,
  uint LAYER_STRIDE,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR
){
#pragma HLS INLINE off
  bool LAST_ENGINE = (engine_id == 8 / U1_DATA1_FC_SPLIT_FACTOR - 1);
  bool buffer_id_to_write_to_buffer = 0;
  bool buffer_id_to_feed_to_sys_arr = 1;
  ap_uint<15> transfer_counter = 0;
  ap_uint<15> data1_buf_size;
  ap_uint<15> local_transfer_size;
  bool more_to_write_to_buffer = true;
  bool more_to_feed_to_sys_arr = false;
  bool more_to_forward = true;
  ap_uint<12> buffer_write_counter = 0;
  ap_uint<1> buffer_gs_id = 0;

  // the first read
  data1_buf_size = LAYER_IN_NUM_T * LAYER_ROW_IL_FACTOR * LAYER_FILTER_S * LAYER_FILTER_S / U1_DATA1_FC_SIMD_FACTOR;
  local_transfer_size = data1_buf_size * (8 / U1_DATA1_FC_SPLIT_FACTOR - engine_id) * U1_DATA1_FC_GROUP_FACTOR;

  while(more_to_forward){
#pragma HLS PIPELINE II=1
    U1_Data1TransferChannelType data_read_from_fifo = fifo_transfer_in.read();
    bool data_is_to_buffer;
    bool data_is_to_forward;
    unsigned int feeder_id = data_read_from_fifo.feeder_id;
    data_is_to_buffer = LAST_ENGINE || (!LAST_ENGINE && feeder_id == engine_id);
    data_is_to_forward = !LAST_ENGINE && (feeder_id != engine_id);
    ap_uint<12> buffer_ind_to_write_to_buffer = buffer_write_counter;

    if (data_is_to_buffer){
      buffer[buffer_gs_id][buffer_ind_to_write_to_buffer] = data_read_from_fifo;
      buffer_write_counter++;
      if (buffer_write_counter == data1_buf_size){
        buffer_write_counter = 0;
        buffer_gs_id++;
        if (buffer_gs_id == U1_DATA1_FC_GROUP_FACTOR){
          buffer_gs_id = 0;
          more_to_write_to_buffer = false;
        }
      }
    }
    transfer_counter++;
    if (transfer_counter == local_transfer_size){
      transfer_counter = 0;
      more_to_forward = false;
    }
  }

}

void U1_DataFeed0Engine0(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D0_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint LAYER_DILATION_RATE_prev;
  uint K_NUM_prev;
  uint KH_KW_prev;
  // uint K_Ws_prev[4];

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out0.write(LAYER_IN_NUM_T);
  fifo_config_out0.write(LAYER_OUT_NUM_T);
  fifo_config_out0.write(LAYER_IN_IMG_H_T);
  fifo_config_out0.write(LAYER_IN_IMG_W_T);
  fifo_config_out0.write(LAYER_FILTER_S);
  fifo_config_out0.write(LAYER_TASK_NUM1);
  fifo_config_out0.write(LAYER_TASK_NUM2);
  fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out0.write(LAYER_COL_IL_FACTOR);
  fifo_config_out0.write(LAYER_STRIDE);
  fifo_config_out0.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out0.write(LAYER_CONV_TYPE);
  fifo_config_out0.write(FILTER_D0);
  fifo_config_out0.write(FILTER_D1);	
  fifo_config_out0.write(LAYER_DILATION_RATE);
  fifo_config_out0.write(LAYER_TCONV_STRIDE);
  fifo_config_out0.write(K_NUM);
  fifo_config_out0.write(KH_KW);
  // fifo_config_out0.write(K_Hs[1]);
  // fifo_config_out0.write(K_Hs[2]);
  // fifo_config_out0.write(K_Hs[3]);
  // fifo_config_out0.write(K_Ws[0]);
  // fifo_config_out0.write(K_Ws[1]);
  // fifo_config_out0.write(K_Ws[2]);
  // fifo_config_out0.write(K_Ws[3]);


  fifo_config_out1.write(LAYER_IN_NUM_T);
  fifo_config_out1.write(LAYER_OUT_NUM_T);
  fifo_config_out1.write(LAYER_IN_IMG_H_T);
  fifo_config_out1.write(LAYER_IN_IMG_W_T);
  fifo_config_out1.write(LAYER_FILTER_S);
  fifo_config_out1.write(LAYER_TASK_NUM1);
  fifo_config_out1.write(LAYER_TASK_NUM2);
  fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out1.write(LAYER_COL_IL_FACTOR);
  fifo_config_out1.write(LAYER_STRIDE);
  fifo_config_out1.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out1.write(LAYER_CONV_TYPE);
  fifo_config_out1.write(FILTER_D0);
  fifo_config_out1.write(FILTER_D1);	
  fifo_config_out1.write(LAYER_DILATION_RATE);
  fifo_config_out1.write(LAYER_TCONV_STRIDE);
  fifo_config_out1.write(K_NUM);
  fifo_config_out1.write(KH_KW);
  // fifo_config_out1.write(K_Hs[1]);
  // fifo_config_out1.write(K_Hs[2]);
  // fifo_config_out1.write(K_Hs[3]);
  // fifo_config_out1.write(K_Ws[0]);
  // fifo_config_out1.write(K_Ws[1]);
  // fifo_config_out1.write(K_Ws[2]);
  // fifo_config_out1.write(K_Ws[3]);

  // if(LAYER_CONV_TYPE == 1){
  //   LAYER_FILTER_S = 2;
  // // }
  // cout<<"U1_DataFeed0Engine0: "<<FILTER_D0<<endl;
   U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
   U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<2> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out0.write(LAYER_IN_NUM_T);
      fifo_config_out0.write(LAYER_OUT_NUM_T);
      fifo_config_out0.write(LAYER_IN_IMG_H_T);
      fifo_config_out0.write(LAYER_IN_IMG_W_T);
      fifo_config_out0.write(LAYER_FILTER_S);
      fifo_config_out0.write(LAYER_TASK_NUM1);
      fifo_config_out0.write(LAYER_TASK_NUM2);
      fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out0.write(LAYER_COL_IL_FACTOR);
      fifo_config_out0.write(LAYER_STRIDE);
      fifo_config_out0.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out0.write(LAYER_CONV_TYPE);
      fifo_config_out0.write(FILTER_D0);
      fifo_config_out0.write(FILTER_D1);	
      fifo_config_out0.write(LAYER_DILATION_RATE);
      fifo_config_out0.write(LAYER_TCONV_STRIDE);
      fifo_config_out0.write(K_NUM);
      fifo_config_out0.write(KH_KW);
      // fifo_config_out0.write(K_Hs[1]);
      // fifo_config_out0.write(K_Hs[2]);
      // fifo_config_out0.write(K_Hs[3]);
      // fifo_config_out0.write(K_Ws[0]);
      // fifo_config_out0.write(K_Ws[1]);
      // fifo_config_out0.write(K_Ws[2]);
      // fifo_config_out0.write(K_Ws[3]);

      fifo_config_out1.write(LAYER_IN_NUM_T);
      fifo_config_out1.write(LAYER_OUT_NUM_T);
      fifo_config_out1.write(LAYER_IN_IMG_H_T);
      fifo_config_out1.write(LAYER_IN_IMG_W_T);
      fifo_config_out1.write(LAYER_FILTER_S);
      fifo_config_out1.write(LAYER_TASK_NUM1);
      fifo_config_out1.write(LAYER_TASK_NUM2);
      fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out1.write(LAYER_COL_IL_FACTOR);
      fifo_config_out1.write(LAYER_STRIDE);
      fifo_config_out1.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out1.write(LAYER_CONV_TYPE);
      fifo_config_out1.write(FILTER_D0);
      fifo_config_out1.write(FILTER_D1);	
      fifo_config_out1.write(LAYER_DILATION_RATE);
      fifo_config_out1.write(LAYER_TCONV_STRIDE);
      fifo_config_out1.write(K_NUM);
      fifo_config_out1.write(KH_KW);
      // fifo_config_out1.write(K_Hs[1]);
      // fifo_config_out1.write(K_Hs[2]);
      // fifo_config_out1.write(K_Hs[3]);
      // fifo_config_out1.write(K_Ws[0]);
      // fifo_config_out1.write(K_Ws[1]);
      // fifo_config_out1.write(K_Ws[2]);
      // fifo_config_out1.write(K_Ws[3]);

      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);   
    } else {
      if (initial_round % 2 == 1){
        U1_Data0ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_KW_prev
          );
      } else {
        U1_Data0ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_KW_prev
          );
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D0_prev = FILTER_D0;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;
    K_NUM_prev = K_NUM;
    KH_KW_prev = KH_KW;
    // for(int i=0; i<4; i++){
    //   #pragma HLS unroll
    //   K_Hs_prev[i] = K_Hs[i];
    //   K_Ws_prev[i] = K_Ws[i];
    // }

    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data0FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_KW_prev);
  } else {
    U1_Data0FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_KW_prev);
  }
}

void U1_DataFeed0Engine0_wrapper(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0TransferChannelType> &fifo_transfer_out,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0,
  stream<uint> &fifo_config_out1
){
  U1_DataFeed0Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id,
    fifo_config_in,
    fifo_config_out0,
    fifo_config_out1
  );
}

void U1_DataFeed0EngineLast(
  stream<U1_Data0TransferChannelType> &fifo_transfer_in,
  stream<U1_Data0PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out1
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D0_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;
  uint LAYER_DILATION_RATE_prev;
  uint K_NUM_prev;
  uint KH_KW_prev;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out1.write(LAYER_IN_NUM_T);
  fifo_config_out1.write(LAYER_OUT_NUM_T);
  fifo_config_out1.write(LAYER_IN_IMG_H_T);
  fifo_config_out1.write(LAYER_IN_IMG_W_T);
  fifo_config_out1.write(LAYER_FILTER_S);
  fifo_config_out1.write(LAYER_TASK_NUM1);
  fifo_config_out1.write(LAYER_TASK_NUM2);
  fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out1.write(LAYER_COL_IL_FACTOR);
  fifo_config_out1.write(LAYER_STRIDE);
  fifo_config_out1.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out1.write(LAYER_CONV_TYPE);
  fifo_config_out1.write(FILTER_D0);
  fifo_config_out1.write(FILTER_D1);	
  fifo_config_out1.write(LAYER_DILATION_RATE);
  fifo_config_out1.write(LAYER_TCONV_STRIDE);
  fifo_config_out1.write(K_NUM);
  fifo_config_out1.write(KH_KW);
  // fifo_config_out1.write(K_Hs[1]);
  // fifo_config_out1.write(K_Hs[2]);
  // fifo_config_out1.write(K_Hs[3]);
  // fifo_config_out1.write(K_Ws[0]);
  // fifo_config_out1.write(K_Ws[1]);
  // fifo_config_out1.write(K_Ws[2]);
  // fifo_config_out1.write(K_Ws[3]);

  // if(LAYER_CONV_TYPE == 1){
  //   LAYER_FILTER_S = 2;
  // }
  // cout<<"U1_DataFeed0EngineLast: "<<FILTER_D0<<endl;
   U1_Data0TransferChannelType ping_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
   U1_Data0TransferChannelType pong_buffer[U1_DATA0_FC_GROUP_FACTOR][U1_DATA0_BUF_SIZE / U1_DATA0_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<2> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out1.write(LAYER_IN_NUM_T);
      fifo_config_out1.write(LAYER_OUT_NUM_T);
      fifo_config_out1.write(LAYER_IN_IMG_H_T);
      fifo_config_out1.write(LAYER_IN_IMG_W_T);
      fifo_config_out1.write(LAYER_FILTER_S);
      fifo_config_out1.write(LAYER_TASK_NUM1);
      fifo_config_out1.write(LAYER_TASK_NUM2);
      fifo_config_out1.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out1.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out1.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out1.write(LAYER_COL_IL_FACTOR);
      fifo_config_out1.write(LAYER_STRIDE);
      fifo_config_out1.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out1.write(LAYER_CONV_TYPE);
      fifo_config_out1.write(FILTER_D0);
      fifo_config_out1.write(FILTER_D1);	
      fifo_config_out1.write(LAYER_DILATION_RATE);
      fifo_config_out1.write(LAYER_TCONV_STRIDE);
      fifo_config_out1.write(K_NUM);
      fifo_config_out1.write(KH_KW);
      // fifo_config_out1.write(K_Hs[1]);
      // fifo_config_out1.write(K_Hs[2]);
      // fifo_config_out1.write(K_Hs[3]);
      // fifo_config_out1.write(K_Ws[0]);
      // fifo_config_out1.write(K_Ws[1]);
      // fifo_config_out1.write(K_Ws[2]);
      // fifo_config_out1.write(K_Ws[3]);

      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data0ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_KW_prev);
      } else {
        U1_Data0ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D0, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data0FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D0_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev,
          LAYER_DILATION_RATE_prev,
          K_NUM_prev,
          KH_KW_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D0_prev = FILTER_D0;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_DILATION_RATE_prev = LAYER_DILATION_RATE;
    K_NUM_prev = K_NUM;
    KH_KW_prev = KH_KW;
    // for(int i=0; i<4; i++){
    //   #pragma HLS unroll
    //   K_Hs_prev[i] = K_Hs[i];
    //   K_Ws_prev[i] = K_Ws[i];
    // }

    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data0FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_KW_prev);
  } else {
    U1_Data0FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D0_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev,
      LAYER_DILATION_RATE_prev,
      K_NUM_prev,
      KH_KW_prev);
  }
}

void U1_DataFeed1Engine0(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D1_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out0.write(LAYER_IN_NUM_T);
  fifo_config_out0.write(LAYER_OUT_NUM_T);
  fifo_config_out0.write(LAYER_IN_IMG_H_T);
  fifo_config_out0.write(LAYER_IN_IMG_W_T);
  fifo_config_out0.write(LAYER_FILTER_S);
  fifo_config_out0.write(LAYER_TASK_NUM1);
  fifo_config_out0.write(LAYER_TASK_NUM2);
  fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out0.write(LAYER_COL_IL_FACTOR);
  fifo_config_out0.write(LAYER_STRIDE);
  fifo_config_out0.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out0.write(LAYER_CONV_TYPE);
  fifo_config_out0.write(FILTER_D0);
  fifo_config_out0.write(FILTER_D1);	
  fifo_config_out0.write(LAYER_DILATION_RATE);
  fifo_config_out0.write(LAYER_TCONV_STRIDE);
  fifo_config_out0.write(K_NUM);
  fifo_config_out0.write(KH_KW);
  // fifo_config_out0.write(K_Hs[1]);
  // fifo_config_out0.write(K_Hs[2]);
  // fifo_config_out0.write(K_Hs[3]);
  // fifo_config_out0.write(K_Ws[0]);
  // fifo_config_out0.write(K_Ws[1]);
  // fifo_config_out0.write(K_Ws[2]);
  // fifo_config_out0.write(K_Ws[3]);
  // cout<<"U1_DataFeed1Engine0: "<<FILTER_D1<<endl;
  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<8> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    // cout<<initial_round<<endl;
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out0.write(LAYER_IN_NUM_T);
      fifo_config_out0.write(LAYER_OUT_NUM_T);
      fifo_config_out0.write(LAYER_IN_IMG_H_T);
      fifo_config_out0.write(LAYER_IN_IMG_W_T);
      fifo_config_out0.write(LAYER_FILTER_S);
      fifo_config_out0.write(LAYER_TASK_NUM1);
      fifo_config_out0.write(LAYER_TASK_NUM2);
      fifo_config_out0.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out0.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out0.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out0.write(LAYER_COL_IL_FACTOR);
      fifo_config_out0.write(LAYER_STRIDE);
      fifo_config_out0.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out0.write(LAYER_CONV_TYPE);
      fifo_config_out0.write(FILTER_D0);
      fifo_config_out0.write(FILTER_D1);	
      fifo_config_out0.write(LAYER_DILATION_RATE);
      fifo_config_out0.write(LAYER_TCONV_STRIDE);
      fifo_config_out0.write(K_NUM);
      fifo_config_out0.write(KH_KW);
      // fifo_config_out0.write(K_Hs[1]);
      // fifo_config_out0.write(K_Hs[2]);
      // fifo_config_out0.write(K_Hs[3]);
      // fifo_config_out0.write(K_Ws[0]);
      // fifo_config_out0.write(K_Ws[1]);
      // fifo_config_out0.write(K_Ws[2]);
      // fifo_config_out0.write(K_Ws[3]);

      layer_start = 0;
    }

    if (initial_round == 0){
      // cout<<"here7"<<endl;
      U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        // cout<<"here1"<<endl;
        U1_Data1ReadData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        // cout<<"here2"<<endl;
        U1_Data1FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev);
      } else {
        // cout<<"here3"<<endl;
        U1_Data1ReadData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        // cout<<"here4"<<endl;
        U1_Data1FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D1_prev = FILTER_D1;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;

    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    // cout<<"here5"<<endl;
    U1_Data1FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev);
  } else {
    // cout<<"here6"<<endl;
    U1_Data1FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev);
  }
  // cout<<"finished read"<<endl;
}

void U1_DataFeed1Engine0_wrapper(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1TransferChannelType> &fifo_transfer_out,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out0
){
  U1_DataFeed1Engine0(
    fifo_transfer_in,
    fifo_transfer_out, 
    fifo_feed_0,
    engine_id,
    fifo_config_in,
    fifo_config_out0
  );
}

void U1_DataFeed1EngineLast(
  stream<U1_Data1TransferChannelType> &fifo_transfer_in,
  stream<U1_Data1PEChannelType> &fifo_feed_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_feed_0
#pragma HLS INLINE off

  uint task_iter = 0;
  uint LAYER_IN_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint FILTER_D1_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_ROW_IL_FACTOR_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint dummy;

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();
  // cout<<"U1_DataFeed1EngineLast: "<<FILTER_D1<<endl;
  U1_Data1TransferChannelType ping_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
  U1_Data1TransferChannelType pong_buffer[U1_DATA1_FC_GROUP_FACTOR][U1_DATA1_BUF_SIZE / U1_DATA1_FC_SIMD_FACTOR];
#pragma HLS RESOURCE variable=ping_buffer core=RAM_2P_BRAM
#pragma HLS RESOURCE variable=pong_buffer core=RAM_2P_BRAM
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=1 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=1 complete

  unsigned int initial_round = 0;

  bool done = 0;
  ap_uint<2> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      dummy = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
    } else {
      if (initial_round % 2 == 1){
        U1_Data1ReadDataLast(pong_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          ping_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev);
      } else {
        U1_Data1ReadDataLast(ping_buffer, fifo_transfer_in, engine_id, LAYER_IN_NUM_T, LAYER_IN_IMG_H_T, FILTER_D1, LAYER_STRIDE, LAYER_ROW_IL_FACTOR, LAYER_COL_IL_FACTOR);
        U1_Data1FeedData0(
          pong_buffer,
          fifo_feed_0,
          LAYER_IN_NUM_T_prev,
          LAYER_IN_IMG_H_T_prev,
          FILTER_D1_prev,
          LAYER_STRIDE_prev,
          LAYER_ROW_IL_FACTOR_prev,
          LAYER_COL_IL_FACTOR_prev);
      }
    }

    initial_round++;
    LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    FILTER_D1_prev = FILTER_D1;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_ROW_IL_FACTOR_prev = LAYER_ROW_IL_FACTOR;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;

    task_iter++;
    if (task_iter == LAYER_TASK_NUM1){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data1FeedData0(
      ping_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev);
  } else {
    U1_Data1FeedData0(
      pong_buffer,
      fifo_feed_0,
      LAYER_IN_NUM_T_prev,
      LAYER_IN_IMG_H_T_prev,
      FILTER_D1_prev,
      LAYER_STRIDE_prev,
      LAYER_ROW_IL_FACTOR_prev,
      LAYER_COL_IL_FACTOR_prev);
  }
}

/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_Data2WriteData0(
  U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_STRIDE,
  uint LAYER_TCONV_STRIDE
){
#pragma HLS INLINE off

  bool LAST_ENGINE = (engine_id == 8 / U1_DATA2_FC_SPLIT_FACTOR - 1);

  bool more_to_read_from_buffer = true;
  bool more_to_collect_from_sys_arr = true;
  bool data_is_from_local_buffer;
  bool data_is_from_external_buffer;
  ap_uint<20> oo = 0;
  ap_uint<20> h = 0;
  ap_uint<20> h_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  ap_uint<20> w = 0;
  ap_uint<20> w_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  bool done = 0;
  LAYER_COL_IL_FACTOR *= LAYER_TCONV_STRIDE;
  // h_bound *= 2;
  // w_bound *= 2;
  int count = 0;
  while(!done){
#pragma HLS PIPELINE II=1
    ap_uint<18> local_buf_idx = h * LAYER_COL_IL_FACTOR * LAYER_OUT_NUM_T + (w % LAYER_COL_IL_FACTOR) * LAYER_OUT_NUM_T + oo * U1_DATA2_FC_SIMD_FACTOR;
    // cout<<engine_id * LAYER_COL_IL_FACTOR<<" "<<w<<endl;
    if (w >= engine_id * LAYER_COL_IL_FACTOR){
      ap_uint<7> collector_id = w / LAYER_COL_IL_FACTOR;
      data_is_from_local_buffer = (collector_id == engine_id);
      data_is_from_external_buffer = !data_is_from_local_buffer;

      U1_Data2TransferChannelType data_write_to_fifo;

      if (data_is_from_external_buffer){
        data_write_to_fifo = fifo_transfer_in.read();
      } else {
        U1_data_t2 data0 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][0];
        ap_uint<U1_DATA2_WIDTH> data0_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data0);
        U1_data_t2 data1 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][1];
        ap_uint<U1_DATA2_WIDTH> data1_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data1);
        U1_data_t2 data2 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][2];
        ap_uint<U1_DATA2_WIDTH> data2_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data2);
        U1_data_t2 data3 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][3];
        ap_uint<U1_DATA2_WIDTH> data3_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data3);
        U1_data_t2 data4 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][4];
        ap_uint<U1_DATA2_WIDTH> data4_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data4);
        U1_data_t2 data5 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][5];
        ap_uint<U1_DATA2_WIDTH> data5_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data5);
        U1_data_t2 data6 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][6];
        ap_uint<U1_DATA2_WIDTH> data6_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data6);
        U1_data_t2 data7 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][7];
        ap_uint<U1_DATA2_WIDTH> data7_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data7);
        ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> pack_data = (
          data7_cast,
          data6_cast,
          data5_cast,
          data4_cast,
          data3_cast,
          data2_cast,
          data1_cast,
          data0_cast
        );
        data_write_to_fifo.data = pack_data;
      }

      fifo_transfer_out.write(data_write_to_fifo);
      count++;
    }
    w++;
    if (w == w_bound){
      w = 0;
      h++;
      if (h == h_bound){
        h = 0;
        oo++;
        if (oo == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
          oo = 0;
          done = 1;
        }
      }
    }
  }
  // cout<<count<<endl;

}

void U1_Data2WriteDataLast(
  U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  unsigned int engine_id,
  uint LAYER_OUT_NUM_T,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_IN_IMG_W_T,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_STRIDE,
  uint LAYER_TCONV_STRIDE
){
#pragma HLS INLINE off

  bool LAST_ENGINE = (engine_id == 8 / U1_DATA2_FC_SPLIT_FACTOR - 1);

  bool more_to_read_from_buffer = true;
  bool more_to_collect_from_sys_arr = true;
  bool data_is_from_local_buffer;
  bool data_is_from_external_buffer;
  ap_uint<20> oo = 0;
  ap_uint<20> h = 0;
  ap_uint<20> h_bound = LAYER_IN_IMG_H_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  ap_uint<20> w = 0;
  ap_uint<20> w_bound = LAYER_IN_IMG_W_T*LAYER_TCONV_STRIDE / LAYER_STRIDE;
  bool done = 0;
  LAYER_COL_IL_FACTOR *= LAYER_TCONV_STRIDE;
  // h_bound *= 2;
  // w_bound *= 2;
  int count = 0;
  while(!done){
#pragma HLS PIPELINE II=1
    ap_uint<18> local_buf_idx = h * LAYER_COL_IL_FACTOR * LAYER_OUT_NUM_T + (w % LAYER_COL_IL_FACTOR) * LAYER_OUT_NUM_T + oo * U1_DATA2_FC_SIMD_FACTOR;
    // cout<<engine_id * LAYER_COL_IL_FACTOR<<endl;
    if (w >= engine_id * LAYER_COL_IL_FACTOR){
      ap_uint<7> collector_id = w / LAYER_COL_IL_FACTOR;
      data_is_from_local_buffer = (collector_id == engine_id);
      data_is_from_external_buffer = !data_is_from_local_buffer;

      U1_Data2TransferChannelType data_write_to_fifo;

      if (data_is_from_external_buffer){
      } else {
        // cout<<local_buf_idx / U1_DATA2_FC_SIMD_FACTOR<<endl;
        U1_data_t2 data0 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][0];
        ap_uint<U1_DATA2_WIDTH> data0_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data0);
        U1_data_t2 data1 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][1];
        ap_uint<U1_DATA2_WIDTH> data1_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data1);
        U1_data_t2 data2 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][2];
        ap_uint<U1_DATA2_WIDTH> data2_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data2);
        U1_data_t2 data3 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][3];
        ap_uint<U1_DATA2_WIDTH> data3_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data3);
        U1_data_t2 data4 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][4];
        ap_uint<U1_DATA2_WIDTH> data4_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data4);
        U1_data_t2 data5 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][5];
        ap_uint<U1_DATA2_WIDTH> data5_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data5);
        U1_data_t2 data6 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][6];
        ap_uint<U1_DATA2_WIDTH> data6_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data6);
        U1_data_t2 data7 = buffer[0][local_buf_idx / U1_DATA2_FC_SIMD_FACTOR][7];
        ap_uint<U1_DATA2_WIDTH> data7_cast = Reinterpret<ap_uint<U1_DATA2_WIDTH> >(data7);
        ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> pack_data = (
          data7_cast,
          data6_cast,
          data5_cast,
          data4_cast,
          data3_cast,
          data2_cast,
          data1_cast,
          data0_cast
        );
        data_write_to_fifo.data = pack_data;
      }

      fifo_transfer_out.write(data_write_to_fifo);
      count++;
    }
    w++;
    if (w == w_bound){
      w = 0;
      h++;
      if (h == h_bound){
        h = 0;
        oo++;
        if (oo == LAYER_OUT_NUM_T / U1_DATA2_FC_SIMD_FACTOR){
          oo = 0;
          done = 1;
        }
      }
    }
  }
  // cout<<count<<endl;

}

// void U1_Data2ReadData0(
//   U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
//   stream<U1_Data2PEChannelType> &fifo_collect_0,
//   uint LAYER_IN_IMG_H_T,
//   uint LAYER_ROW_IL_FACTOR,
//   uint LAYER_COL_IL_FACTOR,
//   uint LAYER_STRIDE
// ){
// #pragma HLS INLINE off

//   bool more_to_collect_from_sys_arr = true;
//   ap_uint<1> buffer_gs_id = 0;
//   ap_uint<14> buffer_read_counter = 0;
//   ap_uint<20> c0_counter = 0;
//   ap_uint<20> c1_counter = 0;
//   ap_uint<20> c2_counter = 0;
//   ap_uint<20> c3_counter = 0;
//   ap_uint<20> c0_counter_bound = LAYER_IN_IMG_H_T / LAYER_STRIDE;
//   LAYER_COL_IL_FACTOR = 1;
//   c0_counter_bound = 512;
//   while(more_to_collect_from_sys_arr){
//     // cout<<c0_counter<<" "<<c1_counter<<" "<<c2_counter<<" "<<c3_counter<<endl;
// #pragma HLS PIPELINE II=1
//     ap_uint<14> buffer_ind_to_collect_from_sys_arr = c0_counter * LAYER_COL_IL_FACTOR * U1_SA_ROWS * LAYER_ROW_IL_FACTOR + c2_counter * U1_SA_ROWS * LAYER_ROW_IL_FACTOR + ((U1_SA_ROWS - 1 - c3_counter) * LAYER_ROW_IL_FACTOR + c1_counter);

//     U1_Data2PEChannelType data_to_collect_0;
//     data_to_collect_0 = fifo_collect_0.read();
//     // cout<<"buffer[0]["<<buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR<<"]["<<buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR<<"] = "<<data_to_collect_0.data<<endl;
//     buffer[0][buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR][buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR] = data_to_collect_0.data;

//     // counter logic
//     c0_counter++;
//     if (c0_counter == c0_counter_bound){
//       c0_counter = 0;
//       c1_counter++;
//       if (c1_counter == LAYER_ROW_IL_FACTOR){
//         c1_counter = 0;
//         c2_counter++;
//         if (c2_counter == LAYER_COL_IL_FACTOR){
//           c2_counter = 0;
//           c3_counter++;
//           if (c3_counter == U1_SA_ROWS){
//             c3_counter = 0;
//             more_to_collect_from_sys_arr = false;
//           }
//         }
//       }
//     }
//   }
//   // for(int i=0; i<512; i++){
//   //   for(int j=0; j<8; j++){
//   //     printf("%f\t", buffer[0][i][j]);
//   //   }
//   //   printf("\n");
//   // }
// }

void U1_Data2ReadData0(
  U1_data_t2 buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR],
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  uint LAYER_IN_IMG_H_T,
  uint LAYER_ROW_IL_FACTOR,
  uint LAYER_COL_IL_FACTOR,
  uint LAYER_STRIDE,
  uint LAYER_TCONV_STRIDE
){
#pragma HLS INLINE off

      // int local_reg_id = 0;
      // int channel_id = 0;
      // int col = 0;
      // int row = 0;
      // int in = 0;
      // int out = 0;
      // int start_address = 0;
      // bool done = 0;
      // int out_ch = 16;
      // int num_ch = out_ch/8;
      // for(int j=0; j<8; j++){
      //   for(int i=0; i<1; i++){//
      //     switch(i){
      //       case 0: start_address = 0*num_ch; break;
      //       case 1: start_address = 1*num_ch; break;
      //       case 2: start_address = 8*num_ch; break;
      //       case 3: start_address = 9*num_ch; break;
      //     }
      //     for(out=0; out<4; out++){
      //       for(in=num_ch-1; in>=0; in--){
      //         for(row=0; row<8; row++){
      //           for(col=0; col<4; col++){
      //             int temp = j%(8/num_ch);
      //             channel_id = 7-in-num_ch*temp;
      //             int offset = j<(8-(8/num_ch))? 1 : 0;
      //             local_reg_id = out*32*4*num_ch + col*4*num_ch + row*32*num_ch + start_address + offset;
      //             // U1_Data2PEChannelType data_to_collect_0;
      //             // data_to_collect_0 = fifo_collect_0.read();
      //             cout<<local_reg_id<<" "<<channel_id<<endl;
      //             // buffer[0][local_reg_id][channel_id] = data_to_collect_0.data;
      //             // cout<<local_reg_id<<" "<<channel_id<<endl;
      //           }
      //         }
      //       }
      //     }
      //   }
      // }
        // ap_uint<11> local_reg_id = 0;
        // ap_uint<8> col = 0;
        // ap_uint<8> row = 0;
        // bool done = 0;
        // while(!done){
        //   #pragma HLS PIPELINE II=1
        //   U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
        //   local_reg_id = col*v2 + row*v3 + start_address;
        //   // cout<<local_reg_id<<": "<<fifo2_local_data.data<<endl;
        //   local_buffer[local_reg_id] = fifo2_local_data.data;
        //   col++;
        //   if(col==v4){
        //     col = 0;
        //     row++;
        //     if(row==v5){
        //       row = 0;
        //       done = 1;
        //     }
        //   }
        // }
    
    bool more_to_collect_from_sys_arr = true;
    ap_uint<1> buffer_gs_id = 0;
    ap_uint<14> buffer_read_counter = 0;
    ap_uint<20> c0_counter = 0;
    ap_uint<20> c1_counter = 0;
    ap_uint<20> c2_counter = 0;
    ap_uint<20> c3_counter = 0;
    ap_uint<20> col_counter = 0;
    ap_uint<20> row_counter = 0;
    ap_uint<20> c0_counter_bound = LAYER_IN_IMG_H_T / LAYER_STRIDE;
    
    // int count = 0;
    while(more_to_collect_from_sys_arr){
      // count++;
      // cout<<c0_counter<<" "<<c1_counter<<" "<<c2_counter<<" "<<col_counter<<" "<<row_counter<<" "<<c3_counter<<endl;
      #pragma HLS PIPELINE II=1
      int offset0 = c0_counter * LAYER_COL_IL_FACTOR*LAYER_TCONV_STRIDE*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;
      int offset1 = c2_counter*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;
      int offset2 = ((U1_SA_ROWS - 1 - c3_counter) * LAYER_ROW_IL_FACTOR + c1_counter);
      int offset3 = U1_SA_ROWS*(row_counter*LAYER_COL_IL_FACTOR*LAYER_ROW_IL_FACTOR*LAYER_TCONV_STRIDE+LAYER_ROW_IL_FACTOR*col_counter);
      //   int offset0 = c0_counter * LAYER_COL_IL_FACTOR*LAYER_TCONV_STRIDE*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;
      // int offset1 = c2_counter*LAYER_TCONV_STRIDE * U1_SA_ROWS * LAYER_ROW_IL_FACTOR;
      // int offset2 = ((U1_SA_ROWS - 1 - c3_counter) * LAYER_ROW_IL_FACTOR + c1_counter);
      // int offset3 = U1_SA_ROWS*(row_counter*LAYER_COL_IL_FACTOR*LAYER_ROW_IL_FACTOR*LAYER_TCONV_STRIDE+LAYER_TCONV_STRIDE*col_counter);
      ap_uint<14> buffer_ind_to_collect_from_sys_arr = offset0 + offset1 + offset2 + offset3;

      U1_Data2PEChannelType data_to_collect_0;
      data_to_collect_0 = fifo_collect_0.read();
      // cout<<c0_counter<<" "<<c1_counter<<" "<<c2_counter<<" "<<col_counter<<" "<<row_counter<<" "<<c3_counter<<endl;
      // cout<<buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR<<" "<<buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR<<endl;
      // cout<<offset0<<" "<<offset1<<" "<<offset2<<" "<<offset3<<" "<<"buffer[0]["<<buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR<<"]["<<buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR<<"] = "<<data_to_collect_0.data<<endl;
      // cout<<data_to_collect_0.data<<endl;//" -> "<<buffer_ind_to_collect_from_sys_arr<<" "<<buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR<<" "<<buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR<<endl;
      buffer[0][buffer_ind_to_collect_from_sys_arr / U1_DATA2_FC_SIMD_FACTOR][buffer_ind_to_collect_from_sys_arr % U1_DATA2_FC_SIMD_FACTOR] = data_to_collect_0.data;

      // counter logic
      c0_counter++;
      if (c0_counter == c0_counter_bound){
        c0_counter = 0;
        c1_counter++;
        if (c1_counter == LAYER_ROW_IL_FACTOR){
          c1_counter = 0;
          c2_counter++;
          if (c2_counter == LAYER_COL_IL_FACTOR){
            c2_counter = 0;
            col_counter++;
            if(col_counter==LAYER_TCONV_STRIDE){
              col_counter = 0;
              row_counter++;
              if(row_counter==LAYER_TCONV_STRIDE){
                row_counter = 0;
                c3_counter++;
                // for(int i=0; i<1024; i++){
                //   for(int j=0; j<8; j++){
                //     printf("%10f\t", buffer[0][i][j]);
                //   }
                //   printf("\n");
                // }
                if (c3_counter == U1_SA_ROWS){
                  c3_counter = 0;
                  more_to_collect_from_sys_arr = false;
                }
              }
            }
          }
        }
      }
    }
    
  // for(int i=0; i<1024; i++){
  //   for(int j=0; j<16; j++){
  //     printf("%10f\t", buffer[0][i][j]);
  //   }
  //   printf("\n");
  // }
  // // cout<<count<<endl;
  // exit(0);
}

void U1_DataCollect2Engine0(
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0, // from PE
  stream<uint> &fifo_config_in1, // from other engines
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo_transfer_in
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_collect_0
#pragma HLS INLINE off

  uint LAYER_OUT_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint LAYER_IN_IMG_W_T_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_TCONV_STRIDE_prev;

  uint task_iter = 0;
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in0.read();
  uint LAYER_OUT_NUM_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in0.read();
  uint LAYER_FILTER_S = fifo_config_in0.read();
  uint LAYER_TASK_NUM1 = fifo_config_in0.read();
  uint LAYER_TASK_NUM2 = fifo_config_in0.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_STRIDE = fifo_config_in0.read();
  uint LAYER_BATCH = fifo_config_in0.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in0.read();
  uint FILTER_D0 = fifo_config_in0.read();
  uint FILTER_D1 = fifo_config_in0.read();
  uint LAYER_DILATION_RATE = fifo_config_in0.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in0.read();
  uint K_NUM = fifo_config_in0.read();
  uint KH_KW = fifo_config_in0.read();
  // K_Hs[1] = fifo_config_in0.read();
  // K_Hs[2] = fifo_config_in0.read();
  // K_Hs[3] = fifo_config_in0.read();
  // K_Ws[0] = fifo_config_in0.read();
  // K_Ws[1] = fifo_config_in0.read();
  // K_Ws[2] = fifo_config_in0.read();
  // K_Ws[3] = fifo_config_in0.read();

  // dummpy read
  LAYER_IN_NUM_T = fifo_config_in1.read();
  LAYER_OUT_NUM_T = fifo_config_in1.read();
  LAYER_IN_IMG_H_T = fifo_config_in1.read();
  LAYER_IN_IMG_W_T = fifo_config_in1.read();
  LAYER_FILTER_S = fifo_config_in1.read();
  LAYER_TASK_NUM1 = fifo_config_in1.read();
  LAYER_TASK_NUM2 = fifo_config_in1.read();
  LAYER_LOCAL_ACCUM_NUM = fifo_config_in1.read();
  LAYER_LOCAL_REG_NUM = fifo_config_in1.read();
  LAYER_ROW_IL_FACTOR = fifo_config_in1.read();
  LAYER_COL_IL_FACTOR = fifo_config_in1.read();
  LAYER_STRIDE = fifo_config_in1.read();
  LAYER_BATCH = fifo_config_in1.read();
  //////////////////new parameters///////////////////////  
  LAYER_CONV_TYPE = fifo_config_in1.read();
  FILTER_D0 = fifo_config_in1.read();
  FILTER_D1 = fifo_config_in1.read();
  LAYER_DILATION_RATE = fifo_config_in1.read();
  LAYER_TCONV_STRIDE = fifo_config_in1.read();
  K_NUM = fifo_config_in1.read();
  KH_KW = fifo_config_in1.read();
  // K_Hs[1] = fifo_config_in1.read();
  // K_Hs[2] = fifo_config_in1.read();
  // K_Hs[3] = fifo_config_in1.read();
  // K_Ws[0] = fifo_config_in1.read();
  // K_Ws[1] = fifo_config_in1.read();
  // K_Ws[2] = fifo_config_in1.read();
  // K_Ws[3] = fifo_config_in1.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // cout<<"U1_DataCollect2Engine0: "<<LAYER_FILTER_S<<endl;
  U1_data_t2 ping_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
  U1_data_t2 pong_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=3 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=3 complete
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer

  unsigned int initial_round = 0;
  bool done = 0;
  ap_uint<2> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in0.read();
      LAYER_OUT_NUM_T = fifo_config_in0.read();
      LAYER_IN_IMG_H_T = fifo_config_in0.read();
      LAYER_IN_IMG_W_T = fifo_config_in0.read();
      LAYER_FILTER_S = fifo_config_in0.read();
      LAYER_TASK_NUM1 = fifo_config_in0.read();
      LAYER_TASK_NUM2 = fifo_config_in0.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
      LAYER_COL_IL_FACTOR = fifo_config_in0.read();
      LAYER_STRIDE = fifo_config_in0.read();
      LAYER_BATCH = fifo_config_in0.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in0.read();
      FILTER_D0 = fifo_config_in0.read();
      FILTER_D1 = fifo_config_in0.read();
      LAYER_DILATION_RATE = fifo_config_in0.read();
      LAYER_TCONV_STRIDE = fifo_config_in0.read();
      K_NUM = fifo_config_in0.read();
      KH_KW = fifo_config_in0.read();
      // K_Hs[1] = fifo_config_in0.read();
      // K_Hs[2] = fifo_config_in0.read();
      // K_Hs[3] = fifo_config_in0.read();
      // K_Ws[0] = fifo_config_in0.read();
      // K_Ws[1] = fifo_config_in0.read();
      // K_Ws[2] = fifo_config_in0.read();
      // K_Ws[3] = fifo_config_in0.read();

      // dummpy read
      LAYER_IN_NUM_T = fifo_config_in1.read();
      LAYER_OUT_NUM_T = fifo_config_in1.read();
      LAYER_IN_IMG_H_T = fifo_config_in1.read();
      LAYER_IN_IMG_W_T = fifo_config_in1.read();
      LAYER_FILTER_S = fifo_config_in1.read();
      LAYER_TASK_NUM1 = fifo_config_in1.read();
      LAYER_TASK_NUM2 = fifo_config_in1.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in1.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in1.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in1.read();
      LAYER_COL_IL_FACTOR = fifo_config_in1.read();
      LAYER_STRIDE = fifo_config_in1.read();
      LAYER_BATCH = fifo_config_in1.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in1.read();
      FILTER_D0 = fifo_config_in1.read();
      FILTER_D1 = fifo_config_in1.read();
      LAYER_DILATION_RATE = fifo_config_in1.read();
      LAYER_TCONV_STRIDE = fifo_config_in1.read();
      K_NUM = fifo_config_in1.read();
      KH_KW = fifo_config_in1.read();
      // K_Hs[1] = fifo_config_in1.read();
      // K_Hs[2] = fifo_config_in1.read();
      // K_Hs[3] = fifo_config_in1.read();
      // K_Ws[0] = fifo_config_in1.read();
      // K_Ws[1] = fifo_config_in1.read();
      // K_Ws[2] = fifo_config_in1.read();
      // K_Ws[3] = fifo_config_in1.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);

      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data2ReadData0(
        ping_buffer,
        fifo_collect_0,
        LAYER_IN_IMG_H_T,
        LAYER_ROW_IL_FACTOR,
        LAYER_COL_IL_FACTOR,
        LAYER_STRIDE,
        LAYER_TCONV_STRIDE
      );
    } else {
      if (initial_round % 2 == 1){
        U1_Data2ReadData0(
          pong_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      } else {
        U1_Data2ReadData0(
          ping_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      }
    }
    initial_round++;
    LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    LAYER_IN_IMG_W_T_prev = LAYER_IN_IMG_W_T;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_TCONV_STRIDE_prev = LAYER_TCONV_STRIDE;

    task_iter += 1;
    if (task_iter == LAYER_TASK_NUM2){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data2WriteData0(ping_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  } else {
    U1_Data2WriteData0(pong_buffer, fifo_transfer_in, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  }
}

void U1_DataCollect2Engine0_wrapper(
  stream<U1_Data2TransferChannelType> &fifo_transfer_in,
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_in1,
  stream<uint> &fifo_config_out
){
  U1_DataCollect2Engine0(
    fifo_transfer_in,
    fifo_transfer_out,
    fifo_collect_0,
    engine_id,
    fifo_config_in0,
    fifo_config_in1,
    fifo_config_out
  );
}

void U1_DataCollect2EngineLast(
  stream<U1_Data2TransferChannelType> &fifo_transfer_out,
  stream<U1_Data2PEChannelType> &fifo_collect_0,
  unsigned int engine_id,
  stream<uint> &fifo_config_in0,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo_transfer_out
#pragma HLS DATA_PACK variable=fifo_collect_0
#pragma HLS INLINE off

  uint LAYER_OUT_NUM_T_prev;
  uint LAYER_IN_IMG_H_T_prev;
  uint LAYER_IN_IMG_W_T_prev;
  uint LAYER_COL_IL_FACTOR_prev;
  uint LAYER_STRIDE_prev;
  uint LAYER_TCONV_STRIDE_prev;

  uint task_iter = 0;
  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in0.read();
  uint LAYER_OUT_NUM_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in0.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in0.read();
  uint LAYER_FILTER_S = fifo_config_in0.read();
  uint LAYER_TASK_NUM1 = fifo_config_in0.read();
  uint LAYER_TASK_NUM2 = fifo_config_in0.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in0.read();
  uint LAYER_STRIDE = fifo_config_in0.read();
  uint LAYER_BATCH = fifo_config_in0.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in0.read();
  uint FILTER_D0 = fifo_config_in0.read();
  uint FILTER_D1 = fifo_config_in0.read();
  uint LAYER_DILATION_RATE = fifo_config_in0.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in0.read();
  uint K_NUM = fifo_config_in0.read();
  uint KH_KW = fifo_config_in0.read();
  // K_Hs[1] = fifo_config_in0.read();
  // K_Hs[2] = fifo_config_in0.read();
  // K_Hs[3] = fifo_config_in0.read();
  // K_Ws[0] = fifo_config_in0.read();
  // K_Ws[1] = fifo_config_in0.read();
  // K_Ws[2] = fifo_config_in0.read();
  // K_Ws[3] = fifo_config_in0.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
// cout<<"U1_DataCollect2EngineLast: "<<LAYER_FILTER_S<<endl;
  U1_data_t2 ping_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
  U1_data_t2 pong_buffer[U1_DATA2_FC_GROUP_FACTOR][U1_DATA2_BUF_SIZE / U1_DATA2_FC_SIMD_FACTOR][U1_DATA2_FC_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=ping_buffer dim=3 complete
#pragma HLS ARRAY_PARTITION variable=pong_buffer dim=3 complete
#pragma HLS DATA_PACK variable=ping_buffer
#pragma HLS DATA_PACK variable=pong_buffer

  unsigned int initial_round = 0;
  bool done = 0;
  ap_uint<2> layer_iter = 0;
  bool layer_start = 0;
  while(!done){
    if (layer_start){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in0.read();
      LAYER_OUT_NUM_T = fifo_config_in0.read();
      LAYER_IN_IMG_H_T = fifo_config_in0.read();
      LAYER_IN_IMG_W_T = fifo_config_in0.read();
      LAYER_FILTER_S = fifo_config_in0.read();
      LAYER_TASK_NUM1 = fifo_config_in0.read();
      LAYER_TASK_NUM2 = fifo_config_in0.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in0.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in0.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in0.read();
      LAYER_COL_IL_FACTOR = fifo_config_in0.read();
      LAYER_STRIDE = fifo_config_in0.read();
      LAYER_BATCH = fifo_config_in0.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in0.read();
      FILTER_D0 = fifo_config_in0.read();
      FILTER_D1 = fifo_config_in0.read();
      LAYER_DILATION_RATE = fifo_config_in0.read();
      LAYER_TCONV_STRIDE = fifo_config_in0.read();
      K_NUM = fifo_config_in0.read();
      KH_KW = fifo_config_in0.read();
      // K_Hs[1] = fifo_config_in0.read();
      // K_Hs[2] = fifo_config_in0.read();
      // K_Hs[3] = fifo_config_in0.read();
      // K_Ws[0] = fifo_config_in0.read();
      // K_Ws[1] = fifo_config_in0.read();
      // K_Ws[2] = fifo_config_in0.read();
      // K_Ws[3] = fifo_config_in0.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);

      layer_start = 0;
    }

    if (initial_round == 0){
      U1_Data2ReadData0(
        ping_buffer,
        fifo_collect_0,
        LAYER_IN_IMG_H_T,
        LAYER_ROW_IL_FACTOR,
        LAYER_COL_IL_FACTOR,
        LAYER_STRIDE,
        LAYER_TCONV_STRIDE
      );
    } else {
      if (initial_round % 2 == 1){
        U1_Data2ReadData0(
          pong_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteDataLast(ping_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      } else {
        U1_Data2ReadData0(
          ping_buffer,
          fifo_collect_0,
          LAYER_IN_IMG_H_T,
          LAYER_ROW_IL_FACTOR,
          LAYER_COL_IL_FACTOR,
          LAYER_STRIDE,
          LAYER_TCONV_STRIDE
        );
        U1_Data2WriteDataLast(pong_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
      }
    }
    initial_round++;
    LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
    LAYER_IN_IMG_H_T_prev = LAYER_IN_IMG_H_T;
    LAYER_IN_IMG_W_T_prev = LAYER_IN_IMG_W_T;
    LAYER_COL_IL_FACTOR_prev = LAYER_COL_IL_FACTOR;
    LAYER_STRIDE_prev = LAYER_STRIDE;
    LAYER_TCONV_STRIDE_prev = LAYER_TCONV_STRIDE;

    task_iter += 1;
    if (task_iter == LAYER_TASK_NUM2){
      task_iter = 0;
      layer_iter += 1;
      layer_start = 1;
      if (layer_iter == LAYER_BATCH){
        layer_iter = 0;
        done = 1;
      }
    }
  }

  if (initial_round % 2 == 1){
    U1_Data2WriteDataLast(ping_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  } else {
    U1_Data2WriteDataLast(pong_buffer, fifo_transfer_out, engine_id, LAYER_OUT_NUM_T_prev, LAYER_IN_IMG_H_T_prev, LAYER_IN_IMG_W_T_prev, LAYER_COL_IL_FACTOR_prev, LAYER_STRIDE_prev, LAYER_TCONV_STRIDE_prev);
  }
}

/**
 *  This file is automatically generated by PolySA CodeGen.
 *  Version: 1.0
 *  Authos: Jie Wang
 */

//#include "common_header_U1.h"

void U1_PE_MAC(
  U1_Data0SIMDType op0,
  U1_Data1SIMDType op1,
  U1_data_t2* op2,
  bool init
){
#pragma HLS INLINE
#pragma HLS DATA_PACK variable=op0
#pragma HLS DATA_PACK variable=op1

  ap_uint<256> op0_data = op0;
  ap_uint<256> op1_data = op1;

  float op0_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op0_u complete
  float op1_u[U1_SIMD_FACTOR];
#pragma HLS ARRAY_PARTITION variable=op1_u complete

  for (int i = 0; i < U1_SIMD_FACTOR; i++){
#pragma HLS UNROLL
    ap_uint<U1_DATA0_WIDTH> sel0 = op0_data(U1_DATA0_WIDTH-1, 0);
    op0_u[i] = Reinterpret<U1_data_t0>(sel0);
    op0_data = op0_data >> U1_DATA0_WIDTH;
    ap_uint<U1_DATA1_WIDTH> sel1 = op1_data(U1_DATA1_WIDTH-1, 0);
    op1_u[i] = Reinterpret<U1_data_t1>(sel1);
    op1_data = op1_data >> U1_DATA1_WIDTH;
  }

  U1_data_t2 sum = (init == 1)? (U1_data_t2) 0: *op2;

  U1_data_t2 mult0 = op0_u[0] * op1_u[0];
  U1_data_t2 mult1 = op0_u[1] * op1_u[1];
  U1_data_t2 mult2 = op0_u[2] * op1_u[2];
  U1_data_t2 mult3 = op0_u[3] * op1_u[3];
  U1_data_t2 mult4 = op0_u[4] * op1_u[4];
  U1_data_t2 mult5 = op0_u[5] * op1_u[5];
  U1_data_t2 mult6 = op0_u[6] * op1_u[6];
  U1_data_t2 mult7 = op0_u[7] * op1_u[7];

  U1_data_t2 sum2_0 = mult0 + mult1;
  U1_data_t2 sum2_1 = mult2 + mult3;
  U1_data_t2 sum2_2 = mult4 + mult5;
  U1_data_t2 sum2_3 = mult6 + mult7;

  U1_data_t2 sum1_0 = sum2_0 + sum2_1;
  U1_data_t2 sum1_1 = sum2_2 + sum2_3;

  U1_data_t2 sum0_0 = sum1_0 + sum1_1;

  sum += sum0_0;

  *op2 = sum;
}

void U1_op0_transfer(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_out,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_out
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // cout<<"U1_op0_transfer: "<<LAYER_FILTER_S<<endl;
  ap_uint<2> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);
    }

    ap_uint<38> task_num = 0;
    ap_uint<12> la_counter = 0;
    ap_uint<11> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_out.write(fifo0_in_data);
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op0_transfer_wrapper(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_out,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op0_transfer(
    fifo0_in,
    fifo0_out,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op0_transfer_last(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_in
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // cout<<"U1_op0_transfer_last: "<<LAYER_FILTER_S<<endl;

  ap_uint<2> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);
    }

    ap_uint<38> task_num = 0;
    ap_uint<12> la_counter = 0;
    ap_uint<11> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_in.read();
      fifo0_local.write(fifo0_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op0_transfer_last_wrapper(
  stream<U1_Data0PEChannelType> &fifo0_in,
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op0_transfer_last(
    fifo0_in,
    fifo0_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_out,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_out
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // cout<<"U1_op1_transfer: "<<LAYER_FILTER_S<<endl;

  ap_uint<2> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);
    }

    ap_uint<38> task_num = 0;
    ap_uint<12> la_counter = 0;
    ap_uint<11> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_out.write(fifo1_in_data);
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op1_transfer_wrapper(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_out,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op1_transfer(
    fifo1_in,
    fifo1_out,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_op1_transfer_last(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo1_in
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // cout<<"U1_op1_transfer_last: "<<LAYER_FILTER_S<<endl;
  ap_uint<2> layer_iter = 0;
  bool done1 = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);
    }

    ap_uint<38> task_num = 0;
    ap_uint<12> la_counter = 0;
    ap_uint<11> local_reg_id = 0;
    bool done2 = 0;
    while(!done2){
#pragma HLS PIPELINE II=1
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_in.read();
      fifo1_local.write(fifo1_in_data);
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM){
        local_reg_id = 0;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          task_num++;
          if (task_num == LAYER_TASK_NUM1){
            task_num = 0;
            done2 = 1;
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
}

void U1_op1_transfer_last_wrapper(
  stream<U1_Data1PEChannelType> &fifo1_in,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_op1_transfer_last(
    fifo1_in,
    fifo1_local,
    fifo_config_in,
    fifo_config_out
  );
}

void U1_compute(
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo0_local
#pragma HLS DATA_PACK variable=fifo1_local
#pragma HLS INLINE off

  U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  ap_uint<8> in_ch_factor = LAYER_IN_NUM_T/8;

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // fifo_config_out.write(23);
  // cout<<"compute: "<<LAYER_FILTER_S<<endl;
  // cout<<"compute"<<endl;
  int layer_iter = 0;
  bool done1 = 0;
  int i = 0;
  while(!done1){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);
    }
    
    int count = 0;
    uint task_num = 0;
    uint la_counter = 0;
    bool done2 = 0;
    uint start_index = 0;//(i%K_NUM)*LAYER_LOCAL_REG_NUM;
    uint local_reg_id = 0;//start_index;
    LAYER_LOCAL_ACCUM_NUM = in_ch_factor*((KH_KW<<0)>>28)*((KH_KW<<16)>>28);
    // cout<<LAYER_LOCAL_ACCUM_NUM<<endl;
    while(!done2){
#pragma HLS PIPELINE II=1
#pragma HLS DEPENDENCE inter false variable=local_buffer
      U1_Data0PEChannelType fifo0_in_data;
      fifo0_in_data = fifo0_local.read();
      U1_Data1PEChannelType fifo1_in_data;
      fifo1_in_data = fifo1_local.read();
      bool init = fifo0_in_data.new_pair;
      bool last = fifo0_in_data.last_pair;
      // float num[8];
      // if(la_counter<4){
      //   // cout<<local_reg_id<<" "<<la_counter<<" "<<task_num<<" "<<i<<endl;
      //   printf("inputs: ");
      //   for(int i=0; i<8; i++){
      //     num[i] = Reinterpret<float>((ap_uint<32>)fifo0_in_data.data((i+1)*32-1, 32*i));
      //     printf("%10f\t", num[i]);
      //   }
      //   printf("\n");
      // }
      // printf("inputs: ");
      // for(int i=0; i<8; i++){
      //   num[i] = Reinterpret<float>((ap_uint<32>)fifo0_in_data.data((i+1)*32-1, 32*i));
      //   printf("%10f\t", num[i]);
      // }
      // printf("\n");
      // printf("weight: ");
      // for(int i=0; i<8; i++){
      //   num[i] = Reinterpret<float>((ap_uint<32>)fifo1_in_data.data((i+1)*32-1, 32*i));
      //   printf("%10f\t", num[i]);
      // }
      // printf("\n");
      // cout<<local_reg_id<<" "<<la_counter<<" "<<task_num<<" "<<i<<endl;
      // cout<<(init == 1 && la_counter == 0 && i<K_NUM)<<endl;
      U1_PE_MAC(fifo0_in_data.data, fifo1_in_data.data, &local_buffer[local_reg_id], (init == 1 && la_counter == 0 && i<K_NUM)? 1:0);
      // cout<<(la_counter == LAYER_LOCAL_ACCUM_NUM - 1 && last && i>=(in_ch_factor-1)*K_NUM)<<endl;
      if (la_counter == LAYER_LOCAL_ACCUM_NUM - 1 && last){//i>=4
        U1_Data2PEChannelType item;
        item.data = local_buffer[local_reg_id];
        fifo2_local.write(item);
      }
      // cout<<"accum: "<<LAYER_LOCAL_ACCUM_NUM<<" reg_num: "<<LAYER_LOCAL_REG_NUM<<" task: "<<LAYER_TASK_NUM1<<" i: "<<i<<endl;
      local_reg_id++;
      if (local_reg_id == LAYER_LOCAL_REG_NUM+start_index){
        local_reg_id = start_index;
        la_counter++;
        if (la_counter == LAYER_LOCAL_ACCUM_NUM){
          la_counter = 0;
          i++;
          start_index = i*LAYER_LOCAL_REG_NUM;
          local_reg_id = start_index;
          LAYER_LOCAL_ACCUM_NUM = in_ch_factor*((KH_KW<<i*4)>>28)*((KH_KW<<(i+4)*4)>>28);
          if(i == K_NUM){
            i = 0;
            start_index = 0;//(i%K_NUM)*LAYER_LOCAL_REG_NUM;
            local_reg_id = 0;//start_index;
            LAYER_LOCAL_ACCUM_NUM = in_ch_factor*((KH_KW<<0)>>28)*((KH_KW<<16)>>28);
            task_num++;
            if (task_num == LAYER_TASK_NUM1){
              task_num = 0; 
              done2 = 1;
            }
          }
        }
      }
    }
    layer_iter++;
    if (layer_iter == LAYER_BATCH){
      layer_iter = 0;
      done1 = 1;
    }
  }
  // cout<<"compute"<<endl;
}

void U1_compute_wrapper(
  stream<U1_Data0PEChannelType> &fifo0_local,
  stream<U1_Data1PEChannelType> &fifo1_local,
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_compute(
    fifo0_local,
    fifo1_local,
    fifo2_local,
    fifo_config_in,
    fifo_config_out
  );
}

// void U1_res_transfer(
//   stream<U1_Data2PEChannelType> &fifo2_local,
//   stream<U1_Data2PEChannelType> &fifo2_in,
//   stream<U1_Data2PEChannelType> &fifo2_out,
//   ap_uint<4> pe_row_id,
//   ap_uint<4> pe_col_id,
//   stream<uint> &fifo_config_in,
//   stream<uint> &fifo_config_out
// ){
// #pragma HLS DATA_PACK variable=fifo2_in
// #pragma HLS DATA_PACK variable=fifo2_out
// #pragma HLS INLINE off

//   // read in configurations
//   uint LAYER_IN_NUM_T       ;//= fifo_config_in.read();
//   uint LAYER_OUT_NUM_T      ;//= fifo_config_in.read();
//   uint LAYER_IN_IMG_H_T     ;//= fifo_config_in.read();
//   uint LAYER_IN_IMG_W_T     ;//= fifo_config_in.read();
//   uint LAYER_FILTER_S       ;//= fifo_config_in.read();
//   uint LAYER_TASK_NUM1      ;//= fifo_config_in.read();
//   uint LAYER_TASK_NUM2      ;//= fifo_config_in.read();
//   uint LAYER_LOCAL_ACCUM_NUM;//= fifo_config_in.read();
//   uint LAYER_LOCAL_REG_NUM  ;//= fifo_config_in.read();
//   uint LAYER_ROW_IL_FACTOR  ;//= fifo_config_in.read();
//   uint LAYER_COL_IL_FACTOR  ;//= fifo_config_in.read();
//   uint LAYER_STRIDE         ;//= fifo_config_in.read();
//   uint LAYER_BATCH          ;//= fifo_config_in.read();
//   uint test                 ;

//   // write out configurations
//   // fifo_config_out.write(LAYER_IN_NUM_T);
//   // fifo_config_out.write(LAYER_OUT_NUM_T);
//   // fifo_config_out.write(LAYER_IN_IMG_H_T);
//   // fifo_config_out.write(LAYER_IN_IMG_W_T);
//   // fifo_config_out.write(LAYER_FILTER_S);
//   // fifo_config_out.write(LAYER_TASK_NUM1);
//   // fifo_config_out.write(LAYER_TASK_NUM2);
//   // fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
//   // fifo_config_out.write(LAYER_LOCAL_REG_NUM);
//   // fifo_config_out.write(LAYER_ROW_IL_FACTOR);
//   // fifo_config_out.write(LAYER_COL_IL_FACTOR);
//   // fifo_config_out.write(LAYER_STRIDE);
//   // fifo_config_out.write(LAYER_BATCH);

//   U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];
//   for (ap_uint<2> layer_iter = 0; layer_iter < 4; layer_iter++){
//     // if (layer_iter > 0){
//       // read in configurations
//       // uint LAYER_IN_NUM_T = fifo_config_in.read();
//       // uint LAYER_OUT_NUM_T = fifo_config_in.read();
//       // uint LAYER_IN_IMG_H_T = fifo_config_in.read();
//       // uint LAYER_IN_IMG_W_T = fifo_config_in.read();
//       // uint LAYER_FILTER_S = fifo_config_in.read();
//       // uint LAYER_TASK_NUM1 = fifo_config_in.read();
//       // uint LAYER_TASK_NUM2 = fifo_config_in.read();
//       // uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
//       // uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
//       // uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
//       // uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
//       // uint LAYER_STRIDE = fifo_config_in.read();
//       // uint LAYER_BATCH = fifo_config_in.read();
//       // test = fifo_config_in.read();

//       // write out configurations
//       // fifo_config_out.write(LAYER_IN_NUM_T);
//       // fifo_config_out.write(LAYER_OUT_NUM_T);
//       // fifo_config_out.write(LAYER_IN_IMG_H_T);
//       // fifo_config_out.write(LAYER_IN_IMG_W_T);
//       // fifo_config_out.write(LAYER_FILTER_S);
//       // fifo_config_out.write(LAYER_TASK_NUM1);
//       // fifo_config_out.write(LAYER_TASK_NUM2);
//       // fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
//       // fifo_config_out.write(LAYER_LOCAL_REG_NUM);
//       // fifo_config_out.write(LAYER_ROW_IL_FACTOR);
//       // fifo_config_out.write(LAYER_COL_IL_FACTOR);
//       // fifo_config_out.write(LAYER_STRIDE);
//       // fifo_config_out.write(LAYER_BATCH);
//     // }
//     ///////////////////////////
//     LAYER_LOCAL_REG_NUM = 128;
//     ///////////////////////////
//     for (ap_uint<29> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
//     { 
//       // cout<<"this is a test: "<< test <<endl;
//       for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
// #pragma HLS PIPELINE II=1
//         if (local_reg_id < LAYER_LOCAL_REG_NUM){
//           U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
//           local_buffer[local_reg_id] = fifo2_local_data.data;
//         } else {
//           break;
//         }
//       }

//       for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
//         for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
// #pragma HLS PIPELINE II=1
//           if (local_reg_id < LAYER_LOCAL_REG_NUM){
//             fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
//             if (transfer_iter > 0){
//               U1_Data2PEChannelType fifo2_in_data = fifo2_in.read();
//               local_buffer[local_reg_id] = fifo2_in_data.data;
//             }
//           } else {
//             break;
//           }
//         }
//       }
//     }
//   }
// }

void U1_res_transfer(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_in,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<4> pe_row_id,
  ap_uint<4> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_in
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);
  // cout<<"U1_res_transfer: "<<LAYER_FILTER_S<<endl;
  U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];

  for (ap_uint<2> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);

    }
    ////////////////////////////
    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    ////////////////////////////
    for (ap_uint<29> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
            if (transfer_iter > 0){
              U1_Data2PEChannelType fifo2_in_data = fifo2_in.read();
              local_buffer[local_reg_id] = fifo2_in_data.data;
            }
          } else {
            break;
          }
        }
      }
    }
  }
}

void U1_res_transfer_wrapper(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_in,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<4> pe_row_id,
  ap_uint<4> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_res_transfer(
    fifo2_local,
    fifo2_in,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

// void U1_res_transfer_first(
//   stream<U1_Data2PEChannelType> &fifo2_local,
//   stream<U1_Data2PEChannelType> &fifo2_out,
//   ap_uint<4> pe_row_id,
//   ap_uint<4> pe_col_id,
//   stream<uint> &fifo_config_in,
//   stream<uint> &fifo_config_out
// ){
// #pragma HLS DATA_PACK variable=fifo2_out
// #pragma HLS INLINE off

//   // read in configurations
//   uint LAYER_IN_NUM_T       ;//= fifo_config_in.read();
//   uint LAYER_OUT_NUM_T      ;//= fifo_config_in.read();
//   uint LAYER_IN_IMG_H_T     ;//= fifo_config_in.read();
//   uint LAYER_IN_IMG_W_T     ;//= fifo_config_in.read();
//   uint LAYER_FILTER_S       ;//= fifo_config_in.read();
//   uint LAYER_TASK_NUM1      ;//= fifo_config_in.read();
//   uint LAYER_TASK_NUM2      ;//= fifo_config_in.read();
//   uint LAYER_LOCAL_ACCUM_NUM;//= fifo_config_in.read();
//   uint LAYER_LOCAL_REG_NUM  ;//= fifo_config_in.read();
//   uint LAYER_ROW_IL_FACTOR  ;//= fifo_config_in.read();
//   uint LAYER_COL_IL_FACTOR  ;//= fifo_config_in.read();
//   uint LAYER_STRIDE         ;//= fifo_config_in.read();
//   uint LAYER_BATCH          ;//= fifo_config_in.read();
//   uint start_address        ;
//   uint v1        ;
//   uint v2        ;
//   uint v3        ;
//   uint v4        ;
//   uint v5        ;
//   // // write out configurations
//   // fifo_config_out.write(LAYER_IN_NUM_T);
//   // fifo_config_out.write(LAYER_OUT_NUM_T);
//   // fifo_config_out.write(LAYER_IN_IMG_H_T);
//   // fifo_config_out.write(LAYER_IN_IMG_W_T);
//   // fifo_config_out.write(LAYER_FILTER_S);
//   // fifo_config_out.write(LAYER_TASK_NUM1);
//   // fifo_config_out.write(LAYER_TASK_NUM2);
//   // fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
//   // fifo_config_out.write(LAYER_LOCAL_REG_NUM);
//   // fifo_config_out.write(LAYER_ROW_IL_FACTOR);
//   // fifo_config_out.write(LAYER_COL_IL_FACTOR);
//   // fifo_config_out.write(LAYER_STRIDE);
//   // fifo_config_out.write(LAYER_BATCH);

//   U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];
//    ap_uint<12> address = 0;
//   uint data_count = 0;
//   uint config_count = 0;
//   for (ap_uint<2> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
//     for (ap_uint<8> i = 0; i < v1; i++){
//         // config_count += 13;
//       // if (layer_iter > 0){
//         // read in configurations
//         LAYER_IN_NUM_T = fifo_config_in.read();
//         LAYER_OUT_NUM_T = fifo_config_in.read();
//         LAYER_IN_IMG_H_T = fifo_config_in.read();
//         LAYER_IN_IMG_W_T = fifo_config_in.read();
//         LAYER_FILTER_S = fifo_config_in.read();
//         LAYER_TASK_NUM1 = fifo_config_in.read();
//         LAYER_TASK_NUM2 = fifo_config_in.read();
//         LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
//         LAYER_LOCAL_REG_NUM = fifo_config_in.read();
//         LAYER_ROW_IL_FACTOR = fifo_config_in.read();
//         LAYER_COL_IL_FACTOR = fifo_config_in.read();
//         LAYER_STRIDE = fifo_config_in.read();
//         LAYER_BATCH = fifo_config_in.read();
//         start_address = fifo_config_in.read();
//         v1 = fifo_config_in.read();
//         v2 = fifo_config_in.read();
//         v3 = fifo_config_in.read();
//         v4 = fifo_config_in.read();
//         v5 = fifo_config_in.read();
//         // write out configurations
//         // fifo_config_out.write(LAYER_IN_NUM_T);
//         // fifo_config_out.write(LAYER_OUT_NUM_T);
//         // fifo_config_out.write(LAYER_IN_IMG_H_T);
//         // fifo_config_out.write(LAYER_IN_IMG_W_T);
//         // fifo_config_out.write(LAYER_FILTER_S);
//         // fifo_config_out.write(LAYER_TASK_NUM1);
//         // fifo_config_out.write(LAYER_TASK_NUM2);
//         // fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
//         // fifo_config_out.write(LAYER_LOCAL_REG_NUM);
//         // fifo_config_out.write(LAYER_ROW_IL_FACTOR);
//         // fifo_config_out.write(LAYER_COL_IL_FACTOR);
//         // fifo_config_out.write(LAYER_STRIDE);
//         // fifo_config_out.write(LAYER_BATCH);
//       // }
//       ///////////////////////////
//       // LAYER_LOCAL_REG_NUM = 128;
//       ///////////////////////////
//       for (ap_uint<29> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
//       {
//         ap_uint<11> local_reg_id = 0;
//         ap_uint<8> col = 0;
//         ap_uint<8> row = 0;
//         bool done = 0;
//         while(!done){
//           #pragma HLS PIPELINE II=1
//           U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
//           local_reg_id = col*v2 + row*v3 + start_address;
//           // cout<<local_reg_id<<": "<<fifo2_local_data.data<<endl;
//           local_buffer[local_reg_id] = fifo2_local_data.data;
//           col++;
//           if(col==v4){
//             col = 0;
//             row++;
//             if(row==v5){
//               row = 0;
//               done = 1;
//             }
//           }
//         }
//       }
//     }
//     for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
//       for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
//   #pragma HLS PIPELINE II=1
//         if (local_reg_id < v4*LAYER_LOCAL_REG_NUM){
//           // cout<<local_reg_id<<": "<<local_buffer[local_reg_id]<<endl;
//           fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
//         } else {
//           break;
//         }
//       }
//     }
//     fifo_config_out.write(LAYER_IN_NUM_T);
//     fifo_config_out.write(LAYER_OUT_NUM_T);
//     fifo_config_out.write(LAYER_IN_IMG_H_T);
//     fifo_config_out.write(LAYER_IN_IMG_W_T);
//     fifo_config_out.write(LAYER_FILTER_S);
//     fifo_config_out.write(LAYER_TASK_NUM1);
//     fifo_config_out.write(LAYER_TASK_NUM2);
//     fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
//     fifo_config_out.write(LAYER_LOCAL_REG_NUM);
//     fifo_config_out.write(LAYER_ROW_IL_FACTOR);
//     fifo_config_out.write(LAYER_COL_IL_FACTOR);
//     fifo_config_out.write(LAYER_STRIDE);
//     fifo_config_out.write(LAYER_BATCH);
//   }
//   // cout<<"config count: "<<config_count<<endl;
//   // cout<<"data count  : "<<data_count<<endl;
// }

void U1_res_transfer_first(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<4> pe_row_id,
  ap_uint<4> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
#pragma HLS DATA_PACK variable=fifo2_out
#pragma HLS INLINE off

  // read in configurations
  uint LAYER_IN_NUM_T = fifo_config_in.read();
  uint LAYER_OUT_NUM_T = fifo_config_in.read();
  uint LAYER_IN_IMG_H_T = fifo_config_in.read();
  uint LAYER_IN_IMG_W_T = fifo_config_in.read();
  uint LAYER_FILTER_S = fifo_config_in.read();
  uint LAYER_TASK_NUM1 = fifo_config_in.read();
  uint LAYER_TASK_NUM2 = fifo_config_in.read();
  uint LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
  uint LAYER_LOCAL_REG_NUM = fifo_config_in.read();
  uint LAYER_ROW_IL_FACTOR = fifo_config_in.read();
  uint LAYER_COL_IL_FACTOR = fifo_config_in.read();
  uint LAYER_STRIDE = fifo_config_in.read();
  uint LAYER_BATCH = fifo_config_in.read();
  //////////////////new parameters///////////////////////  
  uint LAYER_CONV_TYPE = fifo_config_in.read();
  uint FILTER_D0 = fifo_config_in.read();
  uint FILTER_D1 = fifo_config_in.read();
  uint LAYER_DILATION_RATE = fifo_config_in.read();
  uint LAYER_TCONV_STRIDE = fifo_config_in.read();
  uint K_NUM = fifo_config_in.read();
  uint KH_KW = fifo_config_in.read();
  // K_Hs[1] = fifo_config_in.read();
  // K_Hs[2] = fifo_config_in.read();
  // K_Hs[3] = fifo_config_in.read();
  // K_Ws[0] = fifo_config_in.read();
  // K_Ws[1] = fifo_config_in.read();
  // K_Ws[2] = fifo_config_in.read();
  // K_Ws[3] = fifo_config_in.read();

  // write out configurations
  fifo_config_out.write(LAYER_IN_NUM_T);
  fifo_config_out.write(LAYER_OUT_NUM_T);
  fifo_config_out.write(LAYER_IN_IMG_H_T);
  fifo_config_out.write(LAYER_IN_IMG_W_T);
  fifo_config_out.write(LAYER_FILTER_S);
  fifo_config_out.write(LAYER_TASK_NUM1);
  fifo_config_out.write(LAYER_TASK_NUM2);
  fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
  fifo_config_out.write(LAYER_LOCAL_REG_NUM);
  fifo_config_out.write(LAYER_ROW_IL_FACTOR);
  fifo_config_out.write(LAYER_COL_IL_FACTOR);
  fifo_config_out.write(LAYER_STRIDE);
  fifo_config_out.write(LAYER_BATCH);
  //////////////////new parameters///////////////////////
  fifo_config_out.write(LAYER_CONV_TYPE);
  fifo_config_out.write(FILTER_D0);
  fifo_config_out.write(FILTER_D1);	
  fifo_config_out.write(LAYER_DILATION_RATE);
  fifo_config_out.write(LAYER_TCONV_STRIDE);
  fifo_config_out.write(K_NUM);
  fifo_config_out.write(KH_KW);
  // fifo_config_out.write(K_Hs[1]);
  // fifo_config_out.write(K_Hs[2]);
  // fifo_config_out.write(K_Hs[3]);
  // fifo_config_out.write(K_Ws[0]);
  // fifo_config_out.write(K_Ws[1]);
  // fifo_config_out.write(K_Ws[2]);
  // fifo_config_out.write(K_Ws[3]);

  U1_data_t2 local_buffer[U1_LOCAL_REG_NUM];
  // cout<<"U1_res_transfer_first: "<<LAYER_FILTER_S<<endl;
  for (ap_uint<2> layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
    if (layer_iter > 0){
      // read in configurations
      LAYER_IN_NUM_T = fifo_config_in.read();
      LAYER_OUT_NUM_T = fifo_config_in.read();
      LAYER_IN_IMG_H_T = fifo_config_in.read();
      LAYER_IN_IMG_W_T = fifo_config_in.read();
      LAYER_FILTER_S = fifo_config_in.read();
      LAYER_TASK_NUM1 = fifo_config_in.read();
      LAYER_TASK_NUM2 = fifo_config_in.read();
      LAYER_LOCAL_ACCUM_NUM = fifo_config_in.read();
      LAYER_LOCAL_REG_NUM = fifo_config_in.read();
      LAYER_ROW_IL_FACTOR = fifo_config_in.read();
      LAYER_COL_IL_FACTOR = fifo_config_in.read();
      LAYER_STRIDE = fifo_config_in.read();
      LAYER_BATCH = fifo_config_in.read();
      //////////////////new parameters///////////////////////
      LAYER_CONV_TYPE = fifo_config_in.read();
      FILTER_D0 = fifo_config_in.read();
      FILTER_D1 = fifo_config_in.read();
      LAYER_DILATION_RATE = fifo_config_in.read();
      LAYER_TCONV_STRIDE = fifo_config_in.read();
      K_NUM = fifo_config_in.read();
      KH_KW = fifo_config_in.read();
      // K_Hs[1] = fifo_config_in.read();
      // K_Hs[2] = fifo_config_in.read();
      // K_Hs[3] = fifo_config_in.read();
      // K_Ws[0] = fifo_config_in.read();
      // K_Ws[1] = fifo_config_in.read();
      // K_Ws[2] = fifo_config_in.read();
      // K_Ws[3] = fifo_config_in.read();

      // write out configurations
      fifo_config_out.write(LAYER_IN_NUM_T);
      fifo_config_out.write(LAYER_OUT_NUM_T);
      fifo_config_out.write(LAYER_IN_IMG_H_T);
      fifo_config_out.write(LAYER_IN_IMG_W_T);
      fifo_config_out.write(LAYER_FILTER_S);
      fifo_config_out.write(LAYER_TASK_NUM1);
      fifo_config_out.write(LAYER_TASK_NUM2);
      fifo_config_out.write(LAYER_LOCAL_ACCUM_NUM);
      fifo_config_out.write(LAYER_LOCAL_REG_NUM);
      fifo_config_out.write(LAYER_ROW_IL_FACTOR);
      fifo_config_out.write(LAYER_COL_IL_FACTOR);
      fifo_config_out.write(LAYER_STRIDE);
      fifo_config_out.write(LAYER_BATCH);
      //////////////////new parameters///////////////////////
      fifo_config_out.write(LAYER_CONV_TYPE);
      fifo_config_out.write(FILTER_D0);
      fifo_config_out.write(FILTER_D1);	
      fifo_config_out.write(LAYER_DILATION_RATE);
      fifo_config_out.write(LAYER_TCONV_STRIDE);
      fifo_config_out.write(K_NUM);
      fifo_config_out.write(KH_KW);
      // fifo_config_out.write(K_Hs[1]);
      // fifo_config_out.write(K_Hs[2]);
      // fifo_config_out.write(K_Hs[3]);
      // fifo_config_out.write(K_Ws[0]);
      // fifo_config_out.write(K_Ws[1]);
      // fifo_config_out.write(K_Ws[2]);
      // fifo_config_out.write(K_Ws[3]);
    }
    ////////////////////////////
    LAYER_LOCAL_REG_NUM = K_NUM*LAYER_LOCAL_REG_NUM;
    ////////////////////////////    
    for (ap_uint<29> task_num = 0; task_num < LAYER_TASK_NUM2; task_num++)
    {
      for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
        if (local_reg_id < LAYER_LOCAL_REG_NUM){
          U1_Data2PEChannelType fifo2_local_data = fifo2_local.read();
          local_buffer[local_reg_id] = fifo2_local_data.data;
        } else {
          break;
        }
      }

      for (int transfer_iter = pe_row_id + 1 - 1; transfer_iter >= 0; transfer_iter--){
        for (ap_uint<11> local_reg_id = 0; local_reg_id < U1_LOCAL_REG_NUM; local_reg_id++){
#pragma HLS PIPELINE II=1
          if (local_reg_id < LAYER_LOCAL_REG_NUM){
            fifo2_out.write(U1_Data2PEChannelType(local_buffer[local_reg_id]));
          } else {
            break;
          }
        }
      }
    }
  }
}

void U1_res_transfer_first_wrapper(
  stream<U1_Data2PEChannelType> &fifo2_local,
  stream<U1_Data2PEChannelType> &fifo2_out,
  ap_uint<4> pe_row_id,
  ap_uint<4> pe_col_id,
  stream<uint> &fifo_config_in,
  stream<uint> &fifo_config_out
){
  U1_res_transfer_first(
    fifo2_local,
    fifo2_out,
    pe_row_id,
    pe_col_id,
    fifo_config_in,
    fifo_config_out
  );
}

void kernel(
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > &fifo_cin,
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > &fifo_weight,
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > &fifo_cout,
  stream<U1_ConfigInst> &fifo_kernel_config_in,
  stream<U1_ConfigInst> &fifo_kernel_config_out
){
#pragma HLS DATAFLOW

  // FIFOs
  stream<U1_Data0PEChannelType> fifo0_feed0_0;
#pragma HLS STREAM variable=fifo0_feed0_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_1;
#pragma HLS STREAM variable=fifo0_feed0_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_2;
#pragma HLS STREAM variable=fifo0_feed0_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_3;
#pragma HLS STREAM variable=fifo0_feed0_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_4;
#pragma HLS STREAM variable=fifo0_feed0_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_5;
#pragma HLS STREAM variable=fifo0_feed0_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_6;
#pragma HLS STREAM variable=fifo0_feed0_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_7;
#pragma HLS STREAM variable=fifo0_feed0_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed0_8;
#pragma HLS STREAM variable=fifo0_feed0_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_0;
#pragma HLS STREAM variable=fifo0_feed1_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_1;
#pragma HLS STREAM variable=fifo0_feed1_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_2;
#pragma HLS STREAM variable=fifo0_feed1_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_3;
#pragma HLS STREAM variable=fifo0_feed1_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_4;
#pragma HLS STREAM variable=fifo0_feed1_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_5;
#pragma HLS STREAM variable=fifo0_feed1_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_6;
#pragma HLS STREAM variable=fifo0_feed1_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_7;
#pragma HLS STREAM variable=fifo0_feed1_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed1_8;
#pragma HLS STREAM variable=fifo0_feed1_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_0;
#pragma HLS STREAM variable=fifo0_feed2_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_1;
#pragma HLS STREAM variable=fifo0_feed2_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_2;
#pragma HLS STREAM variable=fifo0_feed2_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_3;
#pragma HLS STREAM variable=fifo0_feed2_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_4;
#pragma HLS STREAM variable=fifo0_feed2_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_5;
#pragma HLS STREAM variable=fifo0_feed2_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_6;
#pragma HLS STREAM variable=fifo0_feed2_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_7;
#pragma HLS STREAM variable=fifo0_feed2_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed2_8;
#pragma HLS STREAM variable=fifo0_feed2_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_0;
#pragma HLS STREAM variable=fifo0_feed3_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_1;
#pragma HLS STREAM variable=fifo0_feed3_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_2;
#pragma HLS STREAM variable=fifo0_feed3_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_3;
#pragma HLS STREAM variable=fifo0_feed3_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_4;
#pragma HLS STREAM variable=fifo0_feed3_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_5;
#pragma HLS STREAM variable=fifo0_feed3_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_6;
#pragma HLS STREAM variable=fifo0_feed3_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_7;
#pragma HLS STREAM variable=fifo0_feed3_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed3_8;
#pragma HLS STREAM variable=fifo0_feed3_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_0;
#pragma HLS STREAM variable=fifo0_feed4_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_1;
#pragma HLS STREAM variable=fifo0_feed4_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_2;
#pragma HLS STREAM variable=fifo0_feed4_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_3;
#pragma HLS STREAM variable=fifo0_feed4_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_4;
#pragma HLS STREAM variable=fifo0_feed4_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_5;
#pragma HLS STREAM variable=fifo0_feed4_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_6;
#pragma HLS STREAM variable=fifo0_feed4_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_7;
#pragma HLS STREAM variable=fifo0_feed4_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed4_8;
#pragma HLS STREAM variable=fifo0_feed4_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_0;
#pragma HLS STREAM variable=fifo0_feed5_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_1;
#pragma HLS STREAM variable=fifo0_feed5_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_2;
#pragma HLS STREAM variable=fifo0_feed5_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_3;
#pragma HLS STREAM variable=fifo0_feed5_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_4;
#pragma HLS STREAM variable=fifo0_feed5_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_5;
#pragma HLS STREAM variable=fifo0_feed5_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_6;
#pragma HLS STREAM variable=fifo0_feed5_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_7;
#pragma HLS STREAM variable=fifo0_feed5_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed5_8;
#pragma HLS STREAM variable=fifo0_feed5_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_0;
#pragma HLS STREAM variable=fifo0_feed6_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_1;
#pragma HLS STREAM variable=fifo0_feed6_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_2;
#pragma HLS STREAM variable=fifo0_feed6_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_3;
#pragma HLS STREAM variable=fifo0_feed6_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_4;
#pragma HLS STREAM variable=fifo0_feed6_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_5;
#pragma HLS STREAM variable=fifo0_feed6_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_6;
#pragma HLS STREAM variable=fifo0_feed6_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_7;
#pragma HLS STREAM variable=fifo0_feed6_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed6_8;
#pragma HLS STREAM variable=fifo0_feed6_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_0;
#pragma HLS STREAM variable=fifo0_feed7_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_1;
#pragma HLS STREAM variable=fifo0_feed7_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_2;
#pragma HLS STREAM variable=fifo0_feed7_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_3;
#pragma HLS STREAM variable=fifo0_feed7_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_4;
#pragma HLS STREAM variable=fifo0_feed7_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_5;
#pragma HLS STREAM variable=fifo0_feed7_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_6;
#pragma HLS STREAM variable=fifo0_feed7_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_7;
#pragma HLS STREAM variable=fifo0_feed7_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed7_8;
#pragma HLS STREAM variable=fifo0_feed7_8 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_0;
#pragma HLS STREAM variable=fifo0_feed8_0 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_1;
#pragma HLS STREAM variable=fifo0_feed8_1 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_2;
#pragma HLS STREAM variable=fifo0_feed8_2 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_3;
#pragma HLS STREAM variable=fifo0_feed8_3 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_4;
#pragma HLS STREAM variable=fifo0_feed8_4 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_5;
#pragma HLS STREAM variable=fifo0_feed8_5 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_6;
#pragma HLS STREAM variable=fifo0_feed8_6 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_7;
#pragma HLS STREAM variable=fifo0_feed8_7 depth=2
  stream<U1_Data0PEChannelType> fifo0_feed8_8;
#pragma HLS STREAM variable=fifo0_feed8_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_0;
#pragma HLS STREAM variable=fifo1_feed0_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_1;
#pragma HLS STREAM variable=fifo1_feed0_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_2;
#pragma HLS STREAM variable=fifo1_feed0_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_3;
#pragma HLS STREAM variable=fifo1_feed0_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_4;
#pragma HLS STREAM variable=fifo1_feed0_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_5;
#pragma HLS STREAM variable=fifo1_feed0_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_6;
#pragma HLS STREAM variable=fifo1_feed0_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_7;
#pragma HLS STREAM variable=fifo1_feed0_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed0_8;
#pragma HLS STREAM variable=fifo1_feed0_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_0;
#pragma HLS STREAM variable=fifo1_feed1_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_1;
#pragma HLS STREAM variable=fifo1_feed1_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_2;
#pragma HLS STREAM variable=fifo1_feed1_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_3;
#pragma HLS STREAM variable=fifo1_feed1_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_4;
#pragma HLS STREAM variable=fifo1_feed1_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_5;
#pragma HLS STREAM variable=fifo1_feed1_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_6;
#pragma HLS STREAM variable=fifo1_feed1_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_7;
#pragma HLS STREAM variable=fifo1_feed1_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed1_8;
#pragma HLS STREAM variable=fifo1_feed1_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_0;
#pragma HLS STREAM variable=fifo1_feed2_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_1;
#pragma HLS STREAM variable=fifo1_feed2_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_2;
#pragma HLS STREAM variable=fifo1_feed2_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_3;
#pragma HLS STREAM variable=fifo1_feed2_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_4;
#pragma HLS STREAM variable=fifo1_feed2_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_5;
#pragma HLS STREAM variable=fifo1_feed2_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_6;
#pragma HLS STREAM variable=fifo1_feed2_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_7;
#pragma HLS STREAM variable=fifo1_feed2_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed2_8;
#pragma HLS STREAM variable=fifo1_feed2_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_0;
#pragma HLS STREAM variable=fifo1_feed3_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_1;
#pragma HLS STREAM variable=fifo1_feed3_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_2;
#pragma HLS STREAM variable=fifo1_feed3_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_3;
#pragma HLS STREAM variable=fifo1_feed3_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_4;
#pragma HLS STREAM variable=fifo1_feed3_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_5;
#pragma HLS STREAM variable=fifo1_feed3_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_6;
#pragma HLS STREAM variable=fifo1_feed3_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_7;
#pragma HLS STREAM variable=fifo1_feed3_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed3_8;
#pragma HLS STREAM variable=fifo1_feed3_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_0;
#pragma HLS STREAM variable=fifo1_feed4_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_1;
#pragma HLS STREAM variable=fifo1_feed4_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_2;
#pragma HLS STREAM variable=fifo1_feed4_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_3;
#pragma HLS STREAM variable=fifo1_feed4_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_4;
#pragma HLS STREAM variable=fifo1_feed4_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_5;
#pragma HLS STREAM variable=fifo1_feed4_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_6;
#pragma HLS STREAM variable=fifo1_feed4_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_7;
#pragma HLS STREAM variable=fifo1_feed4_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed4_8;
#pragma HLS STREAM variable=fifo1_feed4_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_0;
#pragma HLS STREAM variable=fifo1_feed5_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_1;
#pragma HLS STREAM variable=fifo1_feed5_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_2;
#pragma HLS STREAM variable=fifo1_feed5_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_3;
#pragma HLS STREAM variable=fifo1_feed5_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_4;
#pragma HLS STREAM variable=fifo1_feed5_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_5;
#pragma HLS STREAM variable=fifo1_feed5_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_6;
#pragma HLS STREAM variable=fifo1_feed5_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_7;
#pragma HLS STREAM variable=fifo1_feed5_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed5_8;
#pragma HLS STREAM variable=fifo1_feed5_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_0;
#pragma HLS STREAM variable=fifo1_feed6_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_1;
#pragma HLS STREAM variable=fifo1_feed6_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_2;
#pragma HLS STREAM variable=fifo1_feed6_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_3;
#pragma HLS STREAM variable=fifo1_feed6_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_4;
#pragma HLS STREAM variable=fifo1_feed6_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_5;
#pragma HLS STREAM variable=fifo1_feed6_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_6;
#pragma HLS STREAM variable=fifo1_feed6_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_7;
#pragma HLS STREAM variable=fifo1_feed6_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed6_8;
#pragma HLS STREAM variable=fifo1_feed6_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_0;
#pragma HLS STREAM variable=fifo1_feed7_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_1;
#pragma HLS STREAM variable=fifo1_feed7_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_2;
#pragma HLS STREAM variable=fifo1_feed7_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_3;
#pragma HLS STREAM variable=fifo1_feed7_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_4;
#pragma HLS STREAM variable=fifo1_feed7_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_5;
#pragma HLS STREAM variable=fifo1_feed7_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_6;
#pragma HLS STREAM variable=fifo1_feed7_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_7;
#pragma HLS STREAM variable=fifo1_feed7_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed7_8;
#pragma HLS STREAM variable=fifo1_feed7_8 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_0;
#pragma HLS STREAM variable=fifo1_feed8_0 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_1;
#pragma HLS STREAM variable=fifo1_feed8_1 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_2;
#pragma HLS STREAM variable=fifo1_feed8_2 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_3;
#pragma HLS STREAM variable=fifo1_feed8_3 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_4;
#pragma HLS STREAM variable=fifo1_feed8_4 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_5;
#pragma HLS STREAM variable=fifo1_feed8_5 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_6;
#pragma HLS STREAM variable=fifo1_feed8_6 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_7;
#pragma HLS STREAM variable=fifo1_feed8_7 depth=2
  stream<U1_Data1PEChannelType> fifo1_feed8_8;
#pragma HLS STREAM variable=fifo1_feed8_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_0;
#pragma HLS STREAM variable=fifo2_collect0_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_1;
#pragma HLS STREAM variable=fifo2_collect0_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_2;
#pragma HLS STREAM variable=fifo2_collect0_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_3;
#pragma HLS STREAM variable=fifo2_collect0_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_4;
#pragma HLS STREAM variable=fifo2_collect0_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_5;
#pragma HLS STREAM variable=fifo2_collect0_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_6;
#pragma HLS STREAM variable=fifo2_collect0_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_7;
#pragma HLS STREAM variable=fifo2_collect0_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect0_8;
#pragma HLS STREAM variable=fifo2_collect0_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_0;
#pragma HLS STREAM variable=fifo2_collect1_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_1;
#pragma HLS STREAM variable=fifo2_collect1_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_2;
#pragma HLS STREAM variable=fifo2_collect1_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_3;
#pragma HLS STREAM variable=fifo2_collect1_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_4;
#pragma HLS STREAM variable=fifo2_collect1_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_5;
#pragma HLS STREAM variable=fifo2_collect1_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_6;
#pragma HLS STREAM variable=fifo2_collect1_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_7;
#pragma HLS STREAM variable=fifo2_collect1_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect1_8;
#pragma HLS STREAM variable=fifo2_collect1_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_0;
#pragma HLS STREAM variable=fifo2_collect2_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_1;
#pragma HLS STREAM variable=fifo2_collect2_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_2;
#pragma HLS STREAM variable=fifo2_collect2_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_3;
#pragma HLS STREAM variable=fifo2_collect2_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_4;
#pragma HLS STREAM variable=fifo2_collect2_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_5;
#pragma HLS STREAM variable=fifo2_collect2_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_6;
#pragma HLS STREAM variable=fifo2_collect2_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_7;
#pragma HLS STREAM variable=fifo2_collect2_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect2_8;
#pragma HLS STREAM variable=fifo2_collect2_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_0;
#pragma HLS STREAM variable=fifo2_collect3_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_1;
#pragma HLS STREAM variable=fifo2_collect3_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_2;
#pragma HLS STREAM variable=fifo2_collect3_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_3;
#pragma HLS STREAM variable=fifo2_collect3_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_4;
#pragma HLS STREAM variable=fifo2_collect3_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_5;
#pragma HLS STREAM variable=fifo2_collect3_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_6;
#pragma HLS STREAM variable=fifo2_collect3_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_7;
#pragma HLS STREAM variable=fifo2_collect3_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect3_8;
#pragma HLS STREAM variable=fifo2_collect3_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_0;
#pragma HLS STREAM variable=fifo2_collect4_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_1;
#pragma HLS STREAM variable=fifo2_collect4_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_2;
#pragma HLS STREAM variable=fifo2_collect4_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_3;
#pragma HLS STREAM variable=fifo2_collect4_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_4;
#pragma HLS STREAM variable=fifo2_collect4_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_5;
#pragma HLS STREAM variable=fifo2_collect4_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_6;
#pragma HLS STREAM variable=fifo2_collect4_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_7;
#pragma HLS STREAM variable=fifo2_collect4_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect4_8;
#pragma HLS STREAM variable=fifo2_collect4_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_0;
#pragma HLS STREAM variable=fifo2_collect5_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_1;
#pragma HLS STREAM variable=fifo2_collect5_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_2;
#pragma HLS STREAM variable=fifo2_collect5_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_3;
#pragma HLS STREAM variable=fifo2_collect5_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_4;
#pragma HLS STREAM variable=fifo2_collect5_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_5;
#pragma HLS STREAM variable=fifo2_collect5_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_6;
#pragma HLS STREAM variable=fifo2_collect5_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_7;
#pragma HLS STREAM variable=fifo2_collect5_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect5_8;
#pragma HLS STREAM variable=fifo2_collect5_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_0;
#pragma HLS STREAM variable=fifo2_collect6_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_1;
#pragma HLS STREAM variable=fifo2_collect6_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_2;
#pragma HLS STREAM variable=fifo2_collect6_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_3;
#pragma HLS STREAM variable=fifo2_collect6_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_4;
#pragma HLS STREAM variable=fifo2_collect6_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_5;
#pragma HLS STREAM variable=fifo2_collect6_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_6;
#pragma HLS STREAM variable=fifo2_collect6_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_7;
#pragma HLS STREAM variable=fifo2_collect6_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect6_8;
#pragma HLS STREAM variable=fifo2_collect6_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_0;
#pragma HLS STREAM variable=fifo2_collect7_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_1;
#pragma HLS STREAM variable=fifo2_collect7_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_2;
#pragma HLS STREAM variable=fifo2_collect7_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_3;
#pragma HLS STREAM variable=fifo2_collect7_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_4;
#pragma HLS STREAM variable=fifo2_collect7_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_5;
#pragma HLS STREAM variable=fifo2_collect7_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_6;
#pragma HLS STREAM variable=fifo2_collect7_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_7;
#pragma HLS STREAM variable=fifo2_collect7_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect7_8;
#pragma HLS STREAM variable=fifo2_collect7_8 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_0;
#pragma HLS STREAM variable=fifo2_collect8_0 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_1;
#pragma HLS STREAM variable=fifo2_collect8_1 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_2;
#pragma HLS STREAM variable=fifo2_collect8_2 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_3;
#pragma HLS STREAM variable=fifo2_collect8_3 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_4;
#pragma HLS STREAM variable=fifo2_collect8_4 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_5;
#pragma HLS STREAM variable=fifo2_collect8_5 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_6;
#pragma HLS STREAM variable=fifo2_collect8_6 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_7;
#pragma HLS STREAM variable=fifo2_collect8_7 depth=2
  stream<U1_Data2PEChannelType> fifo2_collect8_8;
#pragma HLS STREAM variable=fifo2_collect8_8 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer0;
#pragma HLS STREAM variable=fifo0_transfer0 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer1;
#pragma HLS STREAM variable=fifo0_transfer1 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer2;
#pragma HLS STREAM variable=fifo0_transfer2 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer3;
#pragma HLS STREAM variable=fifo0_transfer3 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer4;
#pragma HLS STREAM variable=fifo0_transfer4 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer5;
#pragma HLS STREAM variable=fifo0_transfer5 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer6;
#pragma HLS STREAM variable=fifo0_transfer6 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer7;
#pragma HLS STREAM variable=fifo0_transfer7 depth=2
  stream<U1_Data0TransferChannelType> fifo0_transfer8;
#pragma HLS STREAM variable=fifo0_transfer8 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer0;
#pragma HLS STREAM variable=fifo1_transfer0 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer1;
#pragma HLS STREAM variable=fifo1_transfer1 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer2;
#pragma HLS STREAM variable=fifo1_transfer2 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer3;
#pragma HLS STREAM variable=fifo1_transfer3 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer4;
#pragma HLS STREAM variable=fifo1_transfer4 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer5;
#pragma HLS STREAM variable=fifo1_transfer5 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer6;
#pragma HLS STREAM variable=fifo1_transfer6 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer7;
#pragma HLS STREAM variable=fifo1_transfer7 depth=2
  stream<U1_Data1TransferChannelType> fifo1_transfer8;
#pragma HLS STREAM variable=fifo1_transfer8 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer0;
#pragma HLS STREAM variable=fifo2_transfer0 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer1;
#pragma HLS STREAM variable=fifo2_transfer1 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer2;
#pragma HLS STREAM variable=fifo2_transfer2 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer3;
#pragma HLS STREAM variable=fifo2_transfer3 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer4;
#pragma HLS STREAM variable=fifo2_transfer4 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer5;
#pragma HLS STREAM variable=fifo2_transfer5 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer6;
#pragma HLS STREAM variable=fifo2_transfer6 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer7;
#pragma HLS STREAM variable=fifo2_transfer7 depth=2
  stream<U1_Data2TransferChannelType> fifo2_transfer8;
#pragma HLS STREAM variable=fifo2_transfer8 depth=2
  stream<ap_uint<U1_DATA0_WIDTH * U1_DATA0_FC_SIMD_FACTOR> > fifo0_shim;
#pragma HLS STREAM variable=fifo0_shim depth=2
  stream<ap_uint<U1_DATA1_WIDTH * U1_DATA1_FC_SIMD_FACTOR> > fifo1_shim;
#pragma HLS STREAM variable=fifo1_shim depth=2
  stream<ap_uint<U1_DATA2_WIDTH * U1_DATA2_FC_SIMD_FACTOR> > fifo2_shim;
#pragma HLS STREAM variable=fifo2_shim depth=2

  stream<uint> fifo_DataFeed0Head_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed0Head_config_out0 depth=16
  stream<uint> fifo_DataFeed0Head_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Head_config_out1 depth=16
  stream<uint> fifo_DataFeed1Head_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Head_config_out0 depth=16

  stream<uint> fifo_DataFeed0Engine0_config_out0;
  stream<uint> fifo_DataFeed0Engine0_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine0_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine0_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine1_config_out0;
  stream<uint> fifo_DataFeed0Engine1_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine1_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine1_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine2_config_out0;
  stream<uint> fifo_DataFeed0Engine2_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine2_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine2_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine3_config_out0;
  stream<uint> fifo_DataFeed0Engine3_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine3_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine3_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine4_config_out0;
  stream<uint> fifo_DataFeed0Engine4_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine4_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine4_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine5_config_out0;
  stream<uint> fifo_DataFeed0Engine5_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine5_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine5_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine6_config_out0;
  stream<uint> fifo_DataFeed0Engine6_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine6_config_out0 depth=16
#pragma HLS STREAM variable=fifo_DataFeed0Engine6_config_out1 depth=16
  stream<uint> fifo_DataFeed0Engine7_config_out1;
#pragma HLS STREAM variable=fifo_DataFeed0Engine7_config_out1 depth=16

  stream<uint> fifo_DataFeed1Engine0_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine0_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine1_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine1_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine2_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine2_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine3_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine3_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine4_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine4_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine5_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine5_config_out0 depth=16
  stream<uint> fifo_DataFeed1Engine6_config_out0;
#pragma HLS STREAM variable=fifo_DataFeed1Engine6_config_out0 depth=16

  stream<uint> fifo_DataCollect2Engine0_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine0_config_out depth=16
  stream<uint> fifo_DataCollect2Engine1_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine1_config_out depth=16
  stream<uint> fifo_DataCollect2Engine2_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine2_config_out depth=16
  stream<uint> fifo_DataCollect2Engine3_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine3_config_out depth=16
  stream<uint> fifo_DataCollect2Engine4_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine4_config_out depth=16
  stream<uint> fifo_DataCollect2Engine5_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine5_config_out depth=16
  stream<uint> fifo_DataCollect2Engine6_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine6_config_out depth=16
  stream<uint> fifo_DataCollect2Engine7_config_out;
#pragma HLS STREAM variable=fifo_DataCollect2Engine7_config_out depth=16

  stream<uint> fifo_PE0_0_op0_config_out;
  stream<uint> fifo_PE0_0_op1_config_out;
  stream<uint> fifo_PE0_0_compute_config_out;
  stream<uint> fifo_PE0_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_0_res_config_out depth=2
  stream<uint> fifo_PE0_1_op0_config_out;
  stream<uint> fifo_PE0_1_op1_config_out;
  stream<uint> fifo_PE0_1_compute_config_out;
  stream<uint> fifo_PE0_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_1_res_config_out depth=2
  stream<uint> fifo_PE0_2_op0_config_out;
  stream<uint> fifo_PE0_2_op1_config_out;
  stream<uint> fifo_PE0_2_compute_config_out;
  stream<uint> fifo_PE0_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_2_res_config_out depth=2
  stream<uint> fifo_PE0_3_op0_config_out;
  stream<uint> fifo_PE0_3_op1_config_out;
  stream<uint> fifo_PE0_3_compute_config_out;
  stream<uint> fifo_PE0_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_3_res_config_out depth=2
  stream<uint> fifo_PE0_4_op0_config_out;
  stream<uint> fifo_PE0_4_op1_config_out;
  stream<uint> fifo_PE0_4_compute_config_out;
  stream<uint> fifo_PE0_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_4_res_config_out depth=2
  stream<uint> fifo_PE0_5_op0_config_out;
  stream<uint> fifo_PE0_5_op1_config_out;
  stream<uint> fifo_PE0_5_compute_config_out;
  stream<uint> fifo_PE0_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_5_res_config_out depth=2
  stream<uint> fifo_PE0_6_op0_config_out;
  stream<uint> fifo_PE0_6_op1_config_out;
  stream<uint> fifo_PE0_6_compute_config_out;
  stream<uint> fifo_PE0_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_6_res_config_out depth=2
  stream<uint> fifo_PE0_7_op0_config_out;
  stream<uint> fifo_PE0_7_op1_config_out;
  stream<uint> fifo_PE0_7_compute_config_out;
  stream<uint> fifo_PE0_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE0_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE0_7_res_config_out depth=2
  stream<uint> fifo_PE1_0_op0_config_out;
  stream<uint> fifo_PE1_0_op1_config_out;
  stream<uint> fifo_PE1_0_compute_config_out;
  stream<uint> fifo_PE1_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_0_res_config_out depth=2
  stream<uint> fifo_PE1_1_op0_config_out;
  stream<uint> fifo_PE1_1_op1_config_out;
  stream<uint> fifo_PE1_1_compute_config_out;
  stream<uint> fifo_PE1_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_1_res_config_out depth=2
  stream<uint> fifo_PE1_2_op0_config_out;
  stream<uint> fifo_PE1_2_op1_config_out;
  stream<uint> fifo_PE1_2_compute_config_out;
  stream<uint> fifo_PE1_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_2_res_config_out depth=2
  stream<uint> fifo_PE1_3_op0_config_out;
  stream<uint> fifo_PE1_3_op1_config_out;
  stream<uint> fifo_PE1_3_compute_config_out;
  stream<uint> fifo_PE1_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_3_res_config_out depth=2
  stream<uint> fifo_PE1_4_op0_config_out;
  stream<uint> fifo_PE1_4_op1_config_out;
  stream<uint> fifo_PE1_4_compute_config_out;
  stream<uint> fifo_PE1_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_4_res_config_out depth=2
  stream<uint> fifo_PE1_5_op0_config_out;
  stream<uint> fifo_PE1_5_op1_config_out;
  stream<uint> fifo_PE1_5_compute_config_out;
  stream<uint> fifo_PE1_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_5_res_config_out depth=2
  stream<uint> fifo_PE1_6_op0_config_out;
  stream<uint> fifo_PE1_6_op1_config_out;
  stream<uint> fifo_PE1_6_compute_config_out;
  stream<uint> fifo_PE1_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_6_res_config_out depth=2
  stream<uint> fifo_PE1_7_op0_config_out;
  stream<uint> fifo_PE1_7_op1_config_out;
  stream<uint> fifo_PE1_7_compute_config_out;
  stream<uint> fifo_PE1_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE1_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE1_7_res_config_out depth=2
  stream<uint> fifo_PE2_0_op0_config_out;
  stream<uint> fifo_PE2_0_op1_config_out;
  stream<uint> fifo_PE2_0_compute_config_out;
  stream<uint> fifo_PE2_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_0_res_config_out depth=2
  stream<uint> fifo_PE2_1_op0_config_out;
  stream<uint> fifo_PE2_1_op1_config_out;
  stream<uint> fifo_PE2_1_compute_config_out;
  stream<uint> fifo_PE2_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_1_res_config_out depth=2
  stream<uint> fifo_PE2_2_op0_config_out;
  stream<uint> fifo_PE2_2_op1_config_out;
  stream<uint> fifo_PE2_2_compute_config_out;
  stream<uint> fifo_PE2_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_2_res_config_out depth=2
  stream<uint> fifo_PE2_3_op0_config_out;
  stream<uint> fifo_PE2_3_op1_config_out;
  stream<uint> fifo_PE2_3_compute_config_out;
  stream<uint> fifo_PE2_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_3_res_config_out depth=2
  stream<uint> fifo_PE2_4_op0_config_out;
  stream<uint> fifo_PE2_4_op1_config_out;
  stream<uint> fifo_PE2_4_compute_config_out;
  stream<uint> fifo_PE2_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_4_res_config_out depth=2
  stream<uint> fifo_PE2_5_op0_config_out;
  stream<uint> fifo_PE2_5_op1_config_out;
  stream<uint> fifo_PE2_5_compute_config_out;
  stream<uint> fifo_PE2_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_5_res_config_out depth=2
  stream<uint> fifo_PE2_6_op0_config_out;
  stream<uint> fifo_PE2_6_op1_config_out;
  stream<uint> fifo_PE2_6_compute_config_out;
  stream<uint> fifo_PE2_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_6_res_config_out depth=2
  stream<uint> fifo_PE2_7_op0_config_out;
  stream<uint> fifo_PE2_7_op1_config_out;
  stream<uint> fifo_PE2_7_compute_config_out;
  stream<uint> fifo_PE2_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE2_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE2_7_res_config_out depth=2
  stream<uint> fifo_PE3_0_op0_config_out;
  stream<uint> fifo_PE3_0_op1_config_out;
  stream<uint> fifo_PE3_0_compute_config_out;
  stream<uint> fifo_PE3_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_0_res_config_out depth=2
  stream<uint> fifo_PE3_1_op0_config_out;
  stream<uint> fifo_PE3_1_op1_config_out;
  stream<uint> fifo_PE3_1_compute_config_out;
  stream<uint> fifo_PE3_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_1_res_config_out depth=2
  stream<uint> fifo_PE3_2_op0_config_out;
  stream<uint> fifo_PE3_2_op1_config_out;
  stream<uint> fifo_PE3_2_compute_config_out;
  stream<uint> fifo_PE3_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_2_res_config_out depth=2
  stream<uint> fifo_PE3_3_op0_config_out;
  stream<uint> fifo_PE3_3_op1_config_out;
  stream<uint> fifo_PE3_3_compute_config_out;
  stream<uint> fifo_PE3_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_3_res_config_out depth=2
  stream<uint> fifo_PE3_4_op0_config_out;
  stream<uint> fifo_PE3_4_op1_config_out;
  stream<uint> fifo_PE3_4_compute_config_out;
  stream<uint> fifo_PE3_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_4_res_config_out depth=2
  stream<uint> fifo_PE3_5_op0_config_out;
  stream<uint> fifo_PE3_5_op1_config_out;
  stream<uint> fifo_PE3_5_compute_config_out;
  stream<uint> fifo_PE3_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_5_res_config_out depth=2
  stream<uint> fifo_PE3_6_op0_config_out;
  stream<uint> fifo_PE3_6_op1_config_out;
  stream<uint> fifo_PE3_6_compute_config_out;
  stream<uint> fifo_PE3_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_6_res_config_out depth=2
  stream<uint> fifo_PE3_7_op0_config_out;
  stream<uint> fifo_PE3_7_op1_config_out;
  stream<uint> fifo_PE3_7_compute_config_out;
  stream<uint> fifo_PE3_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE3_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE3_7_res_config_out depth=2
  stream<uint> fifo_PE4_0_op0_config_out;
  stream<uint> fifo_PE4_0_op1_config_out;
  stream<uint> fifo_PE4_0_compute_config_out;
  stream<uint> fifo_PE4_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_0_res_config_out depth=2
  stream<uint> fifo_PE4_1_op0_config_out;
  stream<uint> fifo_PE4_1_op1_config_out;
  stream<uint> fifo_PE4_1_compute_config_out;
  stream<uint> fifo_PE4_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_1_res_config_out depth=2
  stream<uint> fifo_PE4_2_op0_config_out;
  stream<uint> fifo_PE4_2_op1_config_out;
  stream<uint> fifo_PE4_2_compute_config_out;
  stream<uint> fifo_PE4_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_2_res_config_out depth=2
  stream<uint> fifo_PE4_3_op0_config_out;
  stream<uint> fifo_PE4_3_op1_config_out;
  stream<uint> fifo_PE4_3_compute_config_out;
  stream<uint> fifo_PE4_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_3_res_config_out depth=2
  stream<uint> fifo_PE4_4_op0_config_out;
  stream<uint> fifo_PE4_4_op1_config_out;
  stream<uint> fifo_PE4_4_compute_config_out;
  stream<uint> fifo_PE4_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_4_res_config_out depth=2
  stream<uint> fifo_PE4_5_op0_config_out;
  stream<uint> fifo_PE4_5_op1_config_out;
  stream<uint> fifo_PE4_5_compute_config_out;
  stream<uint> fifo_PE4_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_5_res_config_out depth=2
  stream<uint> fifo_PE4_6_op0_config_out;
  stream<uint> fifo_PE4_6_op1_config_out;
  stream<uint> fifo_PE4_6_compute_config_out;
  stream<uint> fifo_PE4_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_6_res_config_out depth=2
  stream<uint> fifo_PE4_7_op0_config_out;
  stream<uint> fifo_PE4_7_op1_config_out;
  stream<uint> fifo_PE4_7_compute_config_out;
  stream<uint> fifo_PE4_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE4_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE4_7_res_config_out depth=2
  stream<uint> fifo_PE5_0_op0_config_out;
  stream<uint> fifo_PE5_0_op1_config_out;
  stream<uint> fifo_PE5_0_compute_config_out;
  stream<uint> fifo_PE5_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_0_res_config_out depth=2
  stream<uint> fifo_PE5_1_op0_config_out;
  stream<uint> fifo_PE5_1_op1_config_out;
  stream<uint> fifo_PE5_1_compute_config_out;
  stream<uint> fifo_PE5_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_1_res_config_out depth=2
  stream<uint> fifo_PE5_2_op0_config_out;
  stream<uint> fifo_PE5_2_op1_config_out;
  stream<uint> fifo_PE5_2_compute_config_out;
  stream<uint> fifo_PE5_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_2_res_config_out depth=2
  stream<uint> fifo_PE5_3_op0_config_out;
  stream<uint> fifo_PE5_3_op1_config_out;
  stream<uint> fifo_PE5_3_compute_config_out;
  stream<uint> fifo_PE5_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_3_res_config_out depth=2
  stream<uint> fifo_PE5_4_op0_config_out;
  stream<uint> fifo_PE5_4_op1_config_out;
  stream<uint> fifo_PE5_4_compute_config_out;
  stream<uint> fifo_PE5_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_4_res_config_out depth=2
  stream<uint> fifo_PE5_5_op0_config_out;
  stream<uint> fifo_PE5_5_op1_config_out;
  stream<uint> fifo_PE5_5_compute_config_out;
  stream<uint> fifo_PE5_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_5_res_config_out depth=2
  stream<uint> fifo_PE5_6_op0_config_out;
  stream<uint> fifo_PE5_6_op1_config_out;
  stream<uint> fifo_PE5_6_compute_config_out;
  stream<uint> fifo_PE5_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_6_res_config_out depth=2
  stream<uint> fifo_PE5_7_op0_config_out;
  stream<uint> fifo_PE5_7_op1_config_out;
  stream<uint> fifo_PE5_7_compute_config_out;
  stream<uint> fifo_PE5_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE5_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE5_7_res_config_out depth=2
  stream<uint> fifo_PE6_0_op0_config_out;
  stream<uint> fifo_PE6_0_op1_config_out;
  stream<uint> fifo_PE6_0_compute_config_out;
  stream<uint> fifo_PE6_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_0_res_config_out depth=2
  stream<uint> fifo_PE6_1_op0_config_out;
  stream<uint> fifo_PE6_1_op1_config_out;
  stream<uint> fifo_PE6_1_compute_config_out;
  stream<uint> fifo_PE6_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_1_res_config_out depth=2
  stream<uint> fifo_PE6_2_op0_config_out;
  stream<uint> fifo_PE6_2_op1_config_out;
  stream<uint> fifo_PE6_2_compute_config_out;
  stream<uint> fifo_PE6_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_2_res_config_out depth=2
  stream<uint> fifo_PE6_3_op0_config_out;
  stream<uint> fifo_PE6_3_op1_config_out;
  stream<uint> fifo_PE6_3_compute_config_out;
  stream<uint> fifo_PE6_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_3_res_config_out depth=2
  stream<uint> fifo_PE6_4_op0_config_out;
  stream<uint> fifo_PE6_4_op1_config_out;
  stream<uint> fifo_PE6_4_compute_config_out;
  stream<uint> fifo_PE6_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_4_res_config_out depth=2
  stream<uint> fifo_PE6_5_op0_config_out;
  stream<uint> fifo_PE6_5_op1_config_out;
  stream<uint> fifo_PE6_5_compute_config_out;
  stream<uint> fifo_PE6_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_5_res_config_out depth=2
  stream<uint> fifo_PE6_6_op0_config_out;
  stream<uint> fifo_PE6_6_op1_config_out;
  stream<uint> fifo_PE6_6_compute_config_out;
  stream<uint> fifo_PE6_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_6_res_config_out depth=2
  stream<uint> fifo_PE6_7_op0_config_out;
  stream<uint> fifo_PE6_7_op1_config_out;
  stream<uint> fifo_PE6_7_compute_config_out;
  stream<uint> fifo_PE6_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE6_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE6_7_res_config_out depth=2
  stream<uint> fifo_PE7_0_op0_config_out;
  stream<uint> fifo_PE7_0_op1_config_out;
  stream<uint> fifo_PE7_0_compute_config_out;
  stream<uint> fifo_PE7_0_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_0_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_0_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_0_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_0_res_config_out depth=2
  stream<uint> fifo_PE7_1_op0_config_out;
  stream<uint> fifo_PE7_1_op1_config_out;
  stream<uint> fifo_PE7_1_compute_config_out;
  stream<uint> fifo_PE7_1_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_1_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_1_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_1_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_1_res_config_out depth=2
  stream<uint> fifo_PE7_2_op0_config_out;
  stream<uint> fifo_PE7_2_op1_config_out;
  stream<uint> fifo_PE7_2_compute_config_out;
  stream<uint> fifo_PE7_2_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_2_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_2_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_2_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_2_res_config_out depth=2
  stream<uint> fifo_PE7_3_op0_config_out;
  stream<uint> fifo_PE7_3_op1_config_out;
  stream<uint> fifo_PE7_3_compute_config_out;
  stream<uint> fifo_PE7_3_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_3_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_3_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_3_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_3_res_config_out depth=2
  stream<uint> fifo_PE7_4_op0_config_out;
  stream<uint> fifo_PE7_4_op1_config_out;
  stream<uint> fifo_PE7_4_compute_config_out;
  stream<uint> fifo_PE7_4_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_4_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_4_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_4_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_4_res_config_out depth=2
  stream<uint> fifo_PE7_5_op0_config_out;
  stream<uint> fifo_PE7_5_op1_config_out;
  stream<uint> fifo_PE7_5_compute_config_out;
  stream<uint> fifo_PE7_5_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_5_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_5_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_5_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_5_res_config_out depth=2
  stream<uint> fifo_PE7_6_op0_config_out;
  stream<uint> fifo_PE7_6_op1_config_out;
  stream<uint> fifo_PE7_6_compute_config_out;
  stream<uint> fifo_PE7_6_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_6_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_6_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_6_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_6_res_config_out depth=2
  stream<uint> fifo_PE7_7_op0_config_out;
  stream<uint> fifo_PE7_7_op1_config_out;
  stream<uint> fifo_PE7_7_compute_config_out;
  stream<uint> fifo_PE7_7_res_config_out;
#pragma HLS STREAM variable=fifo_PE7_7_op0_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_7_op1_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_7_compute_config_out depth=2
#pragma HLS STREAM variable=fifo_PE7_7_res_config_out depth=2

  stream<U1_Data0PEChannelType> PE0_0_fifo0_local;
#pragma HLS STREAM variable=PE0_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_0_fifo1_local;
#pragma HLS STREAM variable=PE0_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_0_fifo2_local;
#pragma HLS STREAM variable=PE0_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_1_fifo0_local;
#pragma HLS STREAM variable=PE0_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_1_fifo1_local;
#pragma HLS STREAM variable=PE0_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_1_fifo2_local;
#pragma HLS STREAM variable=PE0_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_2_fifo0_local;
#pragma HLS STREAM variable=PE0_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_2_fifo1_local;
#pragma HLS STREAM variable=PE0_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_2_fifo2_local;
#pragma HLS STREAM variable=PE0_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_3_fifo0_local;
#pragma HLS STREAM variable=PE0_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_3_fifo1_local;
#pragma HLS STREAM variable=PE0_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_3_fifo2_local;
#pragma HLS STREAM variable=PE0_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_4_fifo0_local;
#pragma HLS STREAM variable=PE0_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_4_fifo1_local;
#pragma HLS STREAM variable=PE0_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_4_fifo2_local;
#pragma HLS STREAM variable=PE0_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_5_fifo0_local;
#pragma HLS STREAM variable=PE0_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_5_fifo1_local;
#pragma HLS STREAM variable=PE0_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_5_fifo2_local;
#pragma HLS STREAM variable=PE0_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_6_fifo0_local;
#pragma HLS STREAM variable=PE0_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_6_fifo1_local;
#pragma HLS STREAM variable=PE0_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_6_fifo2_local;
#pragma HLS STREAM variable=PE0_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE0_7_fifo0_local;
#pragma HLS STREAM variable=PE0_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE0_7_fifo1_local;
#pragma HLS STREAM variable=PE0_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE0_7_fifo2_local;
#pragma HLS STREAM variable=PE0_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_0_fifo0_local;
#pragma HLS STREAM variable=PE1_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_0_fifo1_local;
#pragma HLS STREAM variable=PE1_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_0_fifo2_local;
#pragma HLS STREAM variable=PE1_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_1_fifo0_local;
#pragma HLS STREAM variable=PE1_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_1_fifo1_local;
#pragma HLS STREAM variable=PE1_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_1_fifo2_local;
#pragma HLS STREAM variable=PE1_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_2_fifo0_local;
#pragma HLS STREAM variable=PE1_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_2_fifo1_local;
#pragma HLS STREAM variable=PE1_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_2_fifo2_local;
#pragma HLS STREAM variable=PE1_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_3_fifo0_local;
#pragma HLS STREAM variable=PE1_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_3_fifo1_local;
#pragma HLS STREAM variable=PE1_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_3_fifo2_local;
#pragma HLS STREAM variable=PE1_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_4_fifo0_local;
#pragma HLS STREAM variable=PE1_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_4_fifo1_local;
#pragma HLS STREAM variable=PE1_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_4_fifo2_local;
#pragma HLS STREAM variable=PE1_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_5_fifo0_local;
#pragma HLS STREAM variable=PE1_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_5_fifo1_local;
#pragma HLS STREAM variable=PE1_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_5_fifo2_local;
#pragma HLS STREAM variable=PE1_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_6_fifo0_local;
#pragma HLS STREAM variable=PE1_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_6_fifo1_local;
#pragma HLS STREAM variable=PE1_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_6_fifo2_local;
#pragma HLS STREAM variable=PE1_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE1_7_fifo0_local;
#pragma HLS STREAM variable=PE1_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE1_7_fifo1_local;
#pragma HLS STREAM variable=PE1_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE1_7_fifo2_local;
#pragma HLS STREAM variable=PE1_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_0_fifo0_local;
#pragma HLS STREAM variable=PE2_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_0_fifo1_local;
#pragma HLS STREAM variable=PE2_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_0_fifo2_local;
#pragma HLS STREAM variable=PE2_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_1_fifo0_local;
#pragma HLS STREAM variable=PE2_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_1_fifo1_local;
#pragma HLS STREAM variable=PE2_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_1_fifo2_local;
#pragma HLS STREAM variable=PE2_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_2_fifo0_local;
#pragma HLS STREAM variable=PE2_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_2_fifo1_local;
#pragma HLS STREAM variable=PE2_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_2_fifo2_local;
#pragma HLS STREAM variable=PE2_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_3_fifo0_local;
#pragma HLS STREAM variable=PE2_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_3_fifo1_local;
#pragma HLS STREAM variable=PE2_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_3_fifo2_local;
#pragma HLS STREAM variable=PE2_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_4_fifo0_local;
#pragma HLS STREAM variable=PE2_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_4_fifo1_local;
#pragma HLS STREAM variable=PE2_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_4_fifo2_local;
#pragma HLS STREAM variable=PE2_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_5_fifo0_local;
#pragma HLS STREAM variable=PE2_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_5_fifo1_local;
#pragma HLS STREAM variable=PE2_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_5_fifo2_local;
#pragma HLS STREAM variable=PE2_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_6_fifo0_local;
#pragma HLS STREAM variable=PE2_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_6_fifo1_local;
#pragma HLS STREAM variable=PE2_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_6_fifo2_local;
#pragma HLS STREAM variable=PE2_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE2_7_fifo0_local;
#pragma HLS STREAM variable=PE2_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE2_7_fifo1_local;
#pragma HLS STREAM variable=PE2_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE2_7_fifo2_local;
#pragma HLS STREAM variable=PE2_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_0_fifo0_local;
#pragma HLS STREAM variable=PE3_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_0_fifo1_local;
#pragma HLS STREAM variable=PE3_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_0_fifo2_local;
#pragma HLS STREAM variable=PE3_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_1_fifo0_local;
#pragma HLS STREAM variable=PE3_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_1_fifo1_local;
#pragma HLS STREAM variable=PE3_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_1_fifo2_local;
#pragma HLS STREAM variable=PE3_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_2_fifo0_local;
#pragma HLS STREAM variable=PE3_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_2_fifo1_local;
#pragma HLS STREAM variable=PE3_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_2_fifo2_local;
#pragma HLS STREAM variable=PE3_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_3_fifo0_local;
#pragma HLS STREAM variable=PE3_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_3_fifo1_local;
#pragma HLS STREAM variable=PE3_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_3_fifo2_local;
#pragma HLS STREAM variable=PE3_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_4_fifo0_local;
#pragma HLS STREAM variable=PE3_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_4_fifo1_local;
#pragma HLS STREAM variable=PE3_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_4_fifo2_local;
#pragma HLS STREAM variable=PE3_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_5_fifo0_local;
#pragma HLS STREAM variable=PE3_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_5_fifo1_local;
#pragma HLS STREAM variable=PE3_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_5_fifo2_local;
#pragma HLS STREAM variable=PE3_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_6_fifo0_local;
#pragma HLS STREAM variable=PE3_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_6_fifo1_local;
#pragma HLS STREAM variable=PE3_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_6_fifo2_local;
#pragma HLS STREAM variable=PE3_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE3_7_fifo0_local;
#pragma HLS STREAM variable=PE3_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE3_7_fifo1_local;
#pragma HLS STREAM variable=PE3_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE3_7_fifo2_local;
#pragma HLS STREAM variable=PE3_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_0_fifo0_local;
#pragma HLS STREAM variable=PE4_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_0_fifo1_local;
#pragma HLS STREAM variable=PE4_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_0_fifo2_local;
#pragma HLS STREAM variable=PE4_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_1_fifo0_local;
#pragma HLS STREAM variable=PE4_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_1_fifo1_local;
#pragma HLS STREAM variable=PE4_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_1_fifo2_local;
#pragma HLS STREAM variable=PE4_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_2_fifo0_local;
#pragma HLS STREAM variable=PE4_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_2_fifo1_local;
#pragma HLS STREAM variable=PE4_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_2_fifo2_local;
#pragma HLS STREAM variable=PE4_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_3_fifo0_local;
#pragma HLS STREAM variable=PE4_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_3_fifo1_local;
#pragma HLS STREAM variable=PE4_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_3_fifo2_local;
#pragma HLS STREAM variable=PE4_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_4_fifo0_local;
#pragma HLS STREAM variable=PE4_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_4_fifo1_local;
#pragma HLS STREAM variable=PE4_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_4_fifo2_local;
#pragma HLS STREAM variable=PE4_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_5_fifo0_local;
#pragma HLS STREAM variable=PE4_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_5_fifo1_local;
#pragma HLS STREAM variable=PE4_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_5_fifo2_local;
#pragma HLS STREAM variable=PE4_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_6_fifo0_local;
#pragma HLS STREAM variable=PE4_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_6_fifo1_local;
#pragma HLS STREAM variable=PE4_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_6_fifo2_local;
#pragma HLS STREAM variable=PE4_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE4_7_fifo0_local;
#pragma HLS STREAM variable=PE4_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE4_7_fifo1_local;
#pragma HLS STREAM variable=PE4_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE4_7_fifo2_local;
#pragma HLS STREAM variable=PE4_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_0_fifo0_local;
#pragma HLS STREAM variable=PE5_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_0_fifo1_local;
#pragma HLS STREAM variable=PE5_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_0_fifo2_local;
#pragma HLS STREAM variable=PE5_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_1_fifo0_local;
#pragma HLS STREAM variable=PE5_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_1_fifo1_local;
#pragma HLS STREAM variable=PE5_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_1_fifo2_local;
#pragma HLS STREAM variable=PE5_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_2_fifo0_local;
#pragma HLS STREAM variable=PE5_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_2_fifo1_local;
#pragma HLS STREAM variable=PE5_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_2_fifo2_local;
#pragma HLS STREAM variable=PE5_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_3_fifo0_local;
#pragma HLS STREAM variable=PE5_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_3_fifo1_local;
#pragma HLS STREAM variable=PE5_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_3_fifo2_local;
#pragma HLS STREAM variable=PE5_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_4_fifo0_local;
#pragma HLS STREAM variable=PE5_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_4_fifo1_local;
#pragma HLS STREAM variable=PE5_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_4_fifo2_local;
#pragma HLS STREAM variable=PE5_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_5_fifo0_local;
#pragma HLS STREAM variable=PE5_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_5_fifo1_local;
#pragma HLS STREAM variable=PE5_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_5_fifo2_local;
#pragma HLS STREAM variable=PE5_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_6_fifo0_local;
#pragma HLS STREAM variable=PE5_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_6_fifo1_local;
#pragma HLS STREAM variable=PE5_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_6_fifo2_local;
#pragma HLS STREAM variable=PE5_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE5_7_fifo0_local;
#pragma HLS STREAM variable=PE5_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE5_7_fifo1_local;
#pragma HLS STREAM variable=PE5_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE5_7_fifo2_local;
#pragma HLS STREAM variable=PE5_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_0_fifo0_local;
#pragma HLS STREAM variable=PE6_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_0_fifo1_local;
#pragma HLS STREAM variable=PE6_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_0_fifo2_local;
#pragma HLS STREAM variable=PE6_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_1_fifo0_local;
#pragma HLS STREAM variable=PE6_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_1_fifo1_local;
#pragma HLS STREAM variable=PE6_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_1_fifo2_local;
#pragma HLS STREAM variable=PE6_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_2_fifo0_local;
#pragma HLS STREAM variable=PE6_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_2_fifo1_local;
#pragma HLS STREAM variable=PE6_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_2_fifo2_local;
#pragma HLS STREAM variable=PE6_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_3_fifo0_local;
#pragma HLS STREAM variable=PE6_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_3_fifo1_local;
#pragma HLS STREAM variable=PE6_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_3_fifo2_local;
#pragma HLS STREAM variable=PE6_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_4_fifo0_local;
#pragma HLS STREAM variable=PE6_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_4_fifo1_local;
#pragma HLS STREAM variable=PE6_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_4_fifo2_local;
#pragma HLS STREAM variable=PE6_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_5_fifo0_local;
#pragma HLS STREAM variable=PE6_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_5_fifo1_local;
#pragma HLS STREAM variable=PE6_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_5_fifo2_local;
#pragma HLS STREAM variable=PE6_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_6_fifo0_local;
#pragma HLS STREAM variable=PE6_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_6_fifo1_local;
#pragma HLS STREAM variable=PE6_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_6_fifo2_local;
#pragma HLS STREAM variable=PE6_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE6_7_fifo0_local;
#pragma HLS STREAM variable=PE6_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE6_7_fifo1_local;
#pragma HLS STREAM variable=PE6_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE6_7_fifo2_local;
#pragma HLS STREAM variable=PE6_7_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_0_fifo0_local;
#pragma HLS STREAM variable=PE7_0_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_0_fifo1_local;
#pragma HLS STREAM variable=PE7_0_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_0_fifo2_local;
#pragma HLS STREAM variable=PE7_0_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_1_fifo0_local;
#pragma HLS STREAM variable=PE7_1_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_1_fifo1_local;
#pragma HLS STREAM variable=PE7_1_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_1_fifo2_local;
#pragma HLS STREAM variable=PE7_1_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_2_fifo0_local;
#pragma HLS STREAM variable=PE7_2_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_2_fifo1_local;
#pragma HLS STREAM variable=PE7_2_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_2_fifo2_local;
#pragma HLS STREAM variable=PE7_2_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_3_fifo0_local;
#pragma HLS STREAM variable=PE7_3_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_3_fifo1_local;
#pragma HLS STREAM variable=PE7_3_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_3_fifo2_local;
#pragma HLS STREAM variable=PE7_3_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_4_fifo0_local;
#pragma HLS STREAM variable=PE7_4_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_4_fifo1_local;
#pragma HLS STREAM variable=PE7_4_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_4_fifo2_local;
#pragma HLS STREAM variable=PE7_4_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_5_fifo0_local;
#pragma HLS STREAM variable=PE7_5_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_5_fifo1_local;
#pragma HLS STREAM variable=PE7_5_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_5_fifo2_local;
#pragma HLS STREAM variable=PE7_5_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_6_fifo0_local;
#pragma HLS STREAM variable=PE7_6_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_6_fifo1_local;
#pragma HLS STREAM variable=PE7_6_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_6_fifo2_local;
#pragma HLS STREAM variable=PE7_6_fifo2_local depth=2
  stream<U1_Data0PEChannelType> PE7_7_fifo0_local;
#pragma HLS STREAM variable=PE7_7_fifo0_local depth=2
  stream<U1_Data1PEChannelType> PE7_7_fifo1_local;
#pragma HLS STREAM variable=PE7_7_fifo1_local depth=2
  stream<U1_Data2PEChannelType> PE7_7_fifo2_local;
#pragma HLS STREAM variable=PE7_7_fifo2_local depth=2

  // int cin_count=0;
  // int weight_count=0;
  // int config_count=0;
  // while(!fifo_cin.empty()){
  //   fifo_cin.read();
  //   cin_count++;
  // }
  // while(!fifo_weight.empty()){
  //   fifo_weight.read();
  //   weight_count++;
  // }
  // while(!fifo_kernel_config_in.empty()){
  //   fifo_kernel_config_in.read();
  //   config_count++;
  // }
  // cout<<"cin_count: "<<cin_count<<endl;
  // cout<<"weight_count: "<<weight_count<<endl;
  // cout<<"config_count: "<<config_count<<endl;
  // exit(0);
  // float num[8];
  // while(!fifo_weight.empty()){
  //   printf("weights: ");
  //   ap_uint<256> data = fifo_weight.read();
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<float>((ap_uint<32>)data((i+1)*32-1, 32*i));
  //     printf("%10f\t", num[i]);
  //   }
  //   printf("\n");
  // }
  // return;

  // int count = 0;
  // while(!fifo_weight.empty()){
  //   ap_uint<256> item = fifo_weight.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;

  // int count = 0;
  // while(!fifo_cin.empty()){
  //   ap_uint<256> item = fifo_cin.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  // modules
  U1_DataFeed0Head(
    fifo_cin,
    fifo0_transfer0,
    fifo_kernel_config_in,
    fifo_kernel_config_out,
    fifo_DataFeed0Head_config_out0, fifo_DataFeed0Head_config_out1
  );
  cout<<"finished U1_DataFeed0Head"<<endl;
  // int count = 0;
  // while(!fifo0_transfer0.empty()){
  //   fifo0_transfer0.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);
  // int count = 0;
  // while(!fifo0_transfer0.empty()){
  //   U1_Data0TransferChannelType item = fifo0_transfer0.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer0,
    fifo0_transfer1,
    fifo0_feed0_0,
    0,
    fifo_DataFeed0Head_config_out0,
    fifo_DataFeed0Engine0_config_out0,
    fifo_DataFeed0Engine0_config_out1
  );

  // int count = 0;
  // while(!fifo0_feed0_0.empty()){
  //   U1_Data0PEChannelType item = fifo0_feed0_0.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  // int count = 0;
  // while(!fifo0_feed0_0.empty()){
  //   fifo0_feed0_0.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer1,
    fifo0_transfer2,
    fifo0_feed0_1,
    1,
    fifo_DataFeed0Engine0_config_out0,
    fifo_DataFeed0Engine1_config_out0,
    fifo_DataFeed0Engine1_config_out1
  );

  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer2,
    fifo0_transfer3,
    fifo0_feed0_2,
    2,
    fifo_DataFeed0Engine1_config_out0,
    fifo_DataFeed0Engine2_config_out0,
    fifo_DataFeed0Engine2_config_out1
  );

  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer3,
    fifo0_transfer4,
    fifo0_feed0_3,
    3,
    fifo_DataFeed0Engine2_config_out0,
    fifo_DataFeed0Engine3_config_out0,
    fifo_DataFeed0Engine3_config_out1
  );

  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer4,
    fifo0_transfer5,
    fifo0_feed0_4,
    4,
    fifo_DataFeed0Engine3_config_out0,
    fifo_DataFeed0Engine4_config_out0,
    fifo_DataFeed0Engine4_config_out1
  );

  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer5,
    fifo0_transfer6,
    fifo0_feed0_5,
    5,
    fifo_DataFeed0Engine4_config_out0,
    fifo_DataFeed0Engine5_config_out0,
    fifo_DataFeed0Engine5_config_out1
  );

  U1_DataFeed0Engine0_wrapper(
    fifo0_transfer6,
    fifo0_transfer7,
    fifo0_feed0_6,
    6,
    fifo_DataFeed0Engine5_config_out0,
    fifo_DataFeed0Engine6_config_out0,
    fifo_DataFeed0Engine6_config_out1
  );
  cout<<"finished U1_DataFeed0Engine0_wrapper"<<endl;
  // int count = 0;
  // while(!fifo0_feed0_6.empty()){
  //   U1_Data0PEChannelType item = fifo0_feed0_6.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataFeed0EngineLast(
    fifo0_transfer7,
    fifo0_feed0_7,
    7,
    fifo_DataFeed0Engine6_config_out0,
    fifo_DataFeed0Engine7_config_out1
  );
  cout<<"finished U1_DataFeed0EngineLast"<<endl;
  // int count = 0;
  // while(!fifo0_feed0_7.empty()){
  //   U1_Data0PEChannelType item = fifo0_feed0_7.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  U1_DataFeed1Head(
    fifo_weight,
    fifo1_transfer0,
    fifo_DataFeed0Head_config_out1, fifo_DataFeed1Head_config_out0
  );
  cout<<"finished U1_DataFeed1Head"<<endl;
  // int count = 0;
  // while(!fifo1_transfer0.empty()){
  //   U1_Data1TransferChannelType item = fifo1_transfer0.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer0,
    fifo1_transfer1,
    fifo1_feed0_0,
    0,
    fifo_DataFeed1Head_config_out0,
    fifo_DataFeed1Engine0_config_out0
  );
  // int count = 0;
  // while(!fifo1_feed0_0.empty()){
  //   fifo1_feed0_0.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer1,
    fifo1_transfer2,
    fifo1_feed1_0,
    1,
    fifo_DataFeed1Engine0_config_out0,
    fifo_DataFeed1Engine1_config_out0
  );

  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer2,
    fifo1_transfer3,
    fifo1_feed2_0,
    2,
    fifo_DataFeed1Engine1_config_out0,
    fifo_DataFeed1Engine2_config_out0
  );

  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer3,
    fifo1_transfer4,
    fifo1_feed3_0,
    3,
    fifo_DataFeed1Engine2_config_out0,
    fifo_DataFeed1Engine3_config_out0
  );

  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer4,
    fifo1_transfer5,
    fifo1_feed4_0,
    4,
    fifo_DataFeed1Engine3_config_out0,
    fifo_DataFeed1Engine4_config_out0
  );

  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer5,
    fifo1_transfer6,
    fifo1_feed5_0,
    5,
    fifo_DataFeed1Engine4_config_out0,
    fifo_DataFeed1Engine5_config_out0
  );

  U1_DataFeed1Engine0_wrapper(
    fifo1_transfer6,
    fifo1_transfer7,
    fifo1_feed6_0,
    6,
    fifo_DataFeed1Engine5_config_out0,
    fifo_DataFeed1Engine6_config_out0
  );
  cout<<"finished U1_DataFeed1Engine0_wrapper"<<endl;
  // int count = 0;
  // while(!fifo1_feed6_0.empty()){
  //   U1_Data1PEChannelType item = fifo1_feed6_0.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataFeed1EngineLast(
    fifo1_transfer7,
    fifo1_feed7_0,
    7,
    fifo_DataFeed1Engine6_config_out0
  );
  cout<<"finished U1_DataFeed1EngineLast"<<endl;
  // int count = 0;
  // while(!fifo1_feed7_0.empty()){
  //   U1_Data1PEChannelType item = fifo1_feed7_0.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;

  // PE modules
  U1_op0_transfer_wrapper(
    fifo0_feed0_0,
    fifo0_feed1_0,
    PE0_0_fifo0_local,
    fifo_DataFeed0Engine0_config_out1,
    fifo_PE0_0_op0_config_out
  );
  cout<<"finished U1_op0_transfer_wrapper"<<endl;
  // int count = 0;
  // while(!PE0_0_fifo0_local.empty()){
  //   PE0_0_fifo0_local.read();
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_op1_transfer_wrapper(
    fifo1_feed0_0,
    fifo1_feed0_1,
    PE0_0_fifo1_local,
    fifo_PE0_0_op0_config_out,
    fifo_PE0_0_op1_config_out
  );
  cout<<"finished U1_op1_transfer_wrapper"<<endl;
  // int count = 0;
  // while(!PE0_0_fifo1_local.empty()){
  //   PE0_0_fifo1_local.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  // cout<<"compute start!"<<endl;
  U1_compute_wrapper(
    PE0_0_fifo0_local,
    PE0_0_fifo1_local,
    PE0_0_fifo2_local,
    fifo_PE0_0_op1_config_out,
    fifo_PE0_0_compute_config_out
  );
  cout<<"finished U1_compute_wrapper"<<endl;
  // int tiling_f = 64;
  // float arr[512/tiling_f][tiling_f];
  // for(int j=0; j<512/tiling_f; j++){
  //   for(int i=0; i<tiling_f; i++){
  //     U1_Data2PEChannelType item = PE0_0_fifo2_local.read();
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<512/tiling_f; j++){
  //   for(int i=0; i<tiling_f; i++){
  //     printf("%f\t", arr[j][i]);
  //   }
  //   printf("\n");
  // }
  // cout<<"compute done!"<<endl;
  // exit(0);
  // cout<<"compute done!"<<endl;
  // int count = 0;
  // while(!PE0_0_fifo2_local.empty()){
  //   U1_Data2PEChannelType item = PE0_0_fifo2_local.read();
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // exit(0);

  // cout<<"transfer start!"<<endl;
  U1_res_transfer_first_wrapper(
    PE0_0_fifo2_local,
    fifo2_collect0_0,
    0,
    0,
    fifo_PE0_0_compute_config_out,
    fifo_PE0_0_res_config_out
  );
  cout<<"finished U1_res_transfer_first_wrapper"<<endl;
  // float arr[64][8];
  // for(int j=0; j<64; j++){
  //   for(int i=0; i<8; i++){
  //     U1_Data2PEChannelType item = fifo2_collect0_0.read();
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<64; j++){
  //   for(int i=0; i<8; i++){
  //     printf("%f\t", arr[j][i]);
  //   }
  //   printf("\n");
  // }
  // cout<<"transfer done!"<<endl;
  // exit(0);
  // float arr[128][8];
  // for(int j=0; j<128; j++){
  //   for(int i=0; i<8; i++){
  //     U1_Data2PEChannelType item = fifo2_collect0_0.read();
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<128; j++){
  //   for(int i=0; i<8; i++){
  //     printf("%f\t", arr[j][i]);
  //   }
  //   printf("\n");
  // }
  // return;
  // int count = 0;
  // while(!fifo2_collect0_0.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_0.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_1,
    fifo0_feed1_1,
    PE0_1_fifo0_local,
    fifo_DataFeed0Engine1_config_out1,
    fifo_PE0_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed0_1,
    fifo1_feed0_2,
    PE0_1_fifo1_local,
    fifo_PE0_1_op0_config_out,
    fifo_PE0_1_op1_config_out
  );

  U1_compute_wrapper(
    PE0_1_fifo0_local,
    PE0_1_fifo1_local,
    PE0_1_fifo2_local,
    fifo_PE0_1_op1_config_out,
    fifo_PE0_1_compute_config_out
  );
  // int count = 0;
  // while(!PE0_1_fifo2_local.empty()){
  //   U1_Data2PEChannelType item = PE0_1_fifo2_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_res_transfer_first_wrapper(
    PE0_1_fifo2_local,
    fifo2_collect0_1,
    0,
    1,
    fifo_PE0_1_compute_config_out,
    fifo_PE0_1_res_config_out
  );
  // count = 0;
  // while(!fifo2_collect0_1.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_1.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_2,
    fifo0_feed1_2,
    PE0_2_fifo0_local,
    fifo_DataFeed0Engine2_config_out1,
    fifo_PE0_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed0_2,
    fifo1_feed0_3,
    PE0_2_fifo1_local,
    fifo_PE0_2_op0_config_out,
    fifo_PE0_2_op1_config_out
  );

  U1_compute_wrapper(
    PE0_2_fifo0_local,
    PE0_2_fifo1_local,
    PE0_2_fifo2_local,
    fifo_PE0_2_op1_config_out,
    fifo_PE0_2_compute_config_out
  );

  U1_res_transfer_first_wrapper(
    PE0_2_fifo2_local,
    fifo2_collect0_2,
    0,
    2,
    fifo_PE0_2_compute_config_out,
    fifo_PE0_2_res_config_out
  );
  // count = 0;
  // while(!fifo2_collect0_2.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_2.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_3,
    fifo0_feed1_3,
    PE0_3_fifo0_local,
    fifo_DataFeed0Engine3_config_out1,
    fifo_PE0_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed0_3,
    fifo1_feed0_4,
    PE0_3_fifo1_local,
    fifo_PE0_3_op0_config_out,
    fifo_PE0_3_op1_config_out
  );

  U1_compute_wrapper(
    PE0_3_fifo0_local,
    PE0_3_fifo1_local,
    PE0_3_fifo2_local,
    fifo_PE0_3_op1_config_out,
    fifo_PE0_3_compute_config_out
  );

  U1_res_transfer_first_wrapper(
    PE0_3_fifo2_local,
    fifo2_collect0_3,
    0,
    3,
    fifo_PE0_3_compute_config_out,
    fifo_PE0_3_res_config_out
  );
  // count = 0;
  // while(!fifo2_collect0_3.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_3.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_4,
    fifo0_feed1_4,
    PE0_4_fifo0_local,
    fifo_DataFeed0Engine4_config_out1,
    fifo_PE0_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed0_4,
    fifo1_feed0_5,
    PE0_4_fifo1_local,
    fifo_PE0_4_op0_config_out,
    fifo_PE0_4_op1_config_out
  );

  U1_compute_wrapper(
    PE0_4_fifo0_local,
    PE0_4_fifo1_local,
    PE0_4_fifo2_local,
    fifo_PE0_4_op1_config_out,
    fifo_PE0_4_compute_config_out
  );

  U1_res_transfer_first_wrapper(
    PE0_4_fifo2_local,
    fifo2_collect0_4,
    0,
    4,
    fifo_PE0_4_compute_config_out,
    fifo_PE0_4_res_config_out
  );
  // count = 0;
  // while(!fifo2_collect0_4.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_4.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_5,
    fifo0_feed1_5,
    PE0_5_fifo0_local,
    fifo_DataFeed0Engine5_config_out1,
    fifo_PE0_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed0_5,
    fifo1_feed0_6,
    PE0_5_fifo1_local,
    fifo_PE0_5_op0_config_out,
    fifo_PE0_5_op1_config_out
  );

  U1_compute_wrapper(
    PE0_5_fifo0_local,
    PE0_5_fifo1_local,
    PE0_5_fifo2_local,
    fifo_PE0_5_op1_config_out,
    fifo_PE0_5_compute_config_out
  );

  U1_res_transfer_first_wrapper(
    PE0_5_fifo2_local,
    fifo2_collect0_5,
    0,
    5,
    fifo_PE0_5_compute_config_out,
    fifo_PE0_5_res_config_out
  );
  // count = 0;
  // while(!fifo2_collect0_5.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_5.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_6,
    fifo0_feed1_6,
    PE0_6_fifo0_local,
    fifo_DataFeed0Engine6_config_out1,
    fifo_PE0_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed0_6,
    fifo1_feed0_7,
    PE0_6_fifo1_local,
    fifo_PE0_6_op0_config_out,
    fifo_PE0_6_op1_config_out
  );

  U1_compute_wrapper(
    PE0_6_fifo0_local,
    PE0_6_fifo1_local,
    PE0_6_fifo2_local,
    fifo_PE0_6_op1_config_out,
    fifo_PE0_6_compute_config_out
  );

  U1_res_transfer_first_wrapper(
    PE0_6_fifo2_local,
    fifo2_collect0_6,
    0,
    6,
    fifo_PE0_6_compute_config_out,
    fifo_PE0_6_res_config_out
  );
  // count = 0;
  // while(!fifo2_collect0_6.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_6.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  U1_op0_transfer_wrapper(
    fifo0_feed0_7,
    fifo0_feed1_7,
    PE0_7_fifo0_local,
    fifo_DataFeed0Engine7_config_out1,
    fifo_PE0_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed0_7,
    PE0_7_fifo1_local,
    fifo_PE0_7_op0_config_out,
    fifo_PE0_7_op1_config_out
  );

  U1_compute_wrapper(
    PE0_7_fifo0_local,
    PE0_7_fifo1_local,
    PE0_7_fifo2_local,
    fifo_PE0_7_op1_config_out,
    fifo_PE0_7_compute_config_out
  );

  // uint T = 8;
  // float arr[4][T][4];
  // for(int ch=0; ch<32/T; ch++){
  //   cout<<ch<<endl;
  //   for(int i=0; i<4; i++){
  //     for(int j=0; j<4; j++){
  //       for(int k=0; k<T; k++){
  //         U1_Data2PEChannelType item = PE0_7_fifo2_local.read();
  //         arr[i][k][j] = item.data;
  //       }
  //     }
  //   }
  //   for(int i=0; i<4; i++){
  //     cout<<"--------- iter "<<i<<"------------"<<endl;
  //     for(int k=0; k<T; k++){
  //       for(int j=0; j<4; j++){
  //         printf("%f\t", arr[i][k][j]);
  //       }
  //       printf("\n");
  //     }
  //   }
  // }
  // exit(0);
  // float arr[4][32][4];
  // for(int i=0; i<4; i++){
  //   for(int j=0; j<4; j++){
  //     for(int k=0; k<32; k++){
  //       U1_Data2PEChannelType item = PE0_7_fifo2_local.read();
  //       arr[i][k][j] = item.data;
  //     }
  //   }
  // }
  // for(int i=0; i<4; i++){
  //   cout<<"--------- iter "<<i<<"------------"<<endl;
  //   for(int k=0; k<32; k++){
  //     for(int j=0; j<4; j++){
  //       printf("%f\t", arr[i][k][j]);
  //     }
  //     printf("\n");
  //   }
  // }

  // for(int j=0; j<8; j++){
  //   for(int i=0; i<64; i++){
  //     U1_Data2PEChannelType item = PE0_7_fifo2_local.read();
  //     cout<<item.data<<endl;
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<64; j++){
  //   for(int i=0; i<8; i++){
  //     printf("%f\t", arr[i][j]);
  //   }
  //   printf("\n");
  // }
  // cout<<"transfer done!"<<endl;

  // int tiling_f = 64;
  // float arr[512/tiling_f][tiling_f];
  // for(int j=0; j<512/tiling_f; j++){
  //   for(int i=0; i<tiling_f; i++){
  //     U1_Data2PEChannelType item = PE0_7_fifo2_local.read();
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<512/tiling_f; j++){
  //   for(int i=0; i<tiling_f; i++){
  //     printf("%f\t", arr[j][i]);
  //   }
  //   printf("\n");
  // }
  // cout<<"compute done!"<<endl;
  // exit(0);
  // int count = 0;
  // while(!PE0_7_fifo2_local.empty()){
  //   U1_Data2PEChannelType item = PE0_7_fifo2_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;

  U1_res_transfer_first_wrapper(
    PE0_7_fifo2_local,
    fifo2_collect0_7,
    0,
    7,
    fifo_PE0_7_compute_config_out,
    fifo_PE0_7_res_config_out
  );
  // float arr[64][8];
  // for(int j=0; j<8; j++){
  //   for(int i=0; i<64; i++){
  //     U1_Data2PEChannelType item = fifo2_collect0_7.read();
  //     cout<<item.data<<endl;
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<64; j++){
  //   for(int i=0; i<8; i++){
  //     printf("%f\t", arr[i][j]);
  //   }
  //   printf("\n");
  // }
  // cout<<"transfer done!"<<endl;
  // exit(0);
  // count = 0;
  // while(!fifo2_collect0_7.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect0_7.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_op0_transfer_wrapper(
    fifo0_feed1_0,
    fifo0_feed2_0,
    PE1_0_fifo0_local,
    fifo_PE0_0_res_config_out,
    fifo_PE1_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_0,
    fifo1_feed1_1,
    PE1_0_fifo1_local,
    fifo_PE1_0_op0_config_out,
    fifo_PE1_0_op1_config_out
  );
  // int count = 0;
  // while(!PE1_0_fifo0_local.empty()){
  //   PE1_0_fifo0_local.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // // return;
  //   while(!PE1_0_fifo1_local.empty()){
  //   PE1_0_fifo1_local.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_compute_wrapper(
    PE1_0_fifo0_local,
    PE1_0_fifo1_local,
    PE1_0_fifo2_local,
    fifo_PE1_0_op1_config_out,
    fifo_PE1_0_compute_config_out
  );
  // int count = 0;
  // while(!PE1_0_fifo2_local.empty()){
  //   U1_Data2PEChannelType item = PE1_0_fifo2_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_res_transfer_wrapper(
    PE1_0_fifo2_local,
    fifo2_collect0_0,
    fifo2_collect1_0,
    1,
    0,
    fifo_PE1_0_compute_config_out,
    fifo_PE1_0_res_config_out
  );
  // for(int k=0; k<2; k++){
  //   cout<<"---------------iter "<<k<<"-----------------"<<endl;
  //   float arr[64][4];
  //   for(int j=0; j<64; j++){
  //     for(int i=0; i<4; i++){
  //       U1_Data2PEChannelType item = fifo2_collect1_0.read();
  //       arr[j][i] = item.data;
  //     }
  //   }
  //   for(int j=0; j<64; j++){
  //     for(int i=0; i<4; i++){
  //       printf("%f\t", arr[j][i]);
  //     }
  //     printf("\n");
  //   }
  // }
  // cout<<"transfer done!"<<endl;
  // exit(0);
  // for(int k=0; k<2; k++){
  //   cout<<"---------------iter "<<k<<"-----------------"<<endl;
  //   float arr[128][8];
  //   for(int j=0; j<128; j++){
  //     for(int i=0; i<8; i++){
  //       U1_Data2PEChannelType item = fifo2_collect1_0.read();
  //       arr[j][i] = item.data;
  //     }
  //   }
  //   for(int j=0; j<128; j++){
  //     for(int i=0; i<8; i++){
  //       printf("%f\t", arr[j][i]);
  //     }
  //     printf("\n");
  //   }
  // }
  // cout<<"transfer done!"<<endl;
  // exit(0);

  U1_op0_transfer_wrapper(
    fifo0_feed1_1,
    fifo0_feed2_1,
    PE1_1_fifo0_local,
    fifo_PE0_1_res_config_out,
    fifo_PE1_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_1,
    fifo1_feed1_2,
    PE1_1_fifo1_local,
    fifo_PE1_1_op0_config_out,
    fifo_PE1_1_op1_config_out
  );

  U1_compute_wrapper(
    PE1_1_fifo0_local,
    PE1_1_fifo1_local,
    PE1_1_fifo2_local,
    fifo_PE1_1_op1_config_out,
    fifo_PE1_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_1_fifo2_local,
    fifo2_collect0_1,
    fifo2_collect1_1,
    1,
    1,
    fifo_PE1_1_compute_config_out,
    fifo_PE1_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_2,
    fifo0_feed2_2,
    PE1_2_fifo0_local,
    fifo_PE0_2_res_config_out,
    fifo_PE1_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_2,
    fifo1_feed1_3,
    PE1_2_fifo1_local,
    fifo_PE1_2_op0_config_out,
    fifo_PE1_2_op1_config_out
  );

  U1_compute_wrapper(
    PE1_2_fifo0_local,
    PE1_2_fifo1_local,
    PE1_2_fifo2_local,
    fifo_PE1_2_op1_config_out,
    fifo_PE1_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_2_fifo2_local,
    fifo2_collect0_2,
    fifo2_collect1_2,
    1,
    2,
    fifo_PE1_2_compute_config_out,
    fifo_PE1_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_3,
    fifo0_feed2_3,
    PE1_3_fifo0_local,
    fifo_PE0_3_res_config_out,
    fifo_PE1_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_3,
    fifo1_feed1_4,
    PE1_3_fifo1_local,
    fifo_PE1_3_op0_config_out,
    fifo_PE1_3_op1_config_out
  );

  U1_compute_wrapper(
    PE1_3_fifo0_local,
    PE1_3_fifo1_local,
    PE1_3_fifo2_local,
    fifo_PE1_3_op1_config_out,
    fifo_PE1_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_3_fifo2_local,
    fifo2_collect0_3,
    fifo2_collect1_3,
    1,
    3,
    fifo_PE1_3_compute_config_out,
    fifo_PE1_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_4,
    fifo0_feed2_4,
    PE1_4_fifo0_local,
    fifo_PE0_4_res_config_out,
    fifo_PE1_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_4,
    fifo1_feed1_5,
    PE1_4_fifo1_local,
    fifo_PE1_4_op0_config_out,
    fifo_PE1_4_op1_config_out
  );

  U1_compute_wrapper(
    PE1_4_fifo0_local,
    PE1_4_fifo1_local,
    PE1_4_fifo2_local,
    fifo_PE1_4_op1_config_out,
    fifo_PE1_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_4_fifo2_local,
    fifo2_collect0_4,
    fifo2_collect1_4,
    1,
    4,
    fifo_PE1_4_compute_config_out,
    fifo_PE1_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_5,
    fifo0_feed2_5,
    PE1_5_fifo0_local,
    fifo_PE0_5_res_config_out,
    fifo_PE1_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_5,
    fifo1_feed1_6,
    PE1_5_fifo1_local,
    fifo_PE1_5_op0_config_out,
    fifo_PE1_5_op1_config_out
  );

  U1_compute_wrapper(
    PE1_5_fifo0_local,
    PE1_5_fifo1_local,
    PE1_5_fifo2_local,
    fifo_PE1_5_op1_config_out,
    fifo_PE1_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_5_fifo2_local,
    fifo2_collect0_5,
    fifo2_collect1_5,
    1,
    5,
    fifo_PE1_5_compute_config_out,
    fifo_PE1_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_6,
    fifo0_feed2_6,
    PE1_6_fifo0_local,
    fifo_PE0_6_res_config_out,
    fifo_PE1_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed1_6,
    fifo1_feed1_7,
    PE1_6_fifo1_local,
    fifo_PE1_6_op0_config_out,
    fifo_PE1_6_op1_config_out
  );

  U1_compute_wrapper(
    PE1_6_fifo0_local,
    PE1_6_fifo1_local,
    PE1_6_fifo2_local,
    fifo_PE1_6_op1_config_out,
    fifo_PE1_6_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_6_fifo2_local,
    fifo2_collect0_6,
    fifo2_collect1_6,
    1,
    6,
    fifo_PE1_6_compute_config_out,
    fifo_PE1_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed1_7,
    fifo0_feed2_7,
    PE1_7_fifo0_local,
    fifo_PE0_7_res_config_out,
    fifo_PE1_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed1_7,
    PE1_7_fifo1_local,
    fifo_PE1_7_op0_config_out,
    fifo_PE1_7_op1_config_out
  );

  U1_compute_wrapper(
    PE1_7_fifo0_local,
    PE1_7_fifo1_local,
    PE1_7_fifo2_local,
    fifo_PE1_7_op1_config_out,
    fifo_PE1_7_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE1_7_fifo2_local,
    fifo2_collect0_7,
    fifo2_collect1_7,
    1,
    7,
    fifo_PE1_7_compute_config_out,
    fifo_PE1_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_0,
    fifo0_feed3_0,
    PE2_0_fifo0_local,
    fifo_PE1_0_res_config_out,
    fifo_PE2_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_0,
    fifo1_feed2_1,
    PE2_0_fifo1_local,
    fifo_PE2_0_op0_config_out,
    fifo_PE2_0_op1_config_out
  );

  U1_compute_wrapper(
    PE2_0_fifo0_local,
    PE2_0_fifo1_local,
    PE2_0_fifo2_local,
    fifo_PE2_0_op1_config_out,
    fifo_PE2_0_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_0_fifo2_local,
    fifo2_collect1_0,
    fifo2_collect2_0,
    2,
    0,
    fifo_PE2_0_compute_config_out,
    fifo_PE2_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_1,
    fifo0_feed3_1,
    PE2_1_fifo0_local,
    fifo_PE1_1_res_config_out,
    fifo_PE2_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_1,
    fifo1_feed2_2,
    PE2_1_fifo1_local,
    fifo_PE2_1_op0_config_out,
    fifo_PE2_1_op1_config_out
  );

  U1_compute_wrapper(
    PE2_1_fifo0_local,
    PE2_1_fifo1_local,
    PE2_1_fifo2_local,
    fifo_PE2_1_op1_config_out,
    fifo_PE2_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_1_fifo2_local,
    fifo2_collect1_1,
    fifo2_collect2_1,
    2,
    1,
    fifo_PE2_1_compute_config_out,
    fifo_PE2_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_2,
    fifo0_feed3_2,
    PE2_2_fifo0_local,
    fifo_PE1_2_res_config_out,
    fifo_PE2_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_2,
    fifo1_feed2_3,
    PE2_2_fifo1_local,
    fifo_PE2_2_op0_config_out,
    fifo_PE2_2_op1_config_out
  );

  U1_compute_wrapper(
    PE2_2_fifo0_local,
    PE2_2_fifo1_local,
    PE2_2_fifo2_local,
    fifo_PE2_2_op1_config_out,
    fifo_PE2_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_2_fifo2_local,
    fifo2_collect1_2,
    fifo2_collect2_2,
    2,
    2,
    fifo_PE2_2_compute_config_out,
    fifo_PE2_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_3,
    fifo0_feed3_3,
    PE2_3_fifo0_local,
    fifo_PE1_3_res_config_out,
    fifo_PE2_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_3,
    fifo1_feed2_4,
    PE2_3_fifo1_local,
    fifo_PE2_3_op0_config_out,
    fifo_PE2_3_op1_config_out
  );

  U1_compute_wrapper(
    PE2_3_fifo0_local,
    PE2_3_fifo1_local,
    PE2_3_fifo2_local,
    fifo_PE2_3_op1_config_out,
    fifo_PE2_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_3_fifo2_local,
    fifo2_collect1_3,
    fifo2_collect2_3,
    2,
    3,
    fifo_PE2_3_compute_config_out,
    fifo_PE2_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_4,
    fifo0_feed3_4,
    PE2_4_fifo0_local,
    fifo_PE1_4_res_config_out,
    fifo_PE2_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_4,
    fifo1_feed2_5,
    PE2_4_fifo1_local,
    fifo_PE2_4_op0_config_out,
    fifo_PE2_4_op1_config_out
  );

  U1_compute_wrapper(
    PE2_4_fifo0_local,
    PE2_4_fifo1_local,
    PE2_4_fifo2_local,
    fifo_PE2_4_op1_config_out,
    fifo_PE2_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_4_fifo2_local,
    fifo2_collect1_4,
    fifo2_collect2_4,
    2,
    4,
    fifo_PE2_4_compute_config_out,
    fifo_PE2_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_5,
    fifo0_feed3_5,
    PE2_5_fifo0_local,
    fifo_PE1_5_res_config_out,
    fifo_PE2_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_5,
    fifo1_feed2_6,
    PE2_5_fifo1_local,
    fifo_PE2_5_op0_config_out,
    fifo_PE2_5_op1_config_out
  );

  U1_compute_wrapper(
    PE2_5_fifo0_local,
    PE2_5_fifo1_local,
    PE2_5_fifo2_local,
    fifo_PE2_5_op1_config_out,
    fifo_PE2_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_5_fifo2_local,
    fifo2_collect1_5,
    fifo2_collect2_5,
    2,
    5,
    fifo_PE2_5_compute_config_out,
    fifo_PE2_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_6,
    fifo0_feed3_6,
    PE2_6_fifo0_local,
    fifo_PE1_6_res_config_out,
    fifo_PE2_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed2_6,
    fifo1_feed2_7,
    PE2_6_fifo1_local,
    fifo_PE2_6_op0_config_out,
    fifo_PE2_6_op1_config_out
  );

  U1_compute_wrapper(
    PE2_6_fifo0_local,
    PE2_6_fifo1_local,
    PE2_6_fifo2_local,
    fifo_PE2_6_op1_config_out,
    fifo_PE2_6_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_6_fifo2_local,
    fifo2_collect1_6,
    fifo2_collect2_6,
    2,
    6,
    fifo_PE2_6_compute_config_out,
    fifo_PE2_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed2_7,
    fifo0_feed3_7,
    PE2_7_fifo0_local,
    fifo_PE1_7_res_config_out,
    fifo_PE2_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed2_7,
    PE2_7_fifo1_local,
    fifo_PE2_7_op0_config_out,
    fifo_PE2_7_op1_config_out
  );

  U1_compute_wrapper(
    PE2_7_fifo0_local,
    PE2_7_fifo1_local,
    PE2_7_fifo2_local,
    fifo_PE2_7_op1_config_out,
    fifo_PE2_7_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE2_7_fifo2_local,
    fifo2_collect1_7,
    fifo2_collect2_7,
    2,
    7,
    fifo_PE2_7_compute_config_out,
    fifo_PE2_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_0,
    fifo0_feed4_0,
    PE3_0_fifo0_local,
    fifo_PE2_0_res_config_out,
    fifo_PE3_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_0,
    fifo1_feed3_1,
    PE3_0_fifo1_local,
    fifo_PE3_0_op0_config_out,
    fifo_PE3_0_op1_config_out
  );

  U1_compute_wrapper(
    PE3_0_fifo0_local,
    PE3_0_fifo1_local,
    PE3_0_fifo2_local,
    fifo_PE3_0_op1_config_out,
    fifo_PE3_0_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_0_fifo2_local,
    fifo2_collect2_0,
    fifo2_collect3_0,
    3,
    0,
    fifo_PE3_0_compute_config_out,
    fifo_PE3_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_1,
    fifo0_feed4_1,
    PE3_1_fifo0_local,
    fifo_PE2_1_res_config_out,
    fifo_PE3_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_1,
    fifo1_feed3_2,
    PE3_1_fifo1_local,
    fifo_PE3_1_op0_config_out,
    fifo_PE3_1_op1_config_out
  );

  U1_compute_wrapper(
    PE3_1_fifo0_local,
    PE3_1_fifo1_local,
    PE3_1_fifo2_local,
    fifo_PE3_1_op1_config_out,
    fifo_PE3_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_1_fifo2_local,
    fifo2_collect2_1,
    fifo2_collect3_1,
    3,
    1,
    fifo_PE3_1_compute_config_out,
    fifo_PE3_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_2,
    fifo0_feed4_2,
    PE3_2_fifo0_local,
    fifo_PE2_2_res_config_out,
    fifo_PE3_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_2,
    fifo1_feed3_3,
    PE3_2_fifo1_local,
    fifo_PE3_2_op0_config_out,
    fifo_PE3_2_op1_config_out
  );

  U1_compute_wrapper(
    PE3_2_fifo0_local,
    PE3_2_fifo1_local,
    PE3_2_fifo2_local,
    fifo_PE3_2_op1_config_out,
    fifo_PE3_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_2_fifo2_local,
    fifo2_collect2_2,
    fifo2_collect3_2,
    3,
    2,
    fifo_PE3_2_compute_config_out,
    fifo_PE3_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_3,
    fifo0_feed4_3,
    PE3_3_fifo0_local,
    fifo_PE2_3_res_config_out,
    fifo_PE3_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_3,
    fifo1_feed3_4,
    PE3_3_fifo1_local,
    fifo_PE3_3_op0_config_out,
    fifo_PE3_3_op1_config_out
  );

  U1_compute_wrapper(
    PE3_3_fifo0_local,
    PE3_3_fifo1_local,
    PE3_3_fifo2_local,
    fifo_PE3_3_op1_config_out,
    fifo_PE3_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_3_fifo2_local,
    fifo2_collect2_3,
    fifo2_collect3_3,
    3,
    3,
    fifo_PE3_3_compute_config_out,
    fifo_PE3_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_4,
    fifo0_feed4_4,
    PE3_4_fifo0_local,
    fifo_PE2_4_res_config_out,
    fifo_PE3_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_4,
    fifo1_feed3_5,
    PE3_4_fifo1_local,
    fifo_PE3_4_op0_config_out,
    fifo_PE3_4_op1_config_out
  );

  U1_compute_wrapper(
    PE3_4_fifo0_local,
    PE3_4_fifo1_local,
    PE3_4_fifo2_local,
    fifo_PE3_4_op1_config_out,
    fifo_PE3_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_4_fifo2_local,
    fifo2_collect2_4,
    fifo2_collect3_4,
    3,
    4,
    fifo_PE3_4_compute_config_out,
    fifo_PE3_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_5,
    fifo0_feed4_5,
    PE3_5_fifo0_local,
    fifo_PE2_5_res_config_out,
    fifo_PE3_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_5,
    fifo1_feed3_6,
    PE3_5_fifo1_local,
    fifo_PE3_5_op0_config_out,
    fifo_PE3_5_op1_config_out
  );

  U1_compute_wrapper(
    PE3_5_fifo0_local,
    PE3_5_fifo1_local,
    PE3_5_fifo2_local,
    fifo_PE3_5_op1_config_out,
    fifo_PE3_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_5_fifo2_local,
    fifo2_collect2_5,
    fifo2_collect3_5,
    3,
    5,
    fifo_PE3_5_compute_config_out,
    fifo_PE3_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_6,
    fifo0_feed4_6,
    PE3_6_fifo0_local,
    fifo_PE2_6_res_config_out,
    fifo_PE3_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed3_6,
    fifo1_feed3_7,
    PE3_6_fifo1_local,
    fifo_PE3_6_op0_config_out,
    fifo_PE3_6_op1_config_out
  );

  U1_compute_wrapper(
    PE3_6_fifo0_local,
    PE3_6_fifo1_local,
    PE3_6_fifo2_local,
    fifo_PE3_6_op1_config_out,
    fifo_PE3_6_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_6_fifo2_local,
    fifo2_collect2_6,
    fifo2_collect3_6,
    3,
    6,
    fifo_PE3_6_compute_config_out,
    fifo_PE3_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed3_7,
    fifo0_feed4_7,
    PE3_7_fifo0_local,
    fifo_PE2_7_res_config_out,
    fifo_PE3_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed3_7,
    PE3_7_fifo1_local,
    fifo_PE3_7_op0_config_out,
    fifo_PE3_7_op1_config_out
  );

  U1_compute_wrapper(
    PE3_7_fifo0_local,
    PE3_7_fifo1_local,
    PE3_7_fifo2_local,
    fifo_PE3_7_op1_config_out,
    fifo_PE3_7_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE3_7_fifo2_local,
    fifo2_collect2_7,
    fifo2_collect3_7,
    3,
    7,
    fifo_PE3_7_compute_config_out,
    fifo_PE3_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_0,
    fifo0_feed5_0,
    PE4_0_fifo0_local,
    fifo_PE3_0_res_config_out,
    fifo_PE4_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_0,
    fifo1_feed4_1,
    PE4_0_fifo1_local,
    fifo_PE4_0_op0_config_out,
    fifo_PE4_0_op1_config_out
  );

  U1_compute_wrapper(
    PE4_0_fifo0_local,
    PE4_0_fifo1_local,
    PE4_0_fifo2_local,
    fifo_PE4_0_op1_config_out,
    fifo_PE4_0_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_0_fifo2_local,
    fifo2_collect3_0,
    fifo2_collect4_0,
    4,
    0,
    fifo_PE4_0_compute_config_out,
    fifo_PE4_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_1,
    fifo0_feed5_1,
    PE4_1_fifo0_local,
    fifo_PE3_1_res_config_out,
    fifo_PE4_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_1,
    fifo1_feed4_2,
    PE4_1_fifo1_local,
    fifo_PE4_1_op0_config_out,
    fifo_PE4_1_op1_config_out
  );

  U1_compute_wrapper(
    PE4_1_fifo0_local,
    PE4_1_fifo1_local,
    PE4_1_fifo2_local,
    fifo_PE4_1_op1_config_out,
    fifo_PE4_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_1_fifo2_local,
    fifo2_collect3_1,
    fifo2_collect4_1,
    4,
    1,
    fifo_PE4_1_compute_config_out,
    fifo_PE4_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_2,
    fifo0_feed5_2,
    PE4_2_fifo0_local,
    fifo_PE3_2_res_config_out,
    fifo_PE4_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_2,
    fifo1_feed4_3,
    PE4_2_fifo1_local,
    fifo_PE4_2_op0_config_out,
    fifo_PE4_2_op1_config_out
  );

  U1_compute_wrapper(
    PE4_2_fifo0_local,
    PE4_2_fifo1_local,
    PE4_2_fifo2_local,
    fifo_PE4_2_op1_config_out,
    fifo_PE4_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_2_fifo2_local,
    fifo2_collect3_2,
    fifo2_collect4_2,
    4,
    2,
    fifo_PE4_2_compute_config_out,
    fifo_PE4_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_3,
    fifo0_feed5_3,
    PE4_3_fifo0_local,
    fifo_PE3_3_res_config_out,
    fifo_PE4_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_3,
    fifo1_feed4_4,
    PE4_3_fifo1_local,
    fifo_PE4_3_op0_config_out,
    fifo_PE4_3_op1_config_out
  );

  U1_compute_wrapper(
    PE4_3_fifo0_local,
    PE4_3_fifo1_local,
    PE4_3_fifo2_local,
    fifo_PE4_3_op1_config_out,
    fifo_PE4_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_3_fifo2_local,
    fifo2_collect3_3,
    fifo2_collect4_3,
    4,
    3,
    fifo_PE4_3_compute_config_out,
    fifo_PE4_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_4,
    fifo0_feed5_4,
    PE4_4_fifo0_local,
    fifo_PE3_4_res_config_out,
    fifo_PE4_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_4,
    fifo1_feed4_5,
    PE4_4_fifo1_local,
    fifo_PE4_4_op0_config_out,
    fifo_PE4_4_op1_config_out
  );

  U1_compute_wrapper(
    PE4_4_fifo0_local,
    PE4_4_fifo1_local,
    PE4_4_fifo2_local,
    fifo_PE4_4_op1_config_out,
    fifo_PE4_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_4_fifo2_local,
    fifo2_collect3_4,
    fifo2_collect4_4,
    4,
    4,
    fifo_PE4_4_compute_config_out,
    fifo_PE4_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_5,
    fifo0_feed5_5,
    PE4_5_fifo0_local,
    fifo_PE3_5_res_config_out,
    fifo_PE4_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_5,
    fifo1_feed4_6,
    PE4_5_fifo1_local,
    fifo_PE4_5_op0_config_out,
    fifo_PE4_5_op1_config_out
  );

  U1_compute_wrapper(
    PE4_5_fifo0_local,
    PE4_5_fifo1_local,
    PE4_5_fifo2_local,
    fifo_PE4_5_op1_config_out,
    fifo_PE4_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_5_fifo2_local,
    fifo2_collect3_5,
    fifo2_collect4_5,
    4,
    5,
    fifo_PE4_5_compute_config_out,
    fifo_PE4_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_6,
    fifo0_feed5_6,
    PE4_6_fifo0_local,
    fifo_PE3_6_res_config_out,
    fifo_PE4_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed4_6,
    fifo1_feed4_7,
    PE4_6_fifo1_local,
    fifo_PE4_6_op0_config_out,
    fifo_PE4_6_op1_config_out
  );

  U1_compute_wrapper(
    PE4_6_fifo0_local,
    PE4_6_fifo1_local,
    PE4_6_fifo2_local,
    fifo_PE4_6_op1_config_out,
    fifo_PE4_6_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_6_fifo2_local,
    fifo2_collect3_6,
    fifo2_collect4_6,
    4,
    6,
    fifo_PE4_6_compute_config_out,
    fifo_PE4_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed4_7,
    fifo0_feed5_7,
    PE4_7_fifo0_local,
    fifo_PE3_7_res_config_out,
    fifo_PE4_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed4_7,
    PE4_7_fifo1_local,
    fifo_PE4_7_op0_config_out,
    fifo_PE4_7_op1_config_out
  );

  U1_compute_wrapper(
    PE4_7_fifo0_local,
    PE4_7_fifo1_local,
    PE4_7_fifo2_local,
    fifo_PE4_7_op1_config_out,
    fifo_PE4_7_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE4_7_fifo2_local,
    fifo2_collect3_7,
    fifo2_collect4_7,
    4,
    7,
    fifo_PE4_7_compute_config_out,
    fifo_PE4_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_0,
    fifo0_feed6_0,
    PE5_0_fifo0_local,
    fifo_PE4_0_res_config_out,
    fifo_PE5_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_0,
    fifo1_feed5_1,
    PE5_0_fifo1_local,
    fifo_PE5_0_op0_config_out,
    fifo_PE5_0_op1_config_out
  );

  U1_compute_wrapper(
    PE5_0_fifo0_local,
    PE5_0_fifo1_local,
    PE5_0_fifo2_local,
    fifo_PE5_0_op1_config_out,
    fifo_PE5_0_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_0_fifo2_local,
    fifo2_collect4_0,
    fifo2_collect5_0,
    5,
    0,
    fifo_PE5_0_compute_config_out,
    fifo_PE5_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_1,
    fifo0_feed6_1,
    PE5_1_fifo0_local,
    fifo_PE4_1_res_config_out,
    fifo_PE5_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_1,
    fifo1_feed5_2,
    PE5_1_fifo1_local,
    fifo_PE5_1_op0_config_out,
    fifo_PE5_1_op1_config_out
  );

  U1_compute_wrapper(
    PE5_1_fifo0_local,
    PE5_1_fifo1_local,
    PE5_1_fifo2_local,
    fifo_PE5_1_op1_config_out,
    fifo_PE5_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_1_fifo2_local,
    fifo2_collect4_1,
    fifo2_collect5_1,
    5,
    1,
    fifo_PE5_1_compute_config_out,
    fifo_PE5_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_2,
    fifo0_feed6_2,
    PE5_2_fifo0_local,
    fifo_PE4_2_res_config_out,
    fifo_PE5_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_2,
    fifo1_feed5_3,
    PE5_2_fifo1_local,
    fifo_PE5_2_op0_config_out,
    fifo_PE5_2_op1_config_out
  );

  U1_compute_wrapper(
    PE5_2_fifo0_local,
    PE5_2_fifo1_local,
    PE5_2_fifo2_local,
    fifo_PE5_2_op1_config_out,
    fifo_PE5_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_2_fifo2_local,
    fifo2_collect4_2,
    fifo2_collect5_2,
    5,
    2,
    fifo_PE5_2_compute_config_out,
    fifo_PE5_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_3,
    fifo0_feed6_3,
    PE5_3_fifo0_local,
    fifo_PE4_3_res_config_out,
    fifo_PE5_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_3,
    fifo1_feed5_4,
    PE5_3_fifo1_local,
    fifo_PE5_3_op0_config_out,
    fifo_PE5_3_op1_config_out
  );

  U1_compute_wrapper(
    PE5_3_fifo0_local,
    PE5_3_fifo1_local,
    PE5_3_fifo2_local,
    fifo_PE5_3_op1_config_out,
    fifo_PE5_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_3_fifo2_local,
    fifo2_collect4_3,
    fifo2_collect5_3,
    5,
    3,
    fifo_PE5_3_compute_config_out,
    fifo_PE5_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_4,
    fifo0_feed6_4,
    PE5_4_fifo0_local,
    fifo_PE4_4_res_config_out,
    fifo_PE5_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_4,
    fifo1_feed5_5,
    PE5_4_fifo1_local,
    fifo_PE5_4_op0_config_out,
    fifo_PE5_4_op1_config_out
  );

  U1_compute_wrapper(
    PE5_4_fifo0_local,
    PE5_4_fifo1_local,
    PE5_4_fifo2_local,
    fifo_PE5_4_op1_config_out,
    fifo_PE5_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_4_fifo2_local,
    fifo2_collect4_4,
    fifo2_collect5_4,
    5,
    4,
    fifo_PE5_4_compute_config_out,
    fifo_PE5_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_5,
    fifo0_feed6_5,
    PE5_5_fifo0_local,
    fifo_PE4_5_res_config_out,
    fifo_PE5_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_5,
    fifo1_feed5_6,
    PE5_5_fifo1_local,
    fifo_PE5_5_op0_config_out,
    fifo_PE5_5_op1_config_out
  );

  U1_compute_wrapper(
    PE5_5_fifo0_local,
    PE5_5_fifo1_local,
    PE5_5_fifo2_local,
    fifo_PE5_5_op1_config_out,
    fifo_PE5_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_5_fifo2_local,
    fifo2_collect4_5,
    fifo2_collect5_5,
    5,
    5,
    fifo_PE5_5_compute_config_out,
    fifo_PE5_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_6,
    fifo0_feed6_6,
    PE5_6_fifo0_local,
    fifo_PE4_6_res_config_out,
    fifo_PE5_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed5_6,
    fifo1_feed5_7,
    PE5_6_fifo1_local,
    fifo_PE5_6_op0_config_out,
    fifo_PE5_6_op1_config_out
  );

  U1_compute_wrapper(
    PE5_6_fifo0_local,
    PE5_6_fifo1_local,
    PE5_6_fifo2_local,
    fifo_PE5_6_op1_config_out,
    fifo_PE5_6_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_6_fifo2_local,
    fifo2_collect4_6,
    fifo2_collect5_6,
    5,
    6,
    fifo_PE5_6_compute_config_out,
    fifo_PE5_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed5_7,
    fifo0_feed6_7,
    PE5_7_fifo0_local,
    fifo_PE4_7_res_config_out,
    fifo_PE5_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed5_7,
    PE5_7_fifo1_local,
    fifo_PE5_7_op0_config_out,
    fifo_PE5_7_op1_config_out
  );

  U1_compute_wrapper(
    PE5_7_fifo0_local,
    PE5_7_fifo1_local,
    PE5_7_fifo2_local,
    fifo_PE5_7_op1_config_out,
    fifo_PE5_7_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE5_7_fifo2_local,
    fifo2_collect4_7,
    fifo2_collect5_7,
    5,
    7,
    fifo_PE5_7_compute_config_out,
    fifo_PE5_7_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_0,
    fifo0_feed7_0,
    PE6_0_fifo0_local,
    fifo_PE5_0_res_config_out,
    fifo_PE6_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_0,
    fifo1_feed6_1,
    PE6_0_fifo1_local,
    fifo_PE6_0_op0_config_out,
    fifo_PE6_0_op1_config_out
  );

  U1_compute_wrapper(
    PE6_0_fifo0_local,
    PE6_0_fifo1_local,
    PE6_0_fifo2_local,
    fifo_PE6_0_op1_config_out,
    fifo_PE6_0_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_0_fifo2_local,
    fifo2_collect5_0,
    fifo2_collect6_0,
    6,
    0,
    fifo_PE6_0_compute_config_out,
    fifo_PE6_0_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_1,
    fifo0_feed7_1,
    PE6_1_fifo0_local,
    fifo_PE5_1_res_config_out,
    fifo_PE6_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_1,
    fifo1_feed6_2,
    PE6_1_fifo1_local,
    fifo_PE6_1_op0_config_out,
    fifo_PE6_1_op1_config_out
  );

  U1_compute_wrapper(
    PE6_1_fifo0_local,
    PE6_1_fifo1_local,
    PE6_1_fifo2_local,
    fifo_PE6_1_op1_config_out,
    fifo_PE6_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_1_fifo2_local,
    fifo2_collect5_1,
    fifo2_collect6_1,
    6,
    1,
    fifo_PE6_1_compute_config_out,
    fifo_PE6_1_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_2,
    fifo0_feed7_2,
    PE6_2_fifo0_local,
    fifo_PE5_2_res_config_out,
    fifo_PE6_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_2,
    fifo1_feed6_3,
    PE6_2_fifo1_local,
    fifo_PE6_2_op0_config_out,
    fifo_PE6_2_op1_config_out
  );

  U1_compute_wrapper(
    PE6_2_fifo0_local,
    PE6_2_fifo1_local,
    PE6_2_fifo2_local,
    fifo_PE6_2_op1_config_out,
    fifo_PE6_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_2_fifo2_local,
    fifo2_collect5_2,
    fifo2_collect6_2,
    6,
    2,
    fifo_PE6_2_compute_config_out,
    fifo_PE6_2_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_3,
    fifo0_feed7_3,
    PE6_3_fifo0_local,
    fifo_PE5_3_res_config_out,
    fifo_PE6_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_3,
    fifo1_feed6_4,
    PE6_3_fifo1_local,
    fifo_PE6_3_op0_config_out,
    fifo_PE6_3_op1_config_out
  );

  U1_compute_wrapper(
    PE6_3_fifo0_local,
    PE6_3_fifo1_local,
    PE6_3_fifo2_local,
    fifo_PE6_3_op1_config_out,
    fifo_PE6_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_3_fifo2_local,
    fifo2_collect5_3,
    fifo2_collect6_3,
    6,
    3,
    fifo_PE6_3_compute_config_out,
    fifo_PE6_3_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_4,
    fifo0_feed7_4,
    PE6_4_fifo0_local,
    fifo_PE5_4_res_config_out,
    fifo_PE6_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_4,
    fifo1_feed6_5,
    PE6_4_fifo1_local,
    fifo_PE6_4_op0_config_out,
    fifo_PE6_4_op1_config_out
  );

  U1_compute_wrapper(
    PE6_4_fifo0_local,
    PE6_4_fifo1_local,
    PE6_4_fifo2_local,
    fifo_PE6_4_op1_config_out,
    fifo_PE6_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_4_fifo2_local,
    fifo2_collect5_4,
    fifo2_collect6_4,
    6,
    4,
    fifo_PE6_4_compute_config_out,
    fifo_PE6_4_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_5,
    fifo0_feed7_5,
    PE6_5_fifo0_local,
    fifo_PE5_5_res_config_out,
    fifo_PE6_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_5,
    fifo1_feed6_6,
    PE6_5_fifo1_local,
    fifo_PE6_5_op0_config_out,
    fifo_PE6_5_op1_config_out
  );

  U1_compute_wrapper(
    PE6_5_fifo0_local,
    PE6_5_fifo1_local,
    PE6_5_fifo2_local,
    fifo_PE6_5_op1_config_out,
    fifo_PE6_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_5_fifo2_local,
    fifo2_collect5_5,
    fifo2_collect6_5,
    6,
    5,
    fifo_PE6_5_compute_config_out,
    fifo_PE6_5_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_6,
    fifo0_feed7_6,
    PE6_6_fifo0_local,
    fifo_PE5_6_res_config_out,
    fifo_PE6_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed6_6,
    fifo1_feed6_7,
    PE6_6_fifo1_local,
    fifo_PE6_6_op0_config_out,
    fifo_PE6_6_op1_config_out
  );

  U1_compute_wrapper(
    PE6_6_fifo0_local,
    PE6_6_fifo1_local,
    PE6_6_fifo2_local,
    fifo_PE6_6_op1_config_out,
    fifo_PE6_6_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_6_fifo2_local,
    fifo2_collect5_6,
    fifo2_collect6_6,
    6,
    6,
    fifo_PE6_6_compute_config_out,
    fifo_PE6_6_res_config_out
  );

  U1_op0_transfer_wrapper(
    fifo0_feed6_7,
    fifo0_feed7_7,
    PE6_7_fifo0_local,
    fifo_PE5_7_res_config_out,
    fifo_PE6_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed6_7,
    PE6_7_fifo1_local,
    fifo_PE6_7_op0_config_out,
    fifo_PE6_7_op1_config_out
  );

  U1_compute_wrapper(
    PE6_7_fifo0_local,
    PE6_7_fifo1_local,
    PE6_7_fifo2_local,
    fifo_PE6_7_op1_config_out,
    fifo_PE6_7_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE6_7_fifo2_local,
    fifo2_collect5_7,
    fifo2_collect6_7,
    6,
    7,
    fifo_PE6_7_compute_config_out,
    fifo_PE6_7_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_0,
    PE7_0_fifo0_local,
    fifo_PE6_0_res_config_out,
    fifo_PE7_0_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_0,
    fifo1_feed7_1,
    PE7_0_fifo1_local,
    fifo_PE7_0_op0_config_out,
    fifo_PE7_0_op1_config_out
  );
  // int count = 0;
  // while(!PE7_0_fifo0_local.empty()){
  //   U1_Data0PEChannelType item = PE7_0_fifo0_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;

  
  // while(!PE7_0_fifo1_local.empty()){
  //   U1_Data1PEChannelType item = PE7_0_fifo1_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_compute_wrapper(
    PE7_0_fifo0_local,
    PE7_0_fifo1_local,
    PE7_0_fifo2_local,
    fifo_PE7_0_op1_config_out,
    fifo_PE7_0_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE7_0_fifo2_local,
    fifo2_collect6_0,
    fifo2_collect7_0,
    7,
    0,
    fifo_PE7_0_compute_config_out,
    fifo_PE7_0_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_1,
    PE7_1_fifo0_local,
    fifo_PE6_1_res_config_out,
    fifo_PE7_1_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_1,
    fifo1_feed7_2,
    PE7_1_fifo1_local,
    fifo_PE7_1_op0_config_out,
    fifo_PE7_1_op1_config_out
  );

  U1_compute_wrapper(
    PE7_1_fifo0_local,
    PE7_1_fifo1_local,
    PE7_1_fifo2_local,
    fifo_PE7_1_op1_config_out,
    fifo_PE7_1_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE7_1_fifo2_local,
    fifo2_collect6_1,
    fifo2_collect7_1,
    7,
    1,
    fifo_PE7_1_compute_config_out,
    fifo_PE7_1_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_2,
    PE7_2_fifo0_local,
    fifo_PE6_2_res_config_out,
    fifo_PE7_2_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_2,
    fifo1_feed7_3,
    PE7_2_fifo1_local,
    fifo_PE7_2_op0_config_out,
    fifo_PE7_2_op1_config_out
  );

  U1_compute_wrapper(
    PE7_2_fifo0_local,
    PE7_2_fifo1_local,
    PE7_2_fifo2_local,
    fifo_PE7_2_op1_config_out,
    fifo_PE7_2_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE7_2_fifo2_local,
    fifo2_collect6_2,
    fifo2_collect7_2,
    7,
    2,
    fifo_PE7_2_compute_config_out,
    fifo_PE7_2_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_3,
    PE7_3_fifo0_local,
    fifo_PE6_3_res_config_out,
    fifo_PE7_3_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_3,
    fifo1_feed7_4,
    PE7_3_fifo1_local,
    fifo_PE7_3_op0_config_out,
    fifo_PE7_3_op1_config_out
  );

  U1_compute_wrapper(
    PE7_3_fifo0_local,
    PE7_3_fifo1_local,
    PE7_3_fifo2_local,
    fifo_PE7_3_op1_config_out,
    fifo_PE7_3_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE7_3_fifo2_local,
    fifo2_collect6_3,
    fifo2_collect7_3,
    7,
    3,
    fifo_PE7_3_compute_config_out,
    fifo_PE7_3_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_4,
    PE7_4_fifo0_local,
    fifo_PE6_4_res_config_out,
    fifo_PE7_4_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_4,
    fifo1_feed7_5,
    PE7_4_fifo1_local,
    fifo_PE7_4_op0_config_out,
    fifo_PE7_4_op1_config_out
  );

  U1_compute_wrapper(
    PE7_4_fifo0_local,
    PE7_4_fifo1_local,
    PE7_4_fifo2_local,
    fifo_PE7_4_op1_config_out,
    fifo_PE7_4_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE7_4_fifo2_local,
    fifo2_collect6_4,
    fifo2_collect7_4,
    7,
    4,
    fifo_PE7_4_compute_config_out,
    fifo_PE7_4_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_5,
    PE7_5_fifo0_local,
    fifo_PE6_5_res_config_out,
    fifo_PE7_5_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_5,
    fifo1_feed7_6,
    PE7_5_fifo1_local,
    fifo_PE7_5_op0_config_out,
    fifo_PE7_5_op1_config_out
  );

  U1_compute_wrapper(
    PE7_5_fifo0_local,
    PE7_5_fifo1_local,
    PE7_5_fifo2_local,
    fifo_PE7_5_op1_config_out,
    fifo_PE7_5_compute_config_out
  );

  U1_res_transfer_wrapper(
    PE7_5_fifo2_local,
    fifo2_collect6_5,
    fifo2_collect7_5,
    7,
    5,
    fifo_PE7_5_compute_config_out,
    fifo_PE7_5_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_6,
    PE7_6_fifo0_local,
    fifo_PE6_6_res_config_out,
    fifo_PE7_6_op0_config_out
  );

  U1_op1_transfer_wrapper(
    fifo1_feed7_6,
    fifo1_feed7_7,
    PE7_6_fifo1_local,
    fifo_PE7_6_op0_config_out,
    fifo_PE7_6_op1_config_out
  );

  U1_compute_wrapper(
    PE7_6_fifo0_local,
    PE7_6_fifo1_local,
    PE7_6_fifo2_local,
    fifo_PE7_6_op1_config_out,
    fifo_PE7_6_compute_config_out
  );
  // int count = 0;
  // while(!PE7_6_fifo2_local.empty()){
  //   U1_Data2PEChannelType item = PE7_6_fifo2_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_res_transfer_wrapper(
    PE7_6_fifo2_local,
    fifo2_collect6_6,
    fifo2_collect7_6,
    7,
    6,
    fifo_PE7_6_compute_config_out,
    fifo_PE7_6_res_config_out
  );

  U1_op0_transfer_last_wrapper(
    fifo0_feed7_7,
    PE7_7_fifo0_local,
    fifo_PE6_7_res_config_out,
    fifo_PE7_7_op0_config_out
  );

  U1_op1_transfer_last_wrapper(
    fifo1_feed7_7,
    PE7_7_fifo1_local,
    fifo_PE7_7_op0_config_out,
    fifo_PE7_7_op1_config_out
  );
  // int count = 0;
  // while(!PE7_7_fifo0_local.empty()){
  //   U1_Data0PEChannelType item = PE7_7_fifo0_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;

  
  // while(!PE7_7_fifo1_local.empty()){
  //   U1_Data1PEChannelType item = PE7_7_fifo1_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  U1_compute_wrapper(
    PE7_7_fifo0_local,
    PE7_7_fifo1_local,
    PE7_7_fifo2_local,
    fifo_PE7_7_op1_config_out,
    fifo_PE7_7_compute_config_out
  );

  // int count = 0;
  // while(!PE7_7_fifo2_local.empty()){
  //   U1_Data2PEChannelType item = PE7_7_fifo2_local.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  // float arr[128][8];
  // for(int j=0; j<128; j++){
  //   for(int i=0; i<8; i++){
  //     U1_Data2PEChannelType item = PE7_7_fifo2_local.read();
  //     arr[j][i] = item.data;
  //   }
  // }
  // for(int j=0; j<128; j++){
  //   for(int i=0; i<8; i++){
  //     printf("%f\t", arr[j][i]);
  //   }
  //   printf("\n");
  // }
  // return;

  U1_res_transfer_wrapper(
    PE7_7_fifo2_local,
    fifo2_collect6_7,
    fifo2_collect7_7,
    7,
    7,
    fifo_PE7_7_compute_config_out,
    fifo_PE7_7_res_config_out
  );
  cout<<"finished PEs"<<endl;
  // for(int k=0; k<8; k++){
  //   cout<<"---------------iter "<<k<<"-----------------"<<endl;
  //   float arr[64][4];
  //   for(int j=0; j<64; j++){
  //     for(int i=0; i<4; i++){
  //       U1_Data2PEChannelType item = fifo2_collect7_7.read();
  //       arr[j][i] = item.data;
  //     }
  //   }
  //   for(int j=0; j<64; j++){
  //     for(int i=0; i<4; i++){
  //       printf("%f\t", arr[j][i]);
  //     }
  //     printf("\n");
  //   }
  // }
  // cout<<"transfer done!"<<endl;
  // exit(0);
  // int count = 0;
  // while(!fifo2_collect7_7.empty()){
  //   U1_Data2PEChannelType item = fifo2_collect7_7.read();
  //   if(count%8==0) printf("\n");
  //   printf("%10f\t", item.data);
  //   count++;
  // }
  // cout<<endl<<count<<endl;
  // return;
  // for(int k=0; k<8; k++){
  //   float arr[64][8];
  //   printf("-------------PE%d-------------\n", (8-k));
  //   for(int j=0; j<64; j++){
  //     for(int i=0; i<8; i++){
  //       U1_Data2PEChannelType item = fifo2_collect7_7.read();
  //       arr[j][i] = item.data;
  //       // cout<<item.data<<endl;
  //     }
  //   }
  //   for(int j=0; j<64; j++){
  //     for(int i=0; i<8; i++){
  //       printf("%f\t", arr[j][i]);
  //     }
  //     printf("\n");
  //   }
  // }
  // exit(0);
  // for(int k=0; k<8; k++){
  //   float arr[32][4];
  //   printf("-------------PE%d-------------\n", (8-k));
  //   for(int j=0; j<32; j++){
  //     for(int i=0; i<4; i++){
  //       U1_Data2PEChannelType item = fifo2_collect7_7.read();
  //       arr[j][i] = item.data;
  //     }
  //   }
  //   for(int j=0; j<32; j++){
  //     for(int i=0; i<4; i++){
  //       printf("%f\t", arr[j][i]);
  //     }
  //     printf("\n");
  //   }
  // }
  // return;

  U1_DataCollect2EngineLast(
    fifo2_transfer0,
    fifo2_collect7_7,
    7,
    fifo_PE7_7_res_config_out,
    fifo_DataCollect2Engine7_config_out
  );
  cout<<"finished U1_DataCollect2EngineLast"<<endl;
  // int count = 0;
  // while(!fifo2_transfer0.empty()){
  //   U1_Data2TransferChannelType item = fifo2_transfer0.read();
  //       float num[8];
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer0,
    fifo2_transfer1,
    fifo2_collect7_6,
    6,
    fifo_PE7_6_res_config_out,
    fifo_DataCollect2Engine7_config_out,
    fifo_DataCollect2Engine6_config_out
  );
  cout<<"finished U1_DataCollect2Engine0_wrapper"<<endl;
  // int count = 0;
  // while(!fifo2_transfer1.empty()){
  //   U1_Data2TransferChannelType item = fifo2_transfer1.read();
  //       float num[8];
  //       printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer1,
    fifo2_transfer2,
    fifo2_collect7_5,
    5,
    fifo_PE7_5_res_config_out,
    fifo_DataCollect2Engine6_config_out,
    fifo_DataCollect2Engine5_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer2,
    fifo2_transfer3,
    fifo2_collect7_4,
    4,
    fifo_PE7_4_res_config_out,
    fifo_DataCollect2Engine5_config_out,
    fifo_DataCollect2Engine4_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer3,
    fifo2_transfer4,
    fifo2_collect7_3,
    3,
    fifo_PE7_3_res_config_out,
    fifo_DataCollect2Engine4_config_out,
    fifo_DataCollect2Engine3_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer4,
    fifo2_transfer5,
    fifo2_collect7_2,
    2,
    fifo_PE7_2_res_config_out,
    fifo_DataCollect2Engine3_config_out,
    fifo_DataCollect2Engine2_config_out
  );

  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer5,
    fifo2_transfer6,
    fifo2_collect7_1,
    1,
    fifo_PE7_1_res_config_out,
    fifo_DataCollect2Engine2_config_out,
    fifo_DataCollect2Engine1_config_out
  );
  // int count = 0;
  // while(!fifo2_collect7_0.empty()){
  //   fifo2_collect7_0.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataCollect2Engine0_wrapper(
    fifo2_transfer6,
    fifo2_transfer7,
    fifo2_collect7_0,
    0,
    fifo_PE7_0_res_config_out,
    fifo_DataCollect2Engine1_config_out,
    fifo_DataCollect2Engine0_config_out
  );
  cout<<"finished U1_DataCollect2Engine0_wrapper"<<endl;
  // int count = 0;
  // while(!fifo2_transfer7.empty()){
  //   U1_Data2TransferChannelType item = fifo2_transfer7.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // return;
  U1_DataCollect2Head(
    fifo_cout,
    fifo2_transfer7,
    fifo_DataCollect2Engine0_config_out
  );
  cout<<"finished U1_DataCollect2Head"<<endl;
  // int count = 0;
  // while(!fifo_cout.empty()){
  //   U1_Data2TransferChannelType item = fifo_cout.read();
  //       float num[8];
  //       // printf("output: ");
  //       for(int i=0; i<8; i++){
  //         num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
  //         printf("%10f\t", num[i]);
  //       }
  //       printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);



}
#include "util.h"

/**
 * Function list: 
 * cin_load
 * weight_load
 * inter_load
 * depth_conv
 * conv
 * relu (with batch normalization)
 * relu6 (with batch normalization)
 * add
 * maxpool
 * upsample - bilinear
 * inter_write
 * cout_write
 * engine
 */

/*
 * Function name: cin_load_ddr_read
 * Function description: This function loads cin results from off-chip DRAM.
 *                       Two modes are enabled. If the whole feature maps of the layer could fit
 *                       in the on-chip buffer, they will be loaded as a whole. Otherwise, each time,
 *                       LAYER_IN_NUM_T * (LAYER_IN_W_T + FILTER_S - 1) of data are loaded.
 */
void cin_load_ddr_read(
		bus_t0  *global_cin,
		bus_t0  cin_burst_buf[],
		uint    LAYER_IN_H_HW,
		uint    LAYER_IN_W_HW,
		uint    LAYER_IN_NUM_T,
		uint    LAYER_IN_H_T,
		uint    LAYER_IN_W_T,
		uint    FILTER_S,
    uint    FILTER_D,
		uint    cin_offset,
		uint    in_num_iter,
		uint    in_h_iter,
		uint    in_w_iter,
		uint    num_tile,
		bool    change,
		bool    max_pool,
		bool    write
){
  // for(int i=0; i<145; i++){
  //   print<512>(global_cin[i]);
  // }
  // exit(0);
	if ((LAYER_IN_H_HW <= IN_H_T + K_T - 1) && (LAYER_IN_W_HW <= IN_W_T + K_T - 1) && !max_pool){
		// Load the patch as a whole if it fits in on-chip buffer.
		uint global_cin_offset = in_num_iter * LAYER_IN_H_HW * LAYER_IN_W_HW + cin_offset;
		memcpy((void*)cin_burst_buf, (void*)&global_cin[global_cin_offset / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_NUM_T * LAYER_IN_H_HW * LAYER_IN_W_HW);
	} else {
		// Read the data based on the data layout used.
		// If filter size is 1, the data layout is ceil(N / Tn) * ceil(H / Th) * ceil(W / Tw) * Th * Tw * Tn
		// o.w. ceil(N / Tn) * H * ceil(W / Tw) * Tw * Tn
		// The data in on-chip buffer will have the data layout of Th * Tw * Tn
		if (change && FILTER_S == 1){
      // cout<<num_tile<<" "<<num_tile * (LAYER_IN_W_T) * (LAYER_IN_H_T) * LAYER_IN_NUM_T<<" "<<sizeof(data_t0) * LAYER_IN_NUM_T * (LAYER_IN_W_T) * (LAYER_IN_H_T)<<endl;
      // cout<<"change layout"<<endl;
			for (int hh = 0; hh < /*LAYER_IN_H_T + FILTER_S - */1; hh++){
				uint local_cin_offset = 0;
				uint global_cin_offset = cin_offset + num_tile * (LAYER_IN_W_T) * (LAYER_IN_H_T) * LAYER_IN_NUM_T;
#ifdef DEBUG_cin
				if(write)
					cout << global_cin_offset << endl;
#endif
				memcpy((void*)&cin_burst_buf[local_cin_offset / BUS_PACK_FACTOR0], (void*)&global_cin[global_cin_offset / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_NUM_T * (LAYER_IN_W_T) * (LAYER_IN_H_T));

			}
		} else {
			for (int hh = 0; hh < LAYER_IN_H_T + FILTER_S - 1; hh++){//change this
				uint h = in_h_iter + hh;
				uint local_cin_offset = hh * (LAYER_IN_W_T + FILTER_D - 1) * LAYER_IN_NUM_T;//change this
				uint global_cin_offset = in_num_iter * LAYER_IN_H_HW * LAYER_IN_W_HW + h * LAYER_IN_W_HW * LAYER_IN_NUM_T + in_w_iter * LAYER_IN_NUM_T + cin_offset;
        // cout<<in_num_iter<<" "<<in_h_iter<<" "<<in_w_iter<<" "<<endl;
#ifdef DEBUG_cin
				if(write)
					cout << global_cin_offset << endl;
#endif
        // cout<<h<<endl;
        // uint burstNum = (sizeof(data_t0) * LAYER_IN_NUM_T * (LAYER_IN_W_T + FILTER_S - 1)/64) + 1; //this may need a fix
        // memcpy((void*)&cin_burst_buf[local_cin_offset / BUS_PACK_FACTOR0], (void*)&global_cin[global_cin_offset / BUS_PACK_FACTOR0], burstNum*64);
        memcpy((void*)&cin_burst_buf[local_cin_offset / BUS_PACK_FACTOR0], (void*)&global_cin[global_cin_offset / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_NUM_T * (LAYER_IN_W_T + FILTER_D - 1));
        // cout<<num_tile<<" "<<local_cin_offset<<" "<<global_cin_offset<<" "<<local_cin_offset / BUS_PACK_FACTOR0<<" "<<global_cin_offset  / BUS_PACK_FACTOR0<<" "<<sizeof(data_t0) * LAYER_IN_NUM_T * (LAYER_IN_W_T + 3 - 1)<<endl;
        // cout<<local_cin_offset<<" "<<global_cin_offset<<" "<<global_cin_offset / BUS_PACK_FACTOR0<<endl;
        // for(int i=0; i<5; i++)
        //   print<512>(cin_burst_buf[i]);
        // cout<<"global"<<endl;
        // for(int i=0; i<5; i++)
        //   print<512>(global_cin[local_cin_offset / BUS_PACK_FACTOR0 + i]);
        
			}
      // for(int j=0; j<9; j++)
      //   for(int i=0; i<5; i++)
      //       print<512>(cin_burst_buf[j*5+i]);
		}

	}
}

/*
 * Function name: cin_load_fifo_write
 * Function description: This function writes cin data to the downstream modules.
 */
void cin_load_fifo_write(
		bus_t0                         cin_burst_buf[],
		hls::stream<CinLoadData0Type>  &fifo_cin,
		uint                           LAYER_IN_NUM_T,
		uint                           LAYER_IN_H_T,
		uint                           LAYER_IN_W_T,
		uint                           FILTER_S,
    uint                           FILTER_D
){
	int ii = 0;
	int hh = 0;
	int ww = 0;
	bool done = 0;
  // cout<<LAYER_IN_NUM_T<<" "<<LAYER_IN_H_T<<" "<<LAYER_IN_W_T<<" "<<FILTER_S<<endl;
	while(!done){
#pragma HLS PIPELINE II=1
    // cout<<LAYER_IN_NUM_T<<" "<<LAYER_IN_H_T<<" "<<LAYER_IN_W_T<<" "<<FILTER_S<<endl;
// Data layout of the buffer: Th * Tw * Tn
		uint local_cin_idx = hh * (LAYER_IN_W_T + FILTER_D - 1) * LAYER_IN_NUM_T + ww * LAYER_IN_NUM_T + ii * DEPTH_CONV_LANE;
		uint bus_cin_idx = local_cin_idx / BUS_PACK_FACTOR0;
		uint bus_cin_offset = local_cin_idx % BUS_PACK_FACTOR0;
		bus_t0 bus_cin_data = cin_burst_buf[bus_cin_idx];
		CinLoadData0Type fifo_cin_data;
    // cout<<bus_cin_idx<<endl;
// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
// Since each entry in FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
#if DATA_SEL_FACTOR0 == 1
		fifo_cin_data = bus_cin_data;
#elif DATA_SEL_FACTOR0 == 2 
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		}
#elif DATA_SEL_FACTOR0 == 4
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		}
#elif DATA_SEL_FACTOR0 == 8
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		case 4:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 5 - 1, DATA_W0 * DEPTH_CONV_LANE * 4);
			break;
		case 5:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 6 - 1, DATA_W0 * DEPTH_CONV_LANE * 5);
			break;
		case 6:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 7 - 1, DATA_W0 * DEPTH_CONV_LANE * 6);
			break;
		case 7:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 8 - 1, DATA_W0 * DEPTH_CONV_LANE * 7);
			break;
		}
#elif DATA_SEL_FACTOR0 == 16
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		case 4:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 5 - 1, DATA_W0 * DEPTH_CONV_LANE * 4);
			break;
		case 5:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 6 - 1, DATA_W0 * DEPTH_CONV_LANE * 5);
			break;
		case 6:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 7 - 1, DATA_W0 * DEPTH_CONV_LANE * 6);
			break;
		case 7:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 8 - 1, DATA_W0 * DEPTH_CONV_LANE * 7);
			break;
		case 8:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 9 - 1, DATA_W0 * DEPTH_CONV_LANE * 8);
			break;
		case 9:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 10 - 1, DATA_W0 * DEPTH_CONV_LANE * 9);
			break;
		case 10:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 11 - 1, DATA_W0 * DEPTH_CONV_LANE * 10);
			break;
		case 11:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 12 - 1, DATA_W0 * DEPTH_CONV_LANE * 11);
			break;
		case 12:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 13 - 1, DATA_W0 * DEPTH_CONV_LANE * 12);
			break;
		case 13:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 14 - 1, DATA_W0 * DEPTH_CONV_LANE * 13);
			break;
		case 14:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 15 - 1, DATA_W0 * DEPTH_CONV_LANE * 14);
			break;
		case 15:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 16 - 1, DATA_W0 * DEPTH_CONV_LANE * 15);
			break;
		}
#endif            
		fifo_cin.write(fifo_cin_data);
		// count++;
		// cout<<count<<endl;
#ifdef DEBUG_load_change
		if(FILTER_S == 1){
			cout << " cin ";
			for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
				ap_uint<DATA_W0> u32_beta = fifo_cin_data(DATA_W0 - 1, 0);
				data_t2 a = Reinterpret<data_t2>(u32_beta);
				fifo_cin_data = fifo_cin_data >> DATA_W0;
				cout << a << " ";
			}
			cout << endl;
		}
#endif

		// Repeat until the whole tile is read
		ww++;
		if (ww == LAYER_IN_W_T + FILTER_S - 1){//change here
			ww = 0;
			hh++;
			if (hh == LAYER_IN_H_T + FILTER_S - 1){//change here
				hh = 0;
				ii++;
				if (ii == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
					ii = 0;
					done = 1;
				}
			}
		}
	}

}

/*
 * Function name: cin_load_fifo_write_prev
 * Function description: This function writes cin data to the downstream modules.
 * It has the same functionality as cin_load_fifo_write
 */
void cin_load_fifo_write_prev(
		bus_t0                         cin_burst_buf[],
		hls::stream<CinLoadData0Type>  &fifo_cin,
		uint                           LAYER_IN_NUM_T,
		uint                           LAYER_IN_H_T,
		uint                           LAYER_IN_W_T,
		uint                           FILTER_S
){
	int ii = 0;
	int hh = 0;
	int ww = 0;
	bool done = 0;
	uint count = 0;
  
	while(!done){
    
#pragma HLS PIPELINE II=1
// Data layout of the buffer: Th * Tw * Tn
		uint local_cin_idx = hh * (LAYER_IN_W_T + FILTER_S - 1) * LAYER_IN_NUM_T + ww * LAYER_IN_NUM_T + ii * DEPTH_CONV_LANE;
		uint bus_cin_idx = local_cin_idx / BUS_PACK_FACTOR0;
		uint bus_cin_offset = local_cin_idx % BUS_PACK_FACTOR0;
		bus_t0 bus_cin_data = cin_burst_buf[bus_cin_idx];
		CinLoadData0Type fifo_cin_data;

// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
// Since each entry is FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
#if DATA_SEL_FACTOR0 == 1
		fifo_cin_data = bus_cin_data;
#elif DATA_SEL_FACTOR0 == 2 
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		}
#elif DATA_SEL_FACTOR0 == 4
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		}
#elif DATA_SEL_FACTOR0 == 8
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		case 4:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 5 - 1, DATA_W0 * DEPTH_CONV_LANE * 4);
			break;
		case 5:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 6 - 1, DATA_W0 * DEPTH_CONV_LANE * 5);
			break;
		case 6:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 7 - 1, DATA_W0 * DEPTH_CONV_LANE * 6);
			break;
		case 7:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 8 - 1, DATA_W0 * DEPTH_CONV_LANE * 7);
			break;
		}
#elif DATA_SEL_FACTOR0 == 16
		switch(bus_cin_offset / DEPTH_CONV_LANE){
		case 0:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 1 - 1, DATA_W0 * DEPTH_CONV_LANE * 0);
			break;
		case 1:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 2 - 1, DATA_W0 * DEPTH_CONV_LANE * 1);
			break;
		case 2:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 3 - 1, DATA_W0 * DEPTH_CONV_LANE * 2);
			break;
		case 3:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 4 - 1, DATA_W0 * DEPTH_CONV_LANE * 3);
			break;
		case 4:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 5 - 1, DATA_W0 * DEPTH_CONV_LANE * 4);
			break;
		case 5:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 6 - 1, DATA_W0 * DEPTH_CONV_LANE * 5);
			break;
		case 6:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 7 - 1, DATA_W0 * DEPTH_CONV_LANE * 6);
			break;
		case 7:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 8 - 1, DATA_W0 * DEPTH_CONV_LANE * 7);
			break;
		case 8:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 9 - 1, DATA_W0 * DEPTH_CONV_LANE * 8);
			break;
		case 9:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 10 - 1, DATA_W0 * DEPTH_CONV_LANE * 9);
			break;
		case 10:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 11 - 1, DATA_W0 * DEPTH_CONV_LANE * 10);
			break;
		case 11:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 12 - 1, DATA_W0 * DEPTH_CONV_LANE * 11);
			break;
		case 12:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 13 - 1, DATA_W0 * DEPTH_CONV_LANE * 12);
			break;
		case 13:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 14 - 1, DATA_W0 * DEPTH_CONV_LANE * 13);
			break;
		case 14:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 15 - 1, DATA_W0 * DEPTH_CONV_LANE * 14);
			break;
		case 15:
			fifo_cin_data = bus_cin_data(DATA_W0 * DEPTH_CONV_LANE * 16 - 1, DATA_W0 * DEPTH_CONV_LANE * 15);
			break;
		}
#endif            
		fifo_cin.write(fifo_cin_data);
#ifdef DEBUG_load_prev
		for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
			ap_uint<DATA_W0> u32_beta = fifo_cin_data(DATA_W0 - 1, 0);
			data_t2 a = Reinterpret<data_t2>(u32_beta);
			fifo_cin_data = fifo_cin_data >> DATA_W0;
			cout << a << " ";
		}
		cout << endl;
#endif
		
		// Repeat until the whole tile is read
		ww++;
		if (ww == LAYER_IN_W_T + FILTER_S - 1){
			ww = 0;
			hh++;
			if (hh == LAYER_IN_H_T + FILTER_S - 1){
				hh = 0;
				ii++;
				if (ii == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
					ii = 0;
					done = 1;
				}
			}
		}
	}

}

/*
 * Function name: cin_load
 * Function description: This function loads and distributes cin and instructions.
 */
void cin_load(
		bus_t0                         *global_cin,
		uint                           config[CONFIG_PARAMS],
		hls::stream<CinLoadData0Type>  &fifo_cin,
		hls::stream<ConfigInst>        &fifo_config_out
){
#pragma HLS INLINE off 
	// on-chip buffer for cin data
	 bus_t0 cin_burst_buf_ping[IN_NUM_T * (IN_H_T + K_T - 1) * (IN_W_T + K_T - 1) / BUS_PACK_FACTOR0];
	 bus_t0 cin_burst_buf_pong[IN_NUM_T * (IN_H_T + K_T - 1) * (IN_W_T + K_T - 1) / BUS_PACK_FACTOR0];
#pragma HLS RESOURCE variable=cin_burst_buf_ping core=XPM_MEMORY uram
#pragma HLS RESOURCE variable=cin_burst_buf_pong core=XPM_MEMORY uram  



	// layer batch
	ap_uint<32> LAYER_BATCH = config[25];

	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	uint in_num_iter_prev = 0;
	uint out_num_iter_prev = 0;
	uint in_h_iter_prev = 0;
	uint in_w_iter_prev = 0;
	uint layer_iter_prev = 0;

	// parameters
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW;
	ap_uint<32> LAYER_OUT_NUM_HW;
	ap_uint<32> LAYER_IN_H_HW;
	ap_uint<32> LAYER_IN_W_HW;
	ap_uint<32> LAYER_OUT_H_HW;
	ap_uint<32> LAYER_OUT_W_HW;
	// inst1
	ap_uint<32> LAYER_IN_NUM;
	ap_uint<32> LAYER_OUT_NUM;
	ap_uint<32> LAYER_IN_H;
	ap_uint<32> LAYER_IN_W;
	ap_uint<32> LAYER_OUT_H;
	ap_uint<32> LAYER_OUT_W;
	// inst2
	ap_uint<32> CIN_OFFSET;
	ap_uint<32> WEIGHT_OFFSET;
	ap_uint<32> BIAS_OFFSET;
	ap_uint<32> COUT_OFFSET;
	ap_uint<16> FILTER_S1;
	ap_uint<16> FILTER_S2;
	ap_uint<32> STRIDE;
	// inst3
	ap_uint<32> LAYER_EN;
	ap_uint<16> LAYER_IN_NUM_T;
	ap_uint<16> LAYER_OUT_NUM_T;
	ap_uint<32> LAYER_IN_H_T;
	ap_uint<32> LAYER_IN_W_T;
	ap_uint<32> PREV_CIN_OFFSET;
	// inst4
	ap_uint<32> LAYER_TASK_NUM1;
	ap_uint<32> LAYER_TASK_NUM2;
	ap_uint<32> LAYER_LOCAL_ACCUM_NUM;
	ap_uint<32> LAYER_LOCAL_REG_NUM;
	ap_uint<32> LAYER_ROW_IL_FACTOR;
	ap_uint<32> LAYER_COL_IL_FACTOR;
	//inst5
	ap_uint<32> LAYER_CONV_TYPE;
	ap_uint<16> FILTER_D0;
	ap_uint<16> FILTER_D1;
	ap_uint<32> LAYER_DILATION_RATE;
	ap_uint<32> LAYER_TCONV_STRIDE;
	ap_uint<32> K_NUM;
	ap_uint<32> KH_KW;

	ap_uint<4>  FILTER;

	ap_uint<1>  CONV_1ST_EN;
	ap_uint<1>  LOAD_PREV_CIN;

	uint LAYER_IN_NUM_T_prev;
	uint LAYER_OUT_NUM_T_prev;
	uint LAYER_IN_H_T_prev;
	uint LAYER_IN_W_T_prev;
	uint FILTER_S_prev;
  uint FILTER_D_prev;
	

	uint task_cnt = 0;
	bool layer_start = 1;
	bool layer_start_prev = 0;
	bool done = 0;
	// We assum that cin has been pre-padded with zeros
	uint prev = 0;
	uint init = 1;
	uint num_tile = 0;
	bool write_last_cin = 0;
	bool write_last_prev_cin = 0;
	bool start_prev = 0;
	bool done_prev = 0;
	bool change_layout = 0;
	uint inter_tile = 0;
	uint channel_iter = 0;
  int count_fifo = 0;
  int count_dram = 0;
  int count = 0;
	while(!done){
		// Read and extract the parameters/config from the instructions
		// Refer to util.h or the README of the repo to find how the instructions are made
		// inst0 : The hardware sizes of each dimension (the sizes after tiling is applied)
		LAYER_IN_NUM_HW  = config[0 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_NUM_HW = config[1 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_H_HW    = config[2 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_W_HW    = config[3 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_H_HW   = config[4 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_W_HW   = config[5 + layer_iter * CONFIG_PARAMS];

		// inst1 : The actual sizes of each dimension
		LAYER_IN_NUM  = config[6 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_NUM = config[7 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_H    = config[8 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_W    = config[9 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_H   = config[10 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_W   = config[11 + layer_iter * CONFIG_PARAMS];

		// inst2 : The DRAM locations for reading/writing the data of this layer + Filter and Stride sizes
		CIN_OFFSET    = config[12 + layer_iter * CONFIG_PARAMS];
		WEIGHT_OFFSET = config[13 + layer_iter * CONFIG_PARAMS];
		BIAS_OFFSET   = config[14 + layer_iter * CONFIG_PARAMS];
		COUT_OFFSET   = config[15 + layer_iter * CONFIG_PARAMS];
		FILTER_S1     = config[16 + layer_iter * CONFIG_PARAMS];
		FILTER_S2     = config[17 + layer_iter * CONFIG_PARAMS];
		STRIDE        = config[18 + layer_iter * CONFIG_PARAMS];

		// inst3 : The enable signlas of the modules + DRAM location of the input to the previous layer + Tile sizes
		LAYER_EN        = config[19 + layer_iter * CONFIG_PARAMS]; // contains the enable signals for the modules
		PREV_CIN_OFFSET = config[20 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_NUM_T  = config[21 + layer_iter * CONFIG_PARAMS];
		LAYER_OUT_NUM_T = config[22 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_H_T    = config[23 + layer_iter * CONFIG_PARAMS];
		LAYER_IN_W_T    = config[24 + layer_iter * CONFIG_PARAMS];

		CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  INTER_LOAD_EN  = LAYER_EN[8];
		ap_uint<1>  INTER_WRITE_EN = LAYER_EN[9];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
		ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];


		LOAD_PREV_CIN  = LAYER_EN[11];

		// inst4 : The info needed to run the systolic array
		LAYER_TASK_NUM1       = config[26 + layer_iter * CONFIG_PARAMS];
		LAYER_TASK_NUM2       = config[27 + layer_iter * CONFIG_PARAMS];
		LAYER_LOCAL_ACCUM_NUM = config[28 + layer_iter * CONFIG_PARAMS];
		LAYER_LOCAL_REG_NUM   = config[29 + layer_iter * CONFIG_PARAMS];
		LAYER_ROW_IL_FACTOR   = config[30 + layer_iter * CONFIG_PARAMS];
		LAYER_COL_IL_FACTOR   = config[31 + layer_iter * CONFIG_PARAMS];
		// inst5 : DT CONV INSTS
		LAYER_CONV_TYPE         = config[32 + layer_iter * CONFIG_PARAMS];
		FILTER_D0								= config[33 + layer_iter * CONFIG_PARAMS];
		FILTER_D1								= config[34 + layer_iter * CONFIG_PARAMS];
		LAYER_DILATION_RATE			= config[35 + layer_iter * CONFIG_PARAMS];
		LAYER_TCONV_STRIDE  		= config[36 + layer_iter * CONFIG_PARAMS];
		K_NUM               		= config[37 + layer_iter * CONFIG_PARAMS];
		KH_KW               		= config[38 + layer_iter * CONFIG_PARAMS];
    // cout<<LAYER_CONV_TYPE<<" "<<FILTER_D0<<" "<<FILTER_D1<<" "<<LAYER_DILATION_RATE<<" "<<LAYER_TCONV_STRIDE<<" "<<K_NUM<<" "<<KH_KW<<endl;
// #define DEBUG_config_cin
#ifdef DEBUG_config_cin
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif
		
		// Pack the parameters to pass them throught the config FIFOs
		ConfigInst inst0 = (LAYER_OUT_W_HW, LAYER_OUT_H_HW, LAYER_IN_W_HW, LAYER_IN_H_HW, LAYER_OUT_NUM_HW, LAYER_IN_NUM_HW);
		ConfigInst inst1 = (LAYER_OUT_W, LAYER_OUT_H, LAYER_IN_W, LAYER_IN_H, LAYER_OUT_NUM, LAYER_IN_NUM);
		ConfigInst inst2 = (STRIDE, FILTER_S2, FILTER_S1, COUT_OFFSET, BIAS_OFFSET, WEIGHT_OFFSET, CIN_OFFSET);
		ConfigInst inst3 = (LAYER_BATCH, LAYER_IN_W_T, LAYER_IN_H_T, LAYER_OUT_NUM_T, LAYER_IN_NUM_T, PREV_CIN_OFFSET, LAYER_EN);
		ConfigInst inst4 = (LAYER_COL_IL_FACTOR, LAYER_ROW_IL_FACTOR, LAYER_LOCAL_REG_NUM, LAYER_LOCAL_ACCUM_NUM, LAYER_TASK_NUM2, LAYER_TASK_NUM1);
		ConfigInst inst5 = (LAYER_CONV_TYPE, FILTER_D0, FILTER_D1, LAYER_DILATION_RATE, LAYER_TCONV_STRIDE, K_NUM, KH_KW);
		// Pass the config/instructions
		if (layer_start){
			fifo_config_out.write(inst0);
			fifo_config_out.write(inst1);
			fifo_config_out.write(inst2);
			fifo_config_out.write(inst3);
			fifo_config_out.write(inst4);
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

		// offsets
		uint cin_offset = CIN_OFFSET;
		uint prev_cin_offset = PREV_CIN_OFFSET;
		// FILTER = (LAYER_CONV_TYPE == 1)? (ap_uint<4>)(KH_KW>>28) : (ap_uint<4>) FILTER_S2;
    // FILTER = 3;
		if (prev == 1) start_prev = 1;
    
		// set up some configuration signals
		uint FILTER_S = (DEPTH_CONV_EN == 1)? (uint)FILTER_S1: ((CONV_EN == 1)? ((LAYER_CONV_TYPE == 1)? (uint)FILTER_D0 : (uint)FILTER_S2) : 1);
    uint FILTER_D = (LAYER_CONV_TYPE == 1)? (uint)FILTER_D1 : (uint)FILTER_S2;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		change_layout = (((LAYER_IN_W_HW == LAYER_IN_W) || (LAYER_IN_W_HW == LAYER_IN_W_T)) && ((LAYER_IN_H_HW == LAYER_IN_H) || (LAYER_IN_H_HW == LAYER_IN_H_T))); // if next filter = 1 : change the layout to num_tile, Th, Tw, Tn

		// If it has to read from DRAM and not the stored data in on-chip storage
		if (INTER_LOAD_EN == 0){
			if ((max_pool && out_num_iter == 0) || separable_conv || conv2d || (UP_SAMPLE_EN && out_num_iter == 0)){
				if (task_cnt == 0){
					// first load cin
					cin_load_ddr_read(global_cin, cin_burst_buf_ping, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S, FILTER_D, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
          count_dram++;
          // for(int i=0; i<550; i++){
          //   for(int j=0; j<16; j++)
          //   cout<<Reinterpret<data_t2>((ap_uint<32>)cin_burst_buf_ping[i]((j+1)*32-1, 32*j))<<endl;
          // }
          // for(int i=0; i<8; i++){
		// 		num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
		// 		fprintf(f, "%10f\t", num[i]);
		// 	}
          // exit(0);
        } else {
					// Apply double buffering for reading the data and filling the FIFO
					if (task_cnt % 2 == 1){
						cin_load_ddr_read(global_cin, cin_burst_buf_pong, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S, FILTER_D, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
						cin_load_fifo_write(cin_burst_buf_ping, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_prev, FILTER_D_prev);
            count_fifo++;
            count_dram++;
            // int count = 0;
            // while(!fifo_cin.empty()){
            //   ConvData0Type item = fifo_cin.read();
            //   count++;
            // }
            // cout<<count<<endl;
            // exit(0);
					} else {
						cin_load_ddr_read(global_cin, cin_burst_buf_ping, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S, FILTER_D, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
						cin_load_fifo_write(cin_burst_buf_pong, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_prev, FILTER_D_prev);
            count_fifo++;
            count_dram++;
					}
				}

				task_cnt++;
				LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
				LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
				LAYER_IN_H_T_prev = LAYER_IN_H_T;
				LAYER_IN_W_T_prev = LAYER_IN_W_T;
				FILTER_S_prev = FILTER_S;
        FILTER_D_prev = FILTER_D;
			}
		}

		// Continue until all the tiles are read
		// Since each layer produces LAYER_OUT_NUM feature maps, 
		// repeat reading the tiles LAYER_OUT_NUM times
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter < LAYER_IN_NUM){
			channel_iter += ((LAYER_IN_W / LAYER_IN_W_T) * (LAYER_IN_H / LAYER_IN_H_T));
		} else {
			channel_iter = 0;
			inter_tile++;
		}
    // num_tile++;

		num_tile = conv2d==1? channel_iter + inter_tile : num_tile + 1;
    // cout<<in_num_iter<<" "<<num_tile<<endl;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			channel_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T; //tweak
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					num_tile = 0;
					inter_tile = 0;
					channel_iter = 0;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						prev = 0;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							out_num_iter = 0;
							in_h_iter = 0;
							in_w_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}


	// Fill the FIFOs with the data for the last tile
	if (task_cnt % 2 == 1){
		cin_load_fifo_write(cin_burst_buf_ping, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_prev, FILTER_D_prev);
    count_fifo++;
	} else {
		cin_load_fifo_write(cin_burst_buf_pong, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_S_prev, FILTER_D_prev);
    count_fifo++;
	}
  // cout<<"count_dram: "<<count_dram<<endl;
  // cout<<"count_fifo: "<<count_fifo<<endl;
  // exit(0);
}

/*
 * Function name: cin_load
 * Function description: This function loads and distributes cin to the previous layer and instructions.
 */
// void cin_load_prev(
// 		bus_t0                         *global_cin,
// 		hls::stream<ConfigInst>        &fifo_config_in,
// 		hls::stream<CinLoadData0Type>  &fifo_cin_prev,
// 		hls::stream<ConfigInst>        &fifo_config_out
// ){
// #pragma HLS INLINE off 
// 	// on-chip buffer for cin data
// 	bus_t0 prev_cin_burst_buf_ping[OUT_NUM_T * (IN_H_T + K_T - 1) * (IN_W_T + K_T - 1) / BUS_PACK_FACTOR0];
// 	bus_t0 prev_cin_burst_buf_pong[OUT_NUM_T * (IN_H_T + K_T - 1) * (IN_W_T + K_T - 1) / BUS_PACK_FACTOR0];
// #pragma HLS RESOURCE variable=prev_cin_burst_buf_ping core=XPM_MEMORY uram
// #pragma HLS RESOURCE variable=prev_cin_burst_buf_pong core=XPM_MEMORY uram  



// 	// tiling iterators
// 	uint in_num_iter = 0;
// 	uint out_num_iter = 0;
// 	uint in_h_iter = 0;
// 	uint in_w_iter = 0;
// 	uint layer_iter = 0;

// 	uint in_num_iter_prev = 0;
// 	uint out_num_iter_prev = 0;
// 	uint in_h_iter_prev = 0;
// 	uint in_w_iter_prev = 0;
// 	uint layer_iter_prev = 0;


// 	uint LAYER_IN_NUM_T_prev;
// 	uint LAYER_OUT_NUM_T_prev;
// 	uint LAYER_IN_H_T_prev;
// 	uint LAYER_IN_W_T_prev;
// 	uint FILTER_S_prev;

// 	ConfigInst inst0 = fifo_config_in.read();
// 	fifo_config_out.write(inst0);
// 	ConfigInst inst1 = fifo_config_in.read();
// 	fifo_config_out.write(inst1);
// 	ConfigInst inst2 = fifo_config_in.read();
// 	fifo_config_out.write(inst2);
// 	ConfigInst inst3 = fifo_config_in.read();
// 	fifo_config_out.write(inst3);
// 	ConfigInst inst4 = fifo_config_in.read();
// 	fifo_config_out.write(inst4);

// 	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);
// 	ap_uint<1>  LOAD_PREV_CIN = 0;


// 	uint task_cnt = 0;
// 	bool layer_start = 0;
// 	bool layer_start_prev = 0;
// 	bool done = 0;
// 	// We assum that cin has been pre-padded with zeros
// 	uint prev = 0;
// 	uint init = 1;
// 	uint num_tile = 0;
// 	bool write_last_cin = 0;
// 	bool write_last_prev_cin = 0;
// 	bool start_prev = 0;
// 	bool done_prev = 0;
// 	bool change_layout = 0;
// 	//uint prev_iter = 0;
// 	while(!done_prev){

// 		if (layer_start){
// 			inst0 = fifo_config_in.read();
// 			fifo_config_out.write(inst0);
// 			inst1 = fifo_config_in.read();
// 			fifo_config_out.write(inst1);
// 			inst2 = fifo_config_in.read();
// 			fifo_config_out.write(inst2);
// 			inst3 = fifo_config_in.read();
// 			fifo_config_out.write(inst3);
// 			inst4 = fifo_config_in.read();
// 			fifo_config_out.write(inst4);
// 			layer_start = 0;
// 		}

// 		// Refer to cin_load module to understand the meaning of the instructions
// 		// inst0
// 		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
// 		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
// 		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
// 		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
// 		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
// 		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
// 		// inst1
// 		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
// 		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
// 		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
// 		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
// 		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
// 		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
// 		// inst2
// 		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
// 		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
// 		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
// 		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
// 		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
// 		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
// 		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
// 		// inst3
// 		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
// 		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
// 		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
// 		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
// 		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
// 		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

// 		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
// 		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
// 		ap_uint<1>  CONV_EN        = LAYER_EN[2];
// 		ap_uint<1>  RELU_EN        = LAYER_EN[3];
// 		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
// 		ap_uint<1>  POOL_EN        = LAYER_EN[5];
// 		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
// 		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
// 		ap_uint<1>  INTER_LOAD_EN  = LAYER_EN[8];
// 		ap_uint<1>  INTER_WRITE_EN = LAYER_EN[9];
// 		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
// 		LOAD_PREV_CIN  = LAYER_EN[11];


// #ifdef DEBUG_config_cin
// 		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
// 		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
// 		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
// 		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
// #endif


// 		// offsets
// 		uint cin_offset = CIN_OFFSET;
// 		uint prev_cin_offset = PREV_CIN_OFFSET;

// 		if (prev == 1) start_prev = 1;

// 		// set up some configuration signals
// 		uint FILTER_S = (DEPTH_CONV_EN == 1)? (uint)FILTER_S1: ((CONV_EN == 1)? (uint)FILTER_S2: 1);
// 		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
// 		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
// 		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
// 		change_layout = (((LAYER_OUT_W_HW == LAYER_OUT_W) || (LAYER_OUT_W_HW == LAYER_IN_W_T)) && ((LAYER_OUT_H_HW == LAYER_OUT_H) || (LAYER_OUT_H_HW == LAYER_IN_H_T))); // if next filter = 1 : change the layout to num_tile, h_t, w_t, in_t
//     uint layer_out_h = (LAYER_IN_H_T > LAYER_OUT_H) ? LAYER_IN_H_T : LAYER_OUT_H;
//     uint layer_out_w = (LAYER_IN_W_T > LAYER_OUT_W) ? LAYER_IN_W_T : LAYER_OUT_W;

// 		if (INTER_LOAD_EN == 0){
// 			if (((max_pool || UP_SAMPLE_EN) && out_num_iter_prev == 0) || separable_conv || conv2d){
// 				if (task_cnt == 0){
// 					// First load previous cin
// 					// Load only if the enable signal for this module is on
// 					if(LOAD_PREV_CIN == 1){
// 						cin_load_ddr_read(global_cin, prev_cin_burst_buf_ping, layer_out_h, layer_out_w, LAYER_OUT_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, 1, prev_cin_offset, out_num_iter_prev, in_h_iter_prev, in_w_iter_prev, num_tile, change_layout, max_pool, 1);
// 					} 
// 				} else {
// 					// Apply double buffering for reading the data and filling the FIFO
// 					// Load only if the enable signal for this module is on
// 					if(LOAD_PREV_CIN == 1){
// 						if (task_cnt % 2 == 1){
// 							cin_load_ddr_read(global_cin, prev_cin_burst_buf_pong, layer_out_h, layer_out_w, LAYER_OUT_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, 1, prev_cin_offset, out_num_iter_prev, in_h_iter_prev, in_w_iter_prev, num_tile, change_layout, max_pool, 1);
// 							cin_load_fifo_write_prev(prev_cin_burst_buf_ping, fifo_cin_prev, LAYER_OUT_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, 1);
// 						} else {
// 							cin_load_ddr_read(global_cin, prev_cin_burst_buf_ping, layer_out_h, layer_out_w, LAYER_OUT_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, 1, prev_cin_offset, out_num_iter_prev, in_h_iter_prev, in_w_iter_prev, num_tile, change_layout, max_pool, 1);
// 							cin_load_fifo_write_prev(prev_cin_burst_buf_pong, fifo_cin_prev, LAYER_OUT_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, 1);
// 						}
// 					} 
// 				}

// 				task_cnt++;
// 				LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
// 				LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
// 				LAYER_IN_H_T_prev = LAYER_IN_H_T;
// 				LAYER_IN_W_T_prev = LAYER_IN_W_T;
// 				FILTER_S_prev = FILTER_S;
// 			}
// 		}

// 		// Continue until all tiles are read
// 		// No need to read tiles multiple times 
// 		// since it's only read to add them to the result of this layer
// 		num_tile++;
// 		out_num_iter_prev += LAYER_OUT_NUM_T;
// 		if (out_num_iter_prev >= LAYER_OUT_NUM){
// 			out_num_iter_prev = 0;
// 			in_h_iter_prev += LAYER_IN_H_T;
// 			if (in_h_iter_prev >= LAYER_IN_H){
// 				in_h_iter_prev = 0;
// 				in_w_iter_prev += LAYER_IN_W_T;
// 				if (in_w_iter_prev >= LAYER_IN_W){
// 					in_w_iter_prev = 0;
// 					layer_iter_prev += 1;
// 					layer_start_prev = 1;
// 					if (layer_iter_prev == LAYER_BATCH){
// 						layer_iter_prev = 0;
// 						out_num_iter_prev = 0;
// 						in_h_iter_prev = 0;
// 						in_w_iter_prev = 0;
// 						done_prev = 1;
// 					}
// 				}
// 			}
// 		}


// 	}


	
// 	if (LOAD_PREV_CIN){
// 		// Load the last tile to its FIFO
// 		if (task_cnt % 2 == 1){
// 			cin_load_fifo_write_prev(prev_cin_burst_buf_ping, fifo_cin_prev, LAYER_OUT_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, 1);
// 		} else {
// 			cin_load_fifo_write_prev(prev_cin_burst_buf_pong, fifo_cin_prev, LAYER_OUT_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, 1);
// 		}
// 	} 

// }

void cin_load_prev(
		bus_t0                         *global_cin,
		hls::stream<ConfigInst>        &fifo_config_in,
		hls::stream<CinLoadData0Type>  &fifo_cin,
		hls::stream<ConfigInst>        &fifo_config_out
){
#pragma HLS INLINE off 
	// on-chip buffer for cin data
	 bus_t0 cin_burst_buf_ping[IN_NUM_T * (IN_H_T + K_T - 1) * (IN_W_T + K_T - 1) / BUS_PACK_FACTOR0];
	 bus_t0 cin_burst_buf_pong[IN_NUM_T * (IN_H_T + K_T - 1) * (IN_W_T + K_T - 1) / BUS_PACK_FACTOR0];
#pragma HLS RESOURCE variable=cin_burst_buf_ping core=XPM_MEMORY uram
#pragma HLS RESOURCE variable=cin_burst_buf_pong core=XPM_MEMORY uram  



	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	uint in_num_iter_prev = 0;
	uint out_num_iter_prev = 0;
	uint in_h_iter_prev = 0;
	uint in_w_iter_prev = 0;
	uint layer_iter_prev = 0;

	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);
  ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);
  ap_uint<1>  LOAD_PREV_CIN = 0;
  
	// parameters
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW;
	ap_uint<32> LAYER_OUT_NUM_HW;
	ap_uint<32> LAYER_IN_H_HW;
	ap_uint<32> LAYER_IN_W_HW;
	ap_uint<32> LAYER_OUT_H_HW;
	ap_uint<32> LAYER_OUT_W_HW;
	// inst1
	ap_uint<32> LAYER_IN_NUM;
	ap_uint<32> LAYER_OUT_NUM;
	ap_uint<32> LAYER_IN_H;
	ap_uint<32> LAYER_IN_W;
	ap_uint<32> LAYER_OUT_H;
	ap_uint<32> LAYER_OUT_W;
	// inst2
	ap_uint<32> CIN_OFFSET;
	ap_uint<32> WEIGHT_OFFSET;
	ap_uint<32> BIAS_OFFSET;
	ap_uint<32> COUT_OFFSET;
	ap_uint<16> FILTER_S1;
	ap_uint<16> FILTER_S2;
	ap_uint<32> STRIDE;
	// inst3
	ap_uint<32> LAYER_EN;
	ap_uint<16> LAYER_IN_NUM_T;
	ap_uint<16> LAYER_OUT_NUM_T;
	ap_uint<32> LAYER_IN_H_T;
	ap_uint<32> LAYER_IN_W_T;
	ap_uint<32> PREV_CIN_OFFSET;
	// inst4
	ap_uint<32> LAYER_TASK_NUM1;
	ap_uint<32> LAYER_TASK_NUM2;
	ap_uint<32> LAYER_LOCAL_ACCUM_NUM;
	ap_uint<32> LAYER_LOCAL_REG_NUM;
	ap_uint<32> LAYER_ROW_IL_FACTOR;
	ap_uint<32> LAYER_COL_IL_FACTOR;
	//inst5
	ap_uint<32> LAYER_CONV_TYPE;
	ap_uint<16> FILTER_D0;
	ap_uint<16> FILTER_D1;
	ap_uint<32> LAYER_DILATION_RATE;
	ap_uint<32> LAYER_TCONV_STRIDE;
	ap_uint<32> K_NUM;
	ap_uint<32> KH_KW;

	ap_uint<4>  FILTER;

	ap_uint<1>  CONV_1ST_EN;

	uint LAYER_IN_NUM_T_prev;
	uint LAYER_OUT_NUM_T_prev;
	uint LAYER_IN_H_T_prev;
	uint LAYER_IN_W_T_prev;
	uint FILTER_prev;
	

	uint task_cnt = 0;
	bool layer_start = 0;
	bool layer_start_prev = 0;
	bool done = 0;
	// We assum that cin has been pre-padded with zeros
	uint prev = 0;
	uint init = 1;
	uint num_tile = 0;
	bool write_last_cin = 0;
	bool write_last_prev_cin = 0;
	bool start_prev = 0;
	bool done_prev = 0;
	bool change_layout = 0;
	uint inter_tile = 0;
	uint channel_iter = 0;
  int count_fifo = 0;
  int count_dram = 0;
  int count = 0;
	while(!done){
		LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
    LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
    LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
    LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
    LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
    LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
    LAYER_IN_NUM     = inst1(32*0+31, 32*0);
    LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
    LAYER_IN_H       = inst1(32*2+31, 32*2);
    LAYER_IN_W       = inst1(32*3+31, 32*3);
    LAYER_OUT_H      = inst1(32*4+31, 32*4);
    LAYER_OUT_W      = inst1(32*5+31, 32*5);
    CIN_OFFSET       = inst2(32*0+31, 32*0);
    WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
    BIAS_OFFSET      = inst2(32*2+31, 32*2);
    COUT_OFFSET      = inst2(32*3+31, 32*3);
    FILTER_S1        = inst2(32*4+15, 32*4);
    FILTER_S2        = inst2(32*4+31, 32*4+16);
    STRIDE           = inst2(32*5+31, 32*5);
    LAYER_EN         = inst3(32*0+31, 32*0);
    PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
    LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
    LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
    LAYER_IN_H_T     = inst3(32*3+31, 32*3);
    LAYER_IN_W_T     = inst3(32*4+31, 32*4);
    KH_KW 			     = inst5(32*0+31, 32*0);
    LAYER_CONV_TYPE  = inst5(32*5+31, 32*5);
    CONV_1ST_EN    = LAYER_EN[0];
    ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
    ap_uint<1>  CONV_EN        = LAYER_EN[2];
    ap_uint<1>  RELU_EN        = LAYER_EN[3];
    ap_uint<1>  RELU6_EN       = LAYER_EN[4];
    ap_uint<1>  POOL_EN        = LAYER_EN[5];
    ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
    ap_uint<1>  BIAS_EN        = LAYER_EN[7];
    ap_uint<1>  INTER_LOAD_EN  = LAYER_EN[8];
    ap_uint<1>  INTER_WRITE_EN = LAYER_EN[9];
    ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
    LOAD_PREV_CIN  = LAYER_EN[11];

#ifdef DEBUG_config_cin
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif
		
		// Pass the config/instructions
		if (layer_start){
			fifo_config_out.write(inst0);
			fifo_config_out.write(inst1);
			fifo_config_out.write(inst2);
			fifo_config_out.write(inst3);
			fifo_config_out.write(inst4);
			fifo_config_out.write(inst5);
			layer_start = 0;
		}
    // cout<<LAYER_CONV_TYPE<<endl;
		// offsets
		uint cin_offset = PREV_CIN_OFFSET;
		uint prev_cin_offset = PREV_CIN_OFFSET;
		FILTER = (LAYER_CONV_TYPE == 1)? (ap_uint<4>)(KH_KW>>28) : (ap_uint<4>) FILTER_S2;

		if (prev == 1) start_prev = 1;

		// set up some configuration signals
		uint FILTER_S = (DEPTH_CONV_EN == 1)? (uint)FILTER_S1: ((CONV_EN == 1)? (uint)FILTER_S2: 1);
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		change_layout = (((LAYER_IN_W_HW == LAYER_IN_W) || (LAYER_IN_W_HW == LAYER_IN_W_T)) && ((LAYER_IN_H_HW == LAYER_IN_H) || (LAYER_IN_H_HW == LAYER_IN_H_T))); // if next filter = 1 : change the layout to num_tile, Th, Tw, Tn

		// If it has to read from DRAM and not the stored data in on-chip storage
		if (INTER_LOAD_EN == 0){
			if ((max_pool && out_num_iter == 0) || separable_conv || conv2d || (UP_SAMPLE_EN && out_num_iter == 0)){
				if (task_cnt == 0){
					// first load cin
          if(LOAD_PREV_CIN == 1){
            cin_load_ddr_read(global_cin, cin_burst_buf_ping, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER, FILTER, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
            count_dram++;
          }
        } else {
					// Apply double buffering for reading the data and filling the FIFO
					if (task_cnt % 2 == 1){
            if(LOAD_PREV_CIN == 1){
              cin_load_ddr_read(global_cin, cin_burst_buf_pong, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER, FILTER, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
              cin_load_fifo_write(cin_burst_buf_ping, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_prev, FILTER_prev);
              count_fifo++;
              count_dram++;
              // int count = 0;
              // while(!fifo_cin.empty()){
              //   ConvData0Type item = fifo_cin.read();
              //   count++;
              // }
              // cout<<count<<endl;
              // exit(0);
            }
					} else {
            if(LOAD_PREV_CIN == 1){
              cin_load_ddr_read(global_cin, cin_burst_buf_ping, LAYER_IN_H_HW, LAYER_IN_W_HW, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER, FILTER, cin_offset, in_num_iter, in_h_iter, in_w_iter, num_tile, change_layout, max_pool, 0);
              cin_load_fifo_write(cin_burst_buf_pong, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_prev, FILTER_prev);
              count_fifo++;
              count_dram++;
            }
					}
				}

				task_cnt++;
				LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
				LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
				LAYER_IN_H_T_prev = LAYER_IN_H_T;
				LAYER_IN_W_T_prev = LAYER_IN_W_T;
				FILTER_prev = FILTER;
			}
		}

		// Continue until all the tiles are read
		// Since each layer produces LAYER_OUT_NUM feature maps, 
		// repeat reading the tiles LAYER_OUT_NUM times
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter < LAYER_IN_NUM){
			channel_iter += ((LAYER_IN_W / LAYER_IN_W_T) * (LAYER_IN_H / LAYER_IN_H_T));
		} else {
			channel_iter = 0;
			inter_tile++;
		}
		num_tile = conv2d==1? channel_iter + inter_tile : num_tile + 1;
    // cout<<in_num_iter<<endl;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			channel_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					num_tile = 0;
					inter_tile = 0;
					channel_iter = 0;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						prev = 0;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							out_num_iter = 0;
							in_h_iter = 0;
							in_w_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}

  if(LOAD_PREV_CIN == 1){
    // Fill the FIFOs with the data for the last tile
    if (task_cnt % 2 == 1){
      cin_load_fifo_write(cin_burst_buf_ping, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_prev, FILTER_prev);
      count_fifo++;
    } else {
      cin_load_fifo_write(cin_burst_buf_pong, fifo_cin, LAYER_IN_NUM_T_prev, LAYER_IN_H_T_prev, LAYER_IN_W_T_prev, FILTER_prev, FILTER_prev);
      count_fifo++;
    }
  }
  // cout<<"count_dram: "<<count_dram<<endl;
  // cout<<"count_fifo: "<<count_fifo<<endl;
  // exit(0);
}

/*
 * Function name: weight_load_depth_conv_weight_write
 * Function description: This function writes depth_conv weights to depth_conv module.
 */
void weight_load_depth_conv_weight_write(
		bus_t1 weight_burst_buf1[],
		hls::stream<WeightLoadData0Type> &fifo_depth_conv_weight,
		ConfigInst inst0,
		ConfigInst inst1,
		ConfigInst inst2,
		ConfigInst inst3,
		uint in_num_iter,
		uint out_num_iter
){
	// Refer to cin_load module to understand the meaning of the instructions
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
	// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
	// inst2
	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
	// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];

	if (DEPTH_CONV_EN == 1){
		// write to downstream modules: depth_conv
		int ii = 0;
		int p = 0;
		int q = 0;
		bool done = 0;
		while(!done){
#pragma HLS PIPELINE II=1
// Data layout of the corresponding buffer: F * F * Tn
			uint local_w_idx = p * FILTER_S1 * LAYER_IN_NUM_T + q * LAYER_IN_NUM_T + ii * SIMD_LANE;
			uint bus_w_idx = local_w_idx / BUS_PACK_FACTOR1;
			uint bus_w_offset = local_w_idx % BUS_PACK_FACTOR1;
			bus_t1 bus_w_data = weight_burst_buf1[bus_w_idx];
			WeightLoadData0Type fifo_w_data;
			
// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
// Since each entry in FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
#if DATA_SEL_FACTOR1 == 1
			fifo_w_data = bus_w_data;
#elif DATA_SEL_FACTOR1 == 2
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			}
#elif DATA_SEL_FACTOR1 == 4         
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			}
#elif DATA_SEL_FACTOR1 == 8
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 5 - 1, DATA_W1 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 6 - 1, DATA_W1 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 7 - 1, DATA_W1 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 8 - 1, DATA_W1 * SIMD_LANE * 7);
				break;
			}
#elif DATA_SEL_FACTOR1 == 16
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 5 - 1, DATA_W1 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 6 - 1, DATA_W1 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 7 - 1, DATA_W1 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 8 - 1, DATA_W1 * SIMD_LANE * 7);
				break;
			case 8:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 9 - 1, DATA_W1 * SIMD_LANE * 8);
				break;
			case 9:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 10 - 1, DATA_W1 * SIMD_LANE * 9);
				break;
			case 10:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 11 - 1, DATA_W1 * SIMD_LANE * 10);
				break;
			case 11:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 12 - 1, DATA_W1 * SIMD_LANE * 11);
				break;
			case 12:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 13 - 1, DATA_W1 * SIMD_LANE * 12);
				break;
			case 13:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 14 - 1, DATA_W1 * SIMD_LANE * 13);
				break;
			case 14:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 15 - 1, DATA_W1 * SIMD_LANE * 14);
				break;
			case 15:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 16 - 1, DATA_W1 * SIMD_LANE * 15);
				break;
			}
#endif         
			fifo_depth_conv_weight.write(fifo_w_data);
			
			// Repeat until all of the weights for this tile is inserted into its FIFO
			q++;
			if (q == FILTER_S1){
				q = 0;
				p++;
				if (p == FILTER_S1){
					p = 0;
					ii++;
					if (ii == LAYER_IN_NUM_T / SIMD_LANE){
						ii = 0;
						done = 1;
					}
				}
			}

		}
	}
}

/*
 * Function name: weight_load_conv_weight_write
 * Function description: this function writes conv weights to conv module.
 * It has the same functionality as weight_load_depth_conv_weight_write
 */
void weight_load_conv_weight_write(
		bus_t1 weight_burst_buf2[],
		hls::stream<WeightLoadData1Type> &fifo_conv_weight,
		ConfigInst inst0,
		ConfigInst inst1,
		ConfigInst inst3,
		ap_uint<4> FILTER,
		uint in_num_iter,
		uint out_num_iter
){
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
	// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
	// // inst2
	// ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	// ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	// ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	// ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	// ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	// ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	// ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
	// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
	

	if (CONV_EN == 1){
		int oo = 0;
		int p = 0;
		int q = 0;
		int ii = 0;
		bool done = 0;
		while(!done){
#pragma HLS PIPELINE II=1

#ifdef DEBUG_weight2
			cout << "in loading weights " << DATA_SEL_FACTOR1 << " " << ii << " " << q << " " << p << " " << oo <<" " << LAYER_OUT_NUM_T << endl;
#endif          
			uint local_w_idx = oo * FILTER * FILTER * LAYER_IN_NUM_T + p * FILTER * LAYER_IN_NUM_T + q * LAYER_IN_NUM_T + ii * SIMD_LANE;
			uint bus_w_idx = local_w_idx / BUS_PACK_FACTOR1;
			uint bus_w_offset = local_w_idx % BUS_PACK_FACTOR1;
			// cout<<bus_w_idx<<endl;
			bus_t1 bus_w_data = weight_burst_buf2[bus_w_idx];
			// cout<<weight_burst_buf2[bus_w_idx]<<endl;
			WeightLoadData1Type fifo_w_data;
#if DATA_SEL_FACTOR1 == 1
			fifo_w_data = bus_w_data;
#elif DATA_SEL_FACTOR1 == 2
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			}
#elif DATA_SEL_FACTOR1 == 4
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			}
#elif DATA_SEL_FACTOR1 == 8
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 5 - 1, DATA_W1 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 6 - 1, DATA_W1 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 7 - 1, DATA_W1 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 8 - 1, DATA_W1 * SIMD_LANE * 7);
				break;
			}
#elif DATA_SEL_FACTOR1 == 16
			switch(bus_w_offset / SIMD_LANE){
			case 0:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 1 - 1, DATA_W1 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 2 - 1, DATA_W1 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 3 - 1, DATA_W1 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 4 - 1, DATA_W1 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 5 - 1, DATA_W1 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 6 - 1, DATA_W1 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 7 - 1, DATA_W1 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 8 - 1, DATA_W1 * SIMD_LANE * 7);
				break;
			case 8:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 9 - 1, DATA_W1 * SIMD_LANE * 8);
				break;
			case 9:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 10 - 1, DATA_W1 * SIMD_LANE * 9);
				break;
			case 10:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 11 - 1, DATA_W1 * SIMD_LANE * 10);
				break;
			case 11:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 12 - 1, DATA_W1 * SIMD_LANE * 11);
				break;
			case 12:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 13 - 1, DATA_W1 * SIMD_LANE * 12);
				break;
			case 13:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 14 - 1, DATA_W1 * SIMD_LANE * 13);
				break;
			case 14:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 15 - 1, DATA_W1 * SIMD_LANE * 14);
				break;
			case 15:
				fifo_w_data = bus_w_data(DATA_W1 * SIMD_LANE * 16 - 1, DATA_W1 * SIMD_LANE * 15);
				break;
			}
#endif          
		// float num[8];
		// // printf("output: ");
		// for(int i=0; i<8; i++){
		// 	num[i] = Reinterpret<float>((ap_uint<32>)fifo_w_data((i+1)*32-1, 32*i));
		// 	printf("%10f\t", num[i]);
		// }
		// printf("\n");
			fifo_conv_weight.write(fifo_w_data);

			ii++;
			if (ii == LAYER_IN_NUM_T / SIMD_LANE){
				ii = 0;
				q++;
				if (q == FILTER){
					q = 0;
					p++;
					if (p == FILTER){
						p = 0;
						oo++;
						if (oo == LAYER_OUT_NUM_T){
							oo = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

/*
 * Function name: weight_load_bias_write
 * Function description: This function writes bias to relu module.
 */
void weight_load_bias_write(
		bus_t2 bias_burst_buf[],
		hls::stream<WeightLoadData2Type> &fifo_bias,
		ConfigInst inst0,
		ConfigInst inst1,
		ConfigInst inst2,
		ConfigInst inst3,
		uint in_num_iter,
		uint out_num_iter,
    bool relu_before_conv_flag
){
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
	// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
	// inst2
	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
	// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved

  ap_uint<32> out_iter = relu_before_conv_flag? LAYER_IN_NUM_T : LAYER_OUT_NUM_T;
	if (CONV_EN == 1){
		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
    // if (in_num_iter + LAYER_IN_NUM_T <= LAYER_IN_NUM){
			bias_write_loop: for (int oo = 0; oo < out_iter / SIMD_LANE; oo++){
#pragma HLS PIPELINE II=1
				uint local_b_idx = oo * SIMD_LANE;
				uint bus_b_idx = local_b_idx / BUS_PACK_FACTOR2;
				uint bus_b_offset = local_b_idx % BUS_PACK_FACTOR2;
				bus_t2 bus_b_data = bias_burst_buf[bus_b_idx];
				WeightLoadData2Type fifo_b_data;
				
// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
// Since each entry in FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
#if DATA_SEL_FACTOR2 == 1
				fifo_b_data = bus_b_data;
#elif DATA_SEL_FACTOR2 == 2
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				}
#elif DATA_SEL_FACTOR2 == 4
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				case 2:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
					break;
				case 3:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
					break;
				}
#elif DATA_SEL_FACTOR2 == 8
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				case 2:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
					break;
				case 3:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
					break;
				case 4:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 5 - 1, DATA_W2 * SIMD_LANE * 4);
					break;
				case 5:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 6 - 1, DATA_W2 * SIMD_LANE * 5);
					break;
				case 6:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 7 - 1, DATA_W2 * SIMD_LANE * 6);
					break;
				case 7:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 8 - 1, DATA_W2 * SIMD_LANE * 7);
					break;
				}
#elif DATA_SEL_FACTOR2 == 16
				switch(bus_b_offset / SIMD_LANE){
				case 0:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
					break;
				case 1:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
					break;
				case 2:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
					break;
				case 3:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
					break;
				case 4:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 5 - 1, DATA_W2 * SIMD_LANE * 4);
					break;
				case 5:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 6 - 1, DATA_W2 * SIMD_LANE * 5);
					break;
				case 6:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 7 - 1, DATA_W2 * SIMD_LANE * 6);
					break;
				case 7:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 8 - 1, DATA_W2 * SIMD_LANE * 7);
					break;
				case 8:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 9 - 1, DATA_W2 * SIMD_LANE * 8);
					break;
				case 9:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 10 - 1, DATA_W2 * SIMD_LANE * 9);
					break;
				case 10:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 11 - 1, DATA_W2 * SIMD_LANE * 10);
					break;
				case 11:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 12 - 1, DATA_W2 * SIMD_LANE * 11);
					break;
				case 12:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 13 - 1, DATA_W2 * SIMD_LANE * 12);
					break;
				case 13:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 14 - 1, DATA_W2 * SIMD_LANE * 13);
					break;
				case 14:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 15 - 1, DATA_W2 * SIMD_LANE * 14);
					break;
				case 15:
					fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 16 - 1, DATA_W2 * SIMD_LANE * 15);
					break;
				}
#endif       
				fifo_bias.write(fifo_b_data);
			}
		}
	}
}

/*
 * Function name: weight_load_depth_norm_write
 * Function description: This function writes parameters for normalization to relu6 module.
 */
void weight_load_depth_norm_write(
		bus_t2 bias_burst_buf[],
		hls::stream<WeightLoadData2Type> &fifo_bias,
		ConfigInst inst0,
		ConfigInst inst1,
		ConfigInst inst2,
		ConfigInst inst3,
		uint in_num_iter,
		uint out_num_iter
){
	// Refer to cin_load module to understand the meaning of the instructions
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
	// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
	// inst2
	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
	// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved

	if (DEPTH_CONV_EN == 1 && RELU6_EN == 1){
		//if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
		bias_write_loop: for (int oo = 0; oo < LAYER_IN_NUM_T / SIMD_LANE; oo++){
#pragma HLS PIPELINE II=1
			uint local_b_idx = oo * SIMD_LANE;
			uint bus_b_idx = local_b_idx / BUS_PACK_FACTOR2;
			uint bus_b_offset = local_b_idx % BUS_PACK_FACTOR2;
			bus_t2 bus_b_data = bias_burst_buf[bus_b_idx];
			WeightLoadData2Type fifo_b_data;
			
// DATA_SEL_FACTOR = BUS_PACK_FACTOR / SIMD_LANE
// BUS_PACK_FACTOR is the number of elements packed in one to enable memory coalescing
// Since each entry in FIFOs will be SIMD_LANE elements of the data, we should unpack based on SIMD_LANE
#if DATA_SEL_FACTOR2 == 1
			fifo_b_data = bus_b_data;
#elif DATA_SEL_FACTOR2 == 2
			switch(bus_b_offset / SIMD_LANE){
			case 0:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
				break;
			}
#elif DATA_SEL_FACTOR2 == 4
			switch(bus_b_offset / SIMD_LANE){
			case 0:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
				break;
			}
#elif DATA_SEL_FACTOR2 == 8
			switch(bus_b_offset / SIMD_LANE){
			case 0:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 5 - 1, DATA_W2 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 6 - 1, DATA_W2 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 7 - 1, DATA_W2 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 8 - 1, DATA_W2 * SIMD_LANE * 7);
				break;
			}
#elif DATA_SEL_FACTOR2 == 16
			switch(bus_b_offset / SIMD_LANE){
			case 0:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 1 - 1, DATA_W2 * SIMD_LANE * 0);
				break;
			case 1:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 2 - 1, DATA_W2 * SIMD_LANE * 1);
				break;
			case 2:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 3 - 1, DATA_W2 * SIMD_LANE * 2);
				break;
			case 3:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 4 - 1, DATA_W2 * SIMD_LANE * 3);
				break;
			case 4:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 5 - 1, DATA_W2 * SIMD_LANE * 4);
				break;
			case 5:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 6 - 1, DATA_W2 * SIMD_LANE * 5);
				break;
			case 6:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 7 - 1, DATA_W2 * SIMD_LANE * 6);
				break;
			case 7:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 8 - 1, DATA_W2 * SIMD_LANE * 7);
				break;
			case 8:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 9 - 1, DATA_W2 * SIMD_LANE * 8);
				break;
			case 9:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 10 - 1, DATA_W2 * SIMD_LANE * 9);
				break;
			case 10:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 11 - 1, DATA_W2 * SIMD_LANE * 10);
				break;
			case 11:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 12 - 1, DATA_W2 * SIMD_LANE * 11);
				break;
			case 12:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 13 - 1, DATA_W2 * SIMD_LANE * 12);
				break;
			case 13:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 14 - 1, DATA_W2 * SIMD_LANE * 13);
				break;
			case 14:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 15 - 1, DATA_W2 * SIMD_LANE * 14);
				break;
			case 15:
				fifo_b_data = bus_b_data(DATA_W2 * SIMD_LANE * 16 - 1, DATA_W2 * SIMD_LANE * 15);
				break;
			}
#endif       
			fifo_bias.write(fifo_b_data);
		}
		//}
	}
}


/**
 * Function name: weight_load
 * Function description: This function loads weights and distributes them to downstream modules.
 */
void weight_load(
		bus_t1                           *global_weight,
		hls::stream<ConfigInst>          &fifo_config_in,
		hls::stream<WeightLoadData1Type> &fifo_conv_weight,
		hls::stream<ConfigInst>          &fifo_config_out
){
#pragma HLS INLINE off 
	// on-chip buffers
	 bus_t1 weight_burst_buf2[OUT_NUM_T * IN_NUM_T * K_T * K_T / BUS_PACK_FACTOR1];
#pragma HLS RESOURCE variable=weight_burst_buf2 core=XPM_MEMORY uram  

	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  // fifo_config_out.write(inst0);
	// fifo_config_out.write(inst1);
	// fifo_config_out.write(inst2);
	// fifo_config_out.write(inst3);
	// fifo_config_out.write(inst4);
  // fifo_config_out.write(inst5);

	bool layer_start = 0;
	bool done = 0;
	// We assum that cin has been pre-padded with zeros
	while(!done){
		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
    ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
    ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];
    ap_uint<1>  BIAS_1_EN             = LAYER_EN[14];
    ap_uint<1>  BATCH_NORM_1_EN       = LAYER_EN[15];

    ///////inst5///////////////
		ap_uint<32> KH_KW 			    = inst5(32*0+31, 32*0);
		ap_uint<32> LAYER_CONV_TYPE = inst5(32*5+31, 32*5);

#ifdef DEBUG_config
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif
// #define DEBUG_weight
		// Set up some configuration signals
		bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_EN == 1);
    ap_uint<4> FILTER = (LAYER_CONV_TYPE == 2)? (ap_uint<4>)(KH_KW>>28) : (ap_uint<4>)FILTER_S2;

		// Set the offsets if batch normalization is used (final_result = gamma * computed_result + beta)
		// Depthwise separable convolution has two sublayers of computation,
		// one is the DW sublayer and the other is the normal 1x1 conv sublayer
		// Both of these layers may need normalization
		// In DRAM, for each layer, first the BETAs are stored and then the GAMMAs are stored


		// offsets
		uint weight_offset2 = 0;
      
		weight_offset2 = WEIGHT_OFFSET;

		// Load weights of the conv module
		if (CONV_EN == 1){
			uint global_weight_offset = weight_offset2 + out_num_iter * LAYER_IN_NUM_HW * FILTER_S2 * FILTER_S2 + in_num_iter * LAYER_OUT_NUM_T * FILTER_S2 * FILTER_S2; ////this may need a fix for TCONV
      memcpy((void*)&weight_burst_buf2[0], (void*)&global_weight[global_weight_offset / BUS_PACK_FACTOR1], sizeof(data_t1) * LAYER_OUT_NUM_T * LAYER_IN_NUM_T * FILTER * FILTER);
		}

		// Fill the FIFOs with the loaded data
		// weight_load_depth_conv_weight_write(weight_burst_buf1, fifo_depth_conv_weight, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter);

#ifdef DEBUG_weight
		cout << "loaded weights" << endl;
#endif

    weight_load_conv_weight_write(weight_burst_buf2, fifo_conv_weight, inst0, inst1, inst3, FILTER, in_num_iter, out_num_iter);

#ifdef DEBUG_weight
		cout << "loaded weights" << endl;
#endif

		// weight_load_depth_norm_write(beta_depth_burst_buf, fifo_beta_depth, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter);
		// weight_load_depth_norm_write(gamma_depth_burst_buf, fifo_gamma_depth, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter);
#ifdef DEBUG_weight
		cout << in_num_iter << " in num iter " << endl;
#endif
		// Repeat until all the tiles are read
		// Then, have to repeat reading to calculate all LAYER_OUT_NUM output feature maps
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

void bias_load(
		bus_t2                           *global_bias,
		hls::stream<ConfigInst>          &fifo_config_in,
		hls::stream<ConvData0Type>       &fifo_gamma_conv_in,
		hls::stream<ConvData0Type>       &fifo_beta_conv_in,
    hls::stream<ConvData0Type>       &fifo_gamma_conv_out,
    hls::stream<ConvData0Type>       &fifo_beta_conv_out,
		hls::stream<ConfigInst>          &fifo_config_out
){
#pragma HLS INLINE off 
	// on-chip buffers
	 bus_t2 beta_conv_burst_buf_in[IN_NUM_T / BUS_PACK_FACTOR2];
	 bus_t2 gamma_conv_burst_buf_in[IN_NUM_T / BUS_PACK_FACTOR2];
   bus_t2 beta_conv_burst_buf_out[OUT_NUM_T / BUS_PACK_FACTOR2];
	 bus_t2 gamma_conv_burst_buf_out[OUT_NUM_T / BUS_PACK_FACTOR2];
#pragma HLS RESOURCE variable=beta_conv_burst_buf_in core=XPM_MEMORY uram
#pragma HLS RESOURCE variable=gamma_conv_burst_buf_in core=XPM_MEMORY uram
#pragma HLS RESOURCE variable=beta_conv_burst_buf_out core=XPM_MEMORY uram
#pragma HLS RESOURCE variable=gamma_conv_burst_buf_out core=XPM_MEMORY uram

	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

  // fifo_config_out.write(inst0);
	// fifo_config_out.write(inst1);
	// fifo_config_out.write(inst2);
	// fifo_config_out.write(inst3);
	// fifo_config_out.write(inst4);
  // fifo_config_out.write(inst5);

	bool layer_start = 0;
	bool done = 0;
  int count = 0;
	// We assum that cin has been pre-padded with zeros
	while(!done){
		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN           = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN         = LAYER_EN[1];
		ap_uint<1>  CONV_EN               = LAYER_EN[2];
		ap_uint<1>  RELU_EN               = LAYER_EN[3];
		ap_uint<1>  RELU6_EN              = LAYER_EN[4];
		ap_uint<1>  POOL_EN               = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN          = LAYER_EN[6];  // reserved
    ap_uint<1>  BIAS_EN               = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN         = LAYER_EN[10];
    ap_uint<1>  BATCH_NORM_EN_DEPTH   = LAYER_EN[12];
    ap_uint<1>  RELU_1_EN             = LAYER_EN[13];
    ap_uint<1>  BIAS_1_EN             = LAYER_EN[14];
    ap_uint<1>  BATCH_NORM_1_EN       = LAYER_EN[15];

    ///////inst5///////////////
		ap_uint<32> KH_KW 			    = inst5(32*0+31, 32*0);
		ap_uint<32> LAYER_CONV_TYPE = inst5(32*5+31, 32*5);

#ifdef DEBUG_config
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif
// #define DEBUG_weight
		// Set up some configuration signals
    //###########################################in bias load###########################################
		bool bias_en_1 = (CONV_EN == 1 && BIAS_1_EN == 1);
		bool norm_conv_en_1 = (CONV_EN == 1 && BATCH_NORM_1_EN == 1);
		uint beta_conv_offset_1 = 0;
		uint gamma_conv_offset_1 = 0;
		uint bias_offset_1 = BIAS_OFFSET;
    if (norm_conv_en_1) {
			beta_conv_offset_1 = bias_offset_1;
      if(LAYER_IN_NUM_HW<BUS_PACK_FACTOR2)
			  gamma_conv_offset_1 = beta_conv_offset_1 + BUS_PACK_FACTOR2;
      else
        gamma_conv_offset_1 = beta_conv_offset_1 + LAYER_IN_NUM_HW;//tweak
		}
    
    //###########################################out bias load###########################################
    bool bias_en = (CONV_EN == 1 && BIAS_EN == 1);
		bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_EN == 1);  
    uint beta_conv_offset = 0;
		uint gamma_conv_offset = 0;
    uint bias_offset = 0;
    if(LAYER_IN_NUM_HW<BUS_PACK_FACTOR2){
      if(BATCH_NORM_1_EN)
        bias_offset = BIAS_OFFSET + 2*BUS_PACK_FACTOR2;
      else if(BIAS_1_EN)
        bias_offset = BUS_PACK_FACTOR2;
      else
        bias_offset =  BIAS_OFFSET;
    }else{
      if(BATCH_NORM_1_EN)
        bias_offset = BIAS_OFFSET + 2*LAYER_IN_NUM_HW;
      else if(BIAS_1_EN)
        bias_offset = LAYER_IN_NUM_HW;
      else
        bias_offset =  BIAS_OFFSET;
    }

    // cout<<beta_conv_offset<<" "<<gamma_conv_offset<<endl;

    //###########################################in bias load###########################################
		// Load bias (when batch normalization is not used: final_result = computed_result + bias)
		// Set GAMMAs to zero
		if (bias_en_1){
			// Only write out in the last iteration
			if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
				uint global_bias_offset_1 = bias_offset_1 + out_num_iter;
        for (int i = 0; i < OUT_NUM_T / BUS_PACK_FACTOR2; i++){
        #pragma HLS pipeline
				  gamma_conv_burst_buf_in[i] = 0;
        }
				memcpy((void*)beta_conv_burst_buf_in, (void*)&global_bias[global_bias_offset_1 / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_IN_NUM_T);
			}
		} else{

      	// Load batch normalization info for conv
      	if (norm_conv_en_1){
      		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){//those may need to change
      			uint global_bias_offset_1 = beta_conv_offset_1 + in_num_iter;
      #ifdef DEBUG_weight
      			cout << global_bias_offset_1 << " beta " << beta_conv_offset_1 << " " <<BUS_PACK_FACTOR2<<endl;
      #endif
      			memcpy((void*)beta_conv_burst_buf_in, (void*)&global_bias[global_bias_offset_1 / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_IN_NUM_T);
      		}

      		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){//those may need to change
      			uint global_bias_offset_1 = gamma_conv_offset_1 + in_num_iter;
      #ifdef DEBUG_weight
      			cout << global_bias_offset_1 << " gamma " << gamma_conv_offset_1 << " " <<BUS_PACK_FACTOR2<<endl;

      #endif
      			memcpy((void*)gamma_conv_burst_buf_in, (void*)&global_bias[global_bias_offset_1 / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_IN_NUM_T);
      		}
      	}
    }
    //###########################################out bias load###########################################
    if (bias_en){
			// Only write out in the last iteration
			if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
				uint global_bias_offset = bias_offset + out_num_iter;
        for (int i = 0; i < OUT_NUM_T / BUS_PACK_FACTOR2; i++){
        #pragma HLS pipeline
				  gamma_conv_burst_buf_out[i] = 0;
        }
				memcpy((void*)beta_conv_burst_buf_out, (void*)&global_bias[global_bias_offset / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_OUT_NUM_T);
			}
		} else{

      	// Load batch normalization info for conv
      	if (norm_conv_en){
      		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
      			uint global_bias_offset = beta_conv_offset + out_num_iter;
      #ifdef DEBUG_weight
      			cout << global_bias_offset << " beta " << beta_conv_offset << endl;
      #endif
      			memcpy((void*)beta_conv_burst_buf_out, (void*)&global_bias[global_bias_offset / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_OUT_NUM_T);
      		}
      
      		if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
      			uint global_bias_offset = gamma_conv_offset + out_num_iter;
      #ifdef DEBUG_weight
      			cout << global_bias_offset << " gamma " << gamma_conv_offset << endl;
      #endif
      			memcpy((void*)gamma_conv_burst_buf_out, (void*)&global_bias[global_bias_offset / BUS_PACK_FACTOR2], sizeof(data_t2) * LAYER_OUT_NUM_T);
      		}
      	}
    }
    // exit(0);
#ifdef DEBUG_weight
		cout << "loaded beta and gamma" << endl;
#endif

	// Load BETAs and GAMMAs to their FIFOs
	// If there doesn't exist a batch normalization and it's a normal bias,
	// beta = bias, gamma = 0
    //###########################################in bias load###########################################
    if (bias_en_1) {
		  weight_load_bias_write(beta_conv_burst_buf_in, fifo_beta_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
      weight_load_bias_write(gamma_conv_burst_buf_in, fifo_gamma_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
    }
		else if(norm_conv_en_1){
			weight_load_bias_write(beta_conv_burst_buf_in, fifo_beta_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
			weight_load_bias_write(gamma_conv_burst_buf_in, fifo_gamma_conv_in, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter,1);
		}

    //###########################################out bias load###########################################
    if (bias_en) {
		  weight_load_bias_write(beta_conv_burst_buf_out, fifo_beta_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
      weight_load_bias_write(gamma_conv_burst_buf_out, fifo_gamma_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
    }
		else if(norm_conv_en){
			weight_load_bias_write(beta_conv_burst_buf_out, fifo_beta_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
			weight_load_bias_write(gamma_conv_burst_buf_out, fifo_gamma_conv_out, inst0, inst1, inst2, inst3, in_num_iter, out_num_iter, 0);
		}

#ifdef DEBUG_weight
		cout << in_num_iter << " in num iter " << endl;
#endif
		// Repeat until all the tiles are read
		// Then, have to repeat reading to calculate all LAYER_OUT_NUM output feature maps
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

///**
// * Function name: inter_load
// * Function description: This function loads intermediate results buffered on-chip from the previous batch.
// */
//void inter_load(
//		hls::stream<CinLoadData0Type>     &fifo_cin,
//		hls::stream<InterWriteData1Type>  &fifo_inter,
//		hls::stream<ConfigInst>           &fifo_config_in,
//		hls::stream<InterLoadData0Type>   &fifo_cout,
//		/*hls::stream<CinLoadData0Type>     &fifo_cin_prev_in,
//  hls::stream<CinLoadData0Type>     &fifo_cin_prev_out,*/
//		hls::stream<ConfigInst>           &fifo_config_out
//){
//#pragma HLS INLINE off
//	// tiling iterators
//	uint in_num_iter = 0;
//	uint out_num_iter = 0;
//	uint in_h_iter = 0;
//	uint in_w_iter = 0;
//	uint layer_iter = 0;
//
//	// Read instructions
//	ConfigInst inst0 = fifo_config_in.read();
//	fifo_config_out.write(inst0);
//	ConfigInst inst1 = fifo_config_in.read();
//	fifo_config_out.write(inst1);
//	ConfigInst inst2 = fifo_config_in.read();
//	fifo_config_out.write(inst2);
//	ConfigInst inst3 = fifo_config_in.read();
//	fifo_config_out.write(inst3);
//	ConfigInst inst4 = fifo_config_in.read();
//	fifo_config_out.write(inst4);
//
//	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);
//
//	bool layer_start = 0;
//	bool done = 0;
//	//bool bypass_prev = 0;
//	while(!done){
//		if (layer_start){
//			inst0 = fifo_config_in.read();
//			fifo_config_out.write(inst0);
//			inst1 = fifo_config_in.read();
//			fifo_config_out.write(inst1);
//			inst2 = fifo_config_in.read();
//			fifo_config_out.write(inst2);
//			inst3 = fifo_config_in.read();
//			fifo_config_out.write(inst3);
//			inst4 = fifo_config_in.read();
//			fifo_config_out.write(inst4);
//			layer_start = 0;
//		}
//
//		// inst0
//		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
//		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
//		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
//		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
//		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
//		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
//		// inst1
//		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
//		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
//		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
//		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
//		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
//		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
//		// inst2
//		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
//		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
//		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
//		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
//		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
//		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
//		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
//		// inst3
//		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
//		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
//		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
//		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
//		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
//		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);
//
//		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
//		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
//		ap_uint<1>  CONV_EN        = LAYER_EN[2];
//		ap_uint<1>  RELU_EN        = LAYER_EN[3];
//		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
//		ap_uint<1>  POOL_EN        = LAYER_EN[5];
//		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
//		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
//		ap_uint<1>  INTER_LOAD_EN  = LAYER_EN[8];
//		ap_uint<1>  INTER_WRITE_EN = LAYER_EN[9];
//
//		uint FILTER_S = (DEPTH_CONV_EN == 1)? (uint)FILTER_S1: (CONV_EN == 1)? (uint)FILTER_S2: 1;
//		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
//		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
//		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
//
//#ifdef DEBUG  
//		uint fifo_read_cnt = 0;
//#endif  
//
//		if (((max_pool || UP_SAMPLE_EN) && out_num_iter == 0) || conv2d || separable_conv){
//			/*int o = 0;
//      int h = 0;
//      int w = 0;
//      bool done2 = 0;
//      while(!done2){
//  #pragma HLS PIPELINE II=1           
//        if (bypass_prev){
//          CinLoadData0Type data = fifo_cin_prev_in.read();
//          fifo_cin_prev_out.write(data);
//        }
//
//        w++;
//        if (w == LAYER_IN_W_T + FILTER_S - 1){
//          w = 0;
//          h++;
//          if (h == LAYER_IN_H_T + FILTER_S - 1){
//            h = 0;
//            o++;
//            if (o == LAYER_IN_NUM_T / CONV_LANE){
//              o = 0;
//              done2 = 1;
//              bypass_prev = 0;
//            }
//          }
//        }
//      }*/
//			switch(INTER_LOAD_EN){
//			case 0:
//			{
//				int o = 0;
//				int h = 0;
//				int w = 0;
//				bool done1 = 0;
//				while(!done1){
//#pragma HLS PIPELINE II=1
//					CinLoadData0Type tmp = fifo_cin.read();
//					fifo_cout.write(tmp);
//
//					w++;
//					if (w == LAYER_IN_W_T + FILTER_S - 1){
//						w = 0;
//						h++;
//						if (h == LAYER_IN_H_T + FILTER_S - 1){
//							h = 0;
//							o++;
//							if (o == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
//								o = 0;
//								done1 = 1;
//							}
//						}
//					}
//				}
//				break;
//			}
//			case 1:
//			{
//				int o = 0;
//				int h = 0;
//				int w = 0;
//				bool done1 = 0;
//				while(!done1){
//#pragma HLS PIPELINE II=1
//					InterLoadData0Type tmp;
//					if ((h >= int(FILTER_S / 2)) && (h < LAYER_IN_H_T + int(FILTER_S / 2))
//							&& (w >= int(FILTER_S / 2)) && (w < LAYER_IN_W_T + int(FILTER_S / 2))){
//						tmp = fifo_inter.read();
//					} else {
//						tmp = 0;
//					}
//					fifo_cout.write(tmp);
//
//					w++;
//					if (w == LAYER_IN_W_T + FILTER_S - 1){
//						w = 0;
//						h++;
//						if (h == LAYER_IN_H_T + FILTER_S - 1){
//							h = 0;
//							o++;
//							if (o == LAYER_IN_NUM_T / INTER_LOAD_LANE){
//								o = 0;
//								done1 = 1;
//							}
//						}
//					}
//				}
//				break;
//			}
//			}
//		}
//
//		in_num_iter += LAYER_IN_NUM_T;
//		if (in_num_iter >= LAYER_IN_NUM){
//			//bypass_prev = 1;
//			in_num_iter = 0;
//			in_h_iter += LAYER_IN_H_T;
//			if (in_h_iter >= LAYER_IN_H){
//				in_h_iter = 0;
//				in_w_iter += LAYER_IN_W_T;
//				if (in_w_iter >= LAYER_IN_W){
//					in_w_iter = 0;
//					out_num_iter += LAYER_OUT_NUM_T;
//					if (out_num_iter >= LAYER_OUT_NUM){
//						out_num_iter = 0;
//						layer_iter += 1;
//						layer_start = 1;
//						if (layer_iter == LAYER_BATCH){
//							layer_iter = 0;
//							done = 1;
//						}
//					}
//				}
//			}
//		}
//	}
//}

/**
 * Function name: depth_conv
 * Function description: This function performs depthwise convolution.
 */
void depth_conv(
		hls::stream<CinLoadData0Type>     &fifo_cin,
		hls::stream<WeightLoadData0Type>  &fifo_weight,
		hls::stream<ConfigInst>           &fifo_config_in,
		hls::stream<DepthConvData0Type>   &fifo_cout,
		hls::stream<ConfigInst>           &fifo_config_out
){
#pragma HLS INLINE off
	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	// dump write instructions
	/*fifo_config_out.write(inst0);
  fifo_config_out.write(inst1);
  fifo_config_out.write(inst2);
  fifo_config_out.write(inst3);
  fifo_config_out.write(inst4);*/

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
	bool bypass_prev = 0;
	while(!done){
		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved

		data_t1 weight_buf[IN_NUM_T / DEPTH_CONV_LANE][DEPTH_CONV_LANE][K_T][K_T];
#pragma HLS ARRAY_PARTITION variable=weight_buf dim=2 complete
#pragma HLS ARRAY_PARTITION variable=weight_buf dim=3 complete
#pragma HLS ARRAY_PARTITION variable=weight_buf dim=4 complete

		uint FILTER_S = (DEPTH_CONV_EN == 1)? (uint)FILTER_S1: (CONV_EN == 1)? (uint)FILTER_S2: 1;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);

		
		switch(DEPTH_CONV_EN){
		case 0:
			// bypass this module
			if ((max_pool && out_num_iter == 0) || conv2d || (UP_SAMPLE_EN && out_num_iter == 0)){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;
				while(!done1){
#pragma HLS PIPELINE II=1
					CinLoadData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);
					
					// Repeat until the whole tile is read
					w++;
					if (w == LAYER_IN_W_T + FILTER_S - 1){
						w = 0;
						h++;
						if (h == LAYER_IN_H_T + FILTER_S - 1){
							h = 0;
							o++;
							if (o == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		case 1:
		{
			// load weights
			int o = 0;
			int p = 0;
			int q = 0;
			bool done1 = 0;
			while(!done1){
#pragma HLS PIPELINE II=1
				WeightLoadData0Type w_tmp = fifo_weight.read();
				for (int lane = 0; lane < DEPTH_CONV_LANE; lane++){
#pragma HLS UNROLL
					ap_uint<DATA_W1> utmp = w_tmp(DATA_W1 - 1, 0);
					weight_buf[o][lane][p][q] = Reinterpret<data_t1>(utmp);
#ifdef DEBUG_depth_weight
					cout << "o: " << o << " lane: " << lane << " p: " << p << " q: " << q << " weight: " << weight_buf[o][lane][p][q] << endl;
#endif
					w_tmp = w_tmp >> DATA_W1;
				}

				q++;
				if (q == FILTER_S1){
					q = 0;
					p++;
					if (p == FILTER_S1){
						p = 0;
						o++;
						if (o == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
							o = 0;
							done1 = 1;
						}
					}
				}
			}

			// compute
			// The filter size affects the H and W tile sizes in stencil modules 
			// new_Th = Th + Fh, new_Tw = Tw + Fw
			if (FILTER_S1 == 1){
				stencil_w1<data_t0, data_t1, IN_NUM_T, IN_H_T, IN_W_T, DEPTH_CONV_LANE, 1, DATA_W0, DATA_W1>(fifo_cin, weight_buf, fifo_cout, (uint)STRIDE, LAYER_IN_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T);
			} else if (FILTER_S1 == 3){
				stencil_w3<data_t0, data_t1, IN_NUM_T, IN_H_T + 2, IN_W_T + 2, DEPTH_CONV_LANE, 3, DATA_W0, DATA_W1>(fifo_cin, weight_buf, fifo_cout, (uint)STRIDE, LAYER_IN_NUM_T, LAYER_IN_H_T + 2, LAYER_IN_W_T + 2);
			}
			break;
		}
		}
		
		// Repeat until the all of the tiles are read
		// Must repeat the process until LAYER_OUT_NUM feature maps are computed
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			//bypass_prev = 1;
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}

	}
}

/**
 * Function name: relu
 * Function description: This functions performs ReLu operation and adds bias/applies batch normalization to cout results.
 */
void relu6(
		hls::stream<ConvData0Type>        &fifo_cin,
		hls::stream<ConfigInst>           &fifo_config_in,
		hls::stream<ReluData0Type>        &fifo_cout,
		hls::stream<ConfigInst>           &fifo_config_out,
		hls::stream<ConvData0Type>        &fifo_gamma_depth,
		hls::stream<ConvData0Type>        &fifo_beta_depth
){
#pragma INLINE off
	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	// dump write instructions
	// load an extra set of instructions since it's needed at the beginning of conv module
	fifo_config_out.write(inst0);
	fifo_config_out.write(inst1);
	fifo_config_out.write(inst2);
	fifo_config_out.write(inst3);
	fifo_config_out.write(inst4);
  fifo_config_out.write(inst5);

	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
    ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];

#ifdef DEBUG_config_relu6
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif

		data_t2 gamma_buf[IN_NUM_T / RELU_LANE][RELU_LANE];
		data_t2 beta_buf[IN_NUM_T / RELU_LANE][RELU_LANE];
#pragma HLS ARRAY_PARTITION variable=gamma_buf dim=2 complete
#pragma HLS ARRAY_PARTITION variable=beta_buf dim=2 complete   
		data_t0 cin_buf[RELU_LANE];
		ap_uint<DATA_W0> cout_buf[RELU_LANE];
#pragma HLS ARRAY_PARTITION variable=cin_buf complete
#pragma HLS ARRAY_PARTITION variable=cout_buf complete

		// Set up some configuration signals
		uint FILTER_S = (DEPTH_CONV_EN == 1)? 1 : (CONV_EN == 1)? (uint)FILTER_S2: 1;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		uint stride = (max_pool == 1)? 1 : (uint)STRIDE;
		bool en = (RELU6_EN == 1 || RELU_EN == 1) && (DEPTH_CONV_EN == 1) && (BATCH_NORM_EN_DEPTH == 1);
		bool norm_en = BATCH_NORM_EN_DEPTH;

#ifdef DEBUG
		uint relu_cout_cnt = 0;
		ofstream relu_data;
		relu_data.open("relu_patch.dat", ios::app);
#endif

		
		switch(en){
		case 0:
			// bypass this module
			if ((max_pool && out_num_iter == 0) || conv2d || (UP_SAMPLE_EN && out_num_iter == 0)){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = LAYER_IN_W_T + FILTER_S - 1;
				int h_bound = LAYER_IN_H_T + FILTER_S - 1;
				while(!done1){
#pragma HLS PIPELINE II=1
					ConvData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);
					
					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_IN_NUM_T / DEPTH_CONV_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		case 1:
		{
      
			if ((max_pool && out_num_iter == 0) || CONV_EN){
				// Read beta and gamma for the batch normalization
				// If there doesn't exist a batch normalization and it's a normal bias,
				// beta = bias, gamma = 0
				for (int o = 0; o < LAYER_IN_NUM_T / RELU_LANE; o++){
#pragma HLS PIPELINE II=1
					ConvData0Type beta = fifo_beta_depth.read();
					ConvData0Type gamma = fifo_gamma_depth.read();
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_beta = beta(DATA_W0 - 1, 0);
						beta_buf[o][lane] = Reinterpret<data_t2>(u32_beta);
						beta = beta >> DATA_W0;
					}

					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_gamma = gamma(DATA_W0 - 1, 0);
						gamma_buf[o][lane] = Reinterpret<data_t2>(u32_gamma);
						gamma = gamma >> DATA_W0;
					}
				}

				int o = 0;
				int h = 0;
				int w = 0;
				bool done2 = 0;

				int w_bound = LAYER_IN_W_T / STRIDE;
				int h_bound = LAYER_IN_H_T / STRIDE;
				
				// compute
				while(!done2){
#pragma HLS PIPELINE II=1
					// Read data
					ConvData0Type cin_tmp = fifo_cin.read();
					// Unpack the data based on the SIMD_LANE
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_tmp = cin_tmp(DATA_W0 - 1, 0);
						cin_buf[lane] = Reinterpret<data_t0>(u32_tmp);
						cin_tmp = cin_tmp >> DATA_W0;
					}
					// Apply beta and gamma + ReLU(6)
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL              
						data_t0 tmp = cin_buf[lane];
						if (BATCH_NORM_EN_DEPTH) tmp = gamma_buf[o][lane]*tmp + beta_buf[o][lane];
						if (RELU6_EN)
							tmp = min(max(0, tmp), 6);
            else if (RELU_EN)
              tmp = max(0, tmp);
#ifdef DEBUG_depth_relu6
						//if(lane == 0)
                         cout << w << " " << h << " " << o << in_num_iter << " " << in_h_iter << " " << in_w_iter << " " << out_num_iter << endl;
						//cout << "in: " << cin_buf[lane] << " gamma: " << gamma_buf[o][lane] << " beta: " << beta_buf[o][lane] << " norm: " << gamma_buf[o][lane]*cin_buf[lane] + beta_buf[o][lane] << " tmp: " << tmp << endl;

#endif
						cout_buf[lane] = Reinterpret<ap_uint<DATA_W0> >(tmp);
					}
					
					// write out
					// pack the data according to SIMD_LANE
					ReluData0Type wide_tmp = (
#if RELU_LANE == 16
							cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
							cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
							cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
							cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 8
																			cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
																			cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 4
																															cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 2              
																																											cout_buf[1], cout_buf[0]
#elif RELU_LANE == 1
																																																  cout_buf[0]
#endif                
					);
					fifo_cout.write(wide_tmp);

					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_IN_NUM_T / RELU_LANE){
								o = 0;
								done2 = 1;
							}
						}
					}
				}
			}
			break;
		}
		}

		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}


/**
* Function name: conv_core
* Function description: This function performs convolution.
*/
void conv_core(
data_t0 cin[IN_H_T + K_T - 1][IN_W_T + K_T - 1][IN_NUM_T],
data_t1 weight[OUT_NUM_T][K_T][K_T][IN_NUM_T],
data_t0 cout_kernel[OUT_H_T][OUT_W_T][OUT_NUM_T],
bool init,
uint LAYER_IN_NUM_T,
uint LAYER_OUT_NUM_T,
uint LAYER_IN_H_T,
uint LAYER_IN_W_T,
uint FILTER_S,
uint STRIDE
){
  #pragma HLS INLINE off
  // #define DEBUG_conv_core
  for (int o = 0; o < LAYER_OUT_NUM_T; o++)
    for (int h = 0; h < LAYER_IN_H_T / STRIDE; h++)
      for (int w = 0; w < LAYER_IN_W_T / STRIDE; w++){
        if (init){
        cout_kernel[h][w][o] = 0;
        }
        for (int i = 0; i < LAYER_IN_NUM_T; i++){
        #pragma HLS PIPELINE II=1            
        for (int p = 0; p < FILTER_S; p++)
        conv_kernel_loop: for (int q = 0; q < FILTER_S; q++){
        cout_kernel[h][w][o] += cin[h * STRIDE + (STRIDE - 1) + p][w * STRIDE + (STRIDE - 1) + q][i] * weight[o][p][q][i];
        #ifdef DEBUG_conv_core
        if((num == 0 || num==32) && h==0 && w==0)
          cout << "o:" << o << " h:" << h << " w:" << w << " i:" << i << " p:" << p << " q:" << q << " cout:" << cout_kernel[h][w][o] << " cin:" << cin[h * STRIDE + (STRIDE - 1) + p][w * STRIDE + (STRIDE - 1) + q][i] << " weight:" << weight[o][p][q][i] << endl;
        #endif
      }
    }
  }
}


/**
* Function name: kernel
* Function description: 
*/
void kernel_(
 hls::stream<DepthConvData0Type>  &fifo_cin,
 hls::stream<WeightLoadData1Type> &fifo_weight,
 hls::stream<ConvData0Type>       &fifo_cout,
 hls::stream<ConfigInst>          &fifo_config_in,
 hls::stream<ConfigInst>          &fifo_config_out
){
 data_t0 cin_local[IN_H_T + K_T - 1][IN_W_T + K_T - 1][IN_NUM_T];
#pragma HLS ARRAY_PARTITIOn variable=cin_local dim=3 cyclic factor=8  
 data_t1 weight_local[OUT_NUM_T][K_T][K_T][IN_NUM_T];
#pragma HLS ARRAY_PARTITION variable=weight_local dim=4 cyclic factor=8
 data_t0 cout_local[OUT_H_T][OUT_W_T][OUT_NUM_T];
#pragma HLS ARRAY_PARTITION variable=cout_local dim=3 cyclic factor=8

 ap_uint<DATA_W0> cout_tmp[RELU_LANE];
#pragma HLS ARRAY_PARTITION variable=cout_tmp complete 

 uint in_num_iter = 0;
 uint out_num_iter = 0;
 uint in_h_iter = 0;
 uint in_w_iter = 0;
 uint layer_iter = 0;
 
 // Read instructions
 ConfigInst inst0 = fifo_config_in.read();
 fifo_config_out.write(inst0);
 ConfigInst inst1 = fifo_config_in.read();
 fifo_config_out.write(inst1);
 ConfigInst inst2 = fifo_config_in.read();
 fifo_config_out.write(inst2);
 ConfigInst inst3 = fifo_config_in.read();
 fifo_config_out.write(inst3);
 ConfigInst inst4 = fifo_config_in.read();
 fifo_config_out.write(inst4);
ConfigInst inst5 = fifo_config_in.read();
 fifo_config_out.write(inst5);

 ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

 bool done = 0;
 bool layer_start = 0;  
 while(!done){
   if (layer_start){
     // Read instructions
     inst0 = fifo_config_in.read();
     fifo_config_out.write(inst0);
     inst1 = fifo_config_in.read();
     fifo_config_out.write(inst1);
     inst2 = fifo_config_in.read();
     fifo_config_out.write(inst2);
     inst3 = fifo_config_in.read();
     fifo_config_out.write(inst3);
     inst4 = fifo_config_in.read();
     fifo_config_out.write(inst4);
     inst5 = fifo_config_in.read();
     fifo_config_out.write(inst5);

     layer_start = 0;
   }

   // inst0
   ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
   ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
   ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
   ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
   ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
   ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
   // inst1
   ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
   ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
   ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
   ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
   ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
   ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
   // inst2
   ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
   ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
   ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
   ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
   ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
   ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16); 
   ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
   // inst3
   ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
   ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
   ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
   ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
   ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
   ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);
 
   ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
   ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
   ap_uint<1>  CONV_EN        = LAYER_EN[2];
   ap_uint<1>  RELU_EN        = LAYER_EN[3];
   ap_uint<1>  RELU6_EN       = LAYER_EN[4];
   ap_uint<1>  POOL_EN        = LAYER_EN[5];
   ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
 
   uint FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2: 1;
   bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
   bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
   bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
   uint stride1 = (DEPTH_CONV_EN == 0)? 1 : (uint)STRIDE;
   uint stride2 = (DEPTH_CONV_EN == 0)? (uint)STRIDE : 1;

   //bool test = !DEPTH_CONV_EN;
   switch(CONV_EN){
     case 0:
       // bypass
       if (max_pool && out_num_iter == 0){
         for (int o = 0; o < LAYER_IN_NUM_T / CONV_LANE; o++)
           for (int h = 0; h < LAYER_IN_H_T + FILTER_S - 1; h++)
             for (int w = 0; w < LAYER_IN_W_T + FILTER_S - 1; w++){
#pragma HLS PIPELINE II=1
               DepthConvData0Type tmp = fifo_cin.read();
               fifo_cout.write(tmp);              
             }
       }
       
       break;
     case 1:
#ifdef DEBUG_kernel
 cout << "cin" << endl;
#endif
       for (int i = 0; i < LAYER_IN_NUM_T / CONV_LANE; i++)
         for (int h = 0; h < LAYER_IN_H_T / stride1 + FILTER_S - 1; h++){
           for (int w = 0; w < LAYER_IN_W_T / stride1 + FILTER_S - 1; w++){
#pragma HLS PIPELINE II=1
             DepthConvData0Type tmp = fifo_cin.read();
             for (int lane = 0; lane < CONV_LANE; lane++){
#pragma HLS UNROLL
               ap_uint<DATA_W0> u32_tmp = tmp(DATA_W0 - 1, 0);
               cin_local[h][w][i * CONV_LANE + lane] = Reinterpret<data_t0>(u32_tmp);

#ifdef DEBUG_kernel_cin
if(DEPTH_CONV_EN){
 cout << "in: " << in_num_iter << " w: " << in_w_iter << " out: " << out_num_iter << " " << cin_local[h][w][i*CONV_LANE + lane] << endl;
}
#endif
               tmp = tmp >> DATA_W0;
             }
           }
/*#ifdef DEBUG_kernel
 cout << endl;
#endif*/
         }

//#ifdef DEBUG
//        if (in_num_iter == 0 && out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//          ofstream cin_debug("hw_cin_patch.dat");
//          for (int h = 0; h < LAYER_IN_H_T + FILTER_S - 1; h++)
//            for (int w = 0; w < LAYER_IN_W_T + FILTER_S - 1; w++){
//              cin_debug << cin_local[h][w][0] << endl;
//            }
//          cin_debug.close();
//        }
//#endif    

#ifdef DEBUG_kernel
 cout << "weights: " << endl;
#endif

       for (int o = 0; o < LAYER_OUT_NUM_T; o++){
         for (int p = 0; p < FILTER_S; p++)
           for (int q = 0; q < FILTER_S; q++)
             for (int i = 0; i < LAYER_IN_NUM_T / CONV_LANE; i++){
#pragma HLS PIPELINE II=1
               WeightLoadData1Type tmp = fifo_weight.read();
#ifdef DEBUG
//            if (out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//              if (o == 0 && p == 0 && q == 0){
//                cout << "conv_core_first_weight: " << Reinterpret<data_t1>(tmp) << "(" << o 
//                  << " " << i << " " << out_num_iter << " " << in_h_iter << " " << in_w_iter << endl;
//              }
//            }
#endif
               for (int lane = 0; lane < CONV_LANE; lane++){
#pragma HLS UNROLL
                 ap_uint<DATA_W1> u32_tmp = tmp(DATA_W1 - 1, 0);
                 weight_local[o][p][q][i * CONV_LANE + lane] = Reinterpret<data_t1>(u32_tmp);
#ifdef DEBUG_kernel
 cout << "weight: " << weight_local[o][p][q][i * CONV_LANE + lane] << " o " << o << " p " << p << " q " << q << " i * CONV_LANE + lane " << i * CONV_LANE + lane << endl;
#endif

#ifdef DEBUG
//              if (in_num_iter == 0 && out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//                if (o == 0 && p == 0 && q == 0 && i == 0){
//                  ap_uint<32> debug_tmp = tmp(DATA_W1 - 1, 0);
//                  data_t1 debug_f_tmp = Reinterpret<data_t1>(debug_tmp);
//                  cout << debug_f_tmp;
//                  debug_f_tmp = Reinterpret<data_t1>(tmp(DATA_W1 - 1, 0));
//                  cout << debug_f_tmp;
//                  cout << "conv_core_first_weight: " << weight_local[0][p][q][0] << endl;
//                }
//              }
#endif              
                 tmp = tmp >> DATA_W1;
               }
             }
#ifdef DEBUG_kernel
 cout << endl;
#endif
     }

//#ifdef DEBUG
////    // print out the first filter
//    if (in_num_iter == 0 && out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//      for (int p = 0; p < FILTER_S; p++)
//        for (int q = 0; q < FILTER_S; q++){
//          cout << "conv_core: " << weight_local[0][p][q][0] << endl;
//        }
//    }
//#endif    
   
       conv_core(cin_local, weight_local, cout_local, (in_num_iter == 0), LAYER_IN_NUM_T, LAYER_OUT_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T, FILTER_S, stride2);


//#ifdef DEBUG
//        cout << "conv results: " << endl;
//        if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM && out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//          //ofstream debug_conv("kernel_conv_patch.dat");
//          for (int h = 0; h < OUT_H_T; h++){
//            for (int w = 0; w < OUT_W_T; w++){
//              cout << cout_local[h][w][0] << " ";
//            }
//            cout << endl;
//          }
//        }
//#endif 
//
//#ifdef DEBUG
//        if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM && out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//          ofstream debug_conv("kernel_conv_patch.dat");
//          for (int h = 0; h < OUT_H_T; h++)
//            for (int w = 0; w < OUT_W_T; w++){
//              debug_conv << cout_local[h][w][0] << endl;
//            }
//          debug_conv.close();
//        }
//#endif    

#ifdef DEBUG_kernel2
 cout << "conv results: " << endl ;
#endif
       if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
         for (int o = 0; o < LAYER_OUT_NUM_T / RELU_LANE; o++)
           for (int h = 0; h < LAYER_IN_H_T / STRIDE; h++){
             for (int w = 0; w < LAYER_IN_W_T / STRIDE; w++){
#pragma HLS PIPELINE II=1
               for (int lane = 0; lane < CONV_LANE; lane++){
#pragma HLS UNROLL  
                 data_t0 tmp_f = cout_local[h][w][o * RELU_LANE + lane];
                 cout_tmp[lane] = Reinterpret<ap_uint<DATA_W0> >(tmp_f);
#ifdef DEBUG_kernel2
//if(in_h_iter == 0){
 cout << "in: " << in_num_iter << " w: " << in_w_iter << " out: " << out_num_iter << " " << tmp_f << endl ;
//}
#endif
               }
               ConvData0Type tmp = (
#if RELU_LANE == 16                
                 cout_tmp[15], cout_tmp[14], cout_tmp[13], cout_tmp[12],
                 cout_tmp[11], cout_tmp[10], cout_tmp[9], cout_tmp[8],
                 cout_tmp[7], cout_tmp[6], cout_tmp[5], cout_tmp[4],
                 cout_tmp[3], cout_tmp[2], cout_tmp[1], cout_tmp[0]
#elif RELU_LANE == 8
                 cout_tmp[7], cout_tmp[6], cout_tmp[5], cout_tmp[4],
                 cout_tmp[3], cout_tmp[2], cout_tmp[1], cout_tmp[0]
#elif RELU_LANE == 4
                 cout_tmp[3], cout_tmp[2], cout_tmp[1], cout_tmp[0]
#elif RELU_LANE == 2
                 cout_tmp[1], cout_tmp[0]
#elif RELU_LANE == 1
                 cout_tmp[0]
#endif                
               );
               fifo_cout.write(tmp);
#ifdef DEBUG
//            if (out_num_iter == 0 && in_h_iter == 0 && in_w_iter == 0){
//              if (o == 0 && h == 1 && w == 1){
//                data_t0 f_tmp = Reinterpret<data_t0>(tmp);
//                cout << "conv first one: " << f_tmp << endl;
//              }
//            }
#endif            
             }
#ifdef DEBUG_kernel
 cout << endl;
#endif            
         }
       }
       break;
   }

   in_num_iter += LAYER_IN_NUM_T;
   if (in_num_iter >= LAYER_IN_NUM){
     in_num_iter = 0;
     in_h_iter += LAYER_IN_H_T;
     if (in_h_iter >= LAYER_IN_H){
       in_h_iter = 0;
       in_w_iter += LAYER_IN_W_T;
       if (in_w_iter >= LAYER_IN_W){
         in_w_iter = 0;
         out_num_iter += LAYER_OUT_NUM_T;
         if (out_num_iter >= LAYER_OUT_NUM){
           out_num_iter = 0;
           layer_iter += 1;
           layer_start = 1;
           if (layer_iter == LAYER_BATCH){
             layer_iter = 0;
             done = 1;
           }
         }
       }
     }
   }
 }
}

/**
 * Function name: conv
 * Function description: This function performs normal convoluation for any given filter size
 *                       Currently, it is configured to work with the Systolic array
 *                       Note that the code for Systolic array is not in this file, to see how to add it refer to the README
 *                       If you want to work with a simple compute engine for conv, uncomment the "kernel" module in this file
 */
void conv(
		hls::stream<DepthConvData0Type>  &fifo_cin,
		hls::stream<WeightLoadData1Type> &fifo_weight,
		hls::stream<ConfigInst>          &fifo_config_in,
		hls::stream<ConvData0Type>       &fifo_cout,
		hls::stream<ConfigInst>          &fifo_config_out
){
#pragma HLS INLINE off 
#define DEBUG_kernel
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Dummpy first read
	// The previous module (currently relu6) should write the instructions twice
	ConfigInst inst0 = fifo_config_in.read();
	ConfigInst inst1 = fifo_config_in.read();
	ConfigInst inst2 = fifo_config_in.read();
	ConfigInst inst3 = fifo_config_in.read();
	ConfigInst inst4 = fifo_config_in.read();
	ConfigInst inst5 = fifo_config_in.read();

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);
	// Refer to cin_load module to understand the meaning of the instructions
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
	// inst1
	ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
	ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
	ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
	ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
	ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
	ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
	// inst2
	ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
	ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
	ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
	ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
	ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
	ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
	ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
	// inst3
	ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
	ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
	ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
	ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
	ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
	ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

	ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
	ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
	ap_uint<1>  CONV_EN        = LAYER_EN[2];
	ap_uint<1>  RELU_EN        = LAYER_EN[3];
	ap_uint<1>  RELU6_EN       = LAYER_EN[4];
	ap_uint<1>  POOL_EN        = LAYER_EN[5];
	ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
	ap_uint<1>  BIAS_EN        = LAYER_EN[7];
	ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];

	uint FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2: 1;
	bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
	bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
	bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);

	bool test = (CONV_EN == 0);
	switch(CONV_EN){
	case 0:
		// bypass
		for (int layer_iter = 0; layer_iter < LAYER_BATCH; layer_iter++){
			// Read instructions
#ifdef DEBUG_config_conv
			cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
			cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
			cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
			cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
			inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);
			// Refer to cin_load module to understand the meaning of the instructions
			// inst0
			LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
			LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
			LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
			LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
			LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
			LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
			// inst1
			LAYER_IN_NUM     = inst1(32*0+31, 32*0);
			LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
			LAYER_IN_H       = inst1(32*2+31, 32*2);
			LAYER_IN_W       = inst1(32*3+31, 32*3);
			LAYER_OUT_H      = inst1(32*4+31, 32*4);
			LAYER_OUT_W      = inst1(32*5+31, 32*5);
			// inst2
			CIN_OFFSET       = inst2(32*0+31, 32*0);
			WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
			BIAS_OFFSET      = inst2(32*2+31, 32*2);
			COUT_OFFSET      = inst2(32*3+31, 32*3);
			FILTER_S1        = inst2(32*4+15, 32*4);
			FILTER_S2        = inst2(32*4+31, 32*4+16);
			STRIDE           = inst2(32*5+31, 32*5);
			// inst3
			LAYER_EN         = inst3(32*0+31, 32*0);
			PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
			LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
			LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
			LAYER_IN_H_T     = inst3(32*3+31, 32*3);
			LAYER_IN_W_T     = inst3(32*4+31, 32*4);

			CONV_1ST_EN      = LAYER_EN[0];
			DEPTH_CONV_EN    = LAYER_EN[1];
			CONV_EN          = LAYER_EN[2];
			RELU_EN          = LAYER_EN[3];
			RELU6_EN         = LAYER_EN[4];
			POOL_EN          = LAYER_EN[5];
			UP_SAMPLE_EN     = LAYER_EN[6]; // reserved

			// Set up some configuration signals
			FILTER_S = (CONV_EN == 1)? (uint)FILTER_S2: 1;
			separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
			conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
			max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);

			int in_h_iter = 0;
			int in_w_iter = 0;
			int out_num_iter = 0;
			int in_num_iter = 0;
			bool done1 = 0;
			while(!done1){
				if ((max_pool && out_num_iter == 0) || (UP_SAMPLE_EN && out_num_iter == 0)){
					int o = 0;
					int h = 0;
					int w = 0;
					bool done2 = 0;
					while(!done2){
#pragma HLS PIPELINE II=1
						DepthConvData0Type tmp = fifo_cin.read();
						fifo_cout.write(tmp);
						
						// Repeat until the whole tile is read
						w++;
						if (w == LAYER_IN_W_T + FILTER_S - 1){
							w = 0;
							h++;
							if (h == LAYER_IN_H_T + FILTER_S - 1){
								h = 0;
								o++;
								if (o == LAYER_IN_NUM_T / CONV_LANE){
									o = 0;
									done2 = 1;
								}
							}
						}
					}
				}
#ifdef DEBUG_config_conv
				cout << in_num_iter << " " << out_num_iter << " " << in_w_iter << " " << in_h_iter << endl;
#endif
				// Repeat until all the tiles are read
				// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
				in_num_iter += LAYER_IN_NUM_T;
				if (in_num_iter >= LAYER_IN_NUM){
					in_num_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						in_w_iter += LAYER_IN_W_T;
						if (in_w_iter >= LAYER_IN_W){
							in_w_iter = 0;
							in_h_iter += LAYER_IN_H_T;
							if (in_h_iter >= LAYER_IN_H){
								in_h_iter = 0;
								done1 = 1;
							}
						}
					}
				}

			}
		}
		break;
	// compute
	case 1:
#ifdef DEBUG_kernel
		cout << "before kernel" << endl;
#endif
		// int count = 0;
		// while(!fifo_cin.empty()){
		// 	DepthConvData0Type item = fifo_cin.read();
		// 			// float num[8];
		// 			// // printf("output: ");
		// 			// for(int i=0; i<8; i++){
		// 			// 	num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
		// 			// 	printf("%10f\t", num[i]);
		// 			// }
		// 			// printf("\n");
		// 	count++;
		// }
		// cout<<"cins: "<<count<<endl;
		// count = 0;
		// while(!fifo_weight.empty()){
		// 	DepthConvData0Type item = fifo_weight.read();
		// 			// float num[8];
		// 			// // printf("output: ");
		// 			// for(int i=0; i<8; i++){
		// 			// 	num[i] = Reinterpret<float>((ap_uint<32>)item.data((i+1)*32-1, 32*i));
		// 			// 	printf("%10f\t", num[i]);
		// 			// }
		// 			// printf("\n");
		// 	count++;
		// }
		// cout<<"weights: "<<count<<endl;
		// return;
		// Calls systolic array
		// Refer to README to see how to add the systolic array
		// You can replace it with your own implementations
		// If you want to check with a simple implementation, uncomment the "kernel" module in this file
    
		kernel(fifo_cin, fifo_weight, fifo_cout, fifo_config_in, fifo_config_out);
#ifdef DEBUG_kernel
		
#endif
		break;
	}
}

void relu(
		hls::stream<ConvData0Type>        &fifo_cin,
		hls::stream<ConfigInst>           &fifo_config_in,
		hls::stream<ReluData0Type>        &fifo_cout,
		hls::stream<ConfigInst>           &fifo_config_out,
		hls::stream<ConvData0Type>        &fifo_gamma_conv,
		hls::stream<ConvData0Type>        &fifo_beta_conv
){
#pragma INLINE off
	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

  // fifo_config_out.write(inst0);
	// fifo_config_out.write(inst1);
	// fifo_config_out.write(inst2);
	// fifo_config_out.write(inst3);
	// fifo_config_out.write(inst4);
  // fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

    ap_uint<32> LAYER_TCONV_STRIDE 	= inst5(32*2+31, 32*2);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  BATCH_NORM_EN  = LAYER_EN[10];
		ap_uint<1>  LOAD_PREV_CIN  = LAYER_EN[11];
    ap_uint<1>  BATCH_NORM_EN_DEPTH  = LAYER_EN[12];

		data_t2 beta_buf[OUT_NUM_T / RELU_LANE][RELU_LANE];
		data_t2 gamma_buf[OUT_NUM_T / RELU_LANE][RELU_LANE]; 
#pragma HLS ARRAY_PARTITION variable=beta_buf dim=2 complete 
#pragma HLS ARRAY_PARTITION variable=gamma_buf dim=2 complete 
		data_t0 cin_buf[RELU_LANE];
		ap_uint<DATA_W0> cout_buf[RELU_LANE];
#pragma HLS ARRAY_PARTITION variable=cin_buf complete
#pragma HLS ARRAY_PARTITION variable=cout_buf complete

		// Set up some configuration signals
		uint FILTER_S = 1;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		uint stride = (max_pool == 1)? 1 : (uint)STRIDE;
		bool en = RELU_EN || BIAS_EN || RELU6_EN || BATCH_NORM_EN;
    bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_EN == 1);
    bool bias_en = (CONV_EN == 1 && BIAS_EN == 1);

#ifdef DEBUG
		uint relu_cout_cnt = 0;
		ofstream relu_data;
		relu_data.open("relu_patch.dat", ios::app);
#endif
		switch(en){
		case 0:
			// bypass this module
			if (((max_pool || UP_SAMPLE_EN) && out_num_iter == 0) || (!max_pool && (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM))){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = (LAYER_IN_W_T / stride + FILTER_S - 1)*LAYER_TCONV_STRIDE;
				int h_bound = (LAYER_IN_H_T / stride + FILTER_S - 1)*LAYER_TCONV_STRIDE;
				while(!done1){
#pragma HLS PIPELINE II=1
					ConvData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);

					// If after conv module neither exists bias nor batch normalization layer, there is no data to read from these FIFOs
					if (norm_conv_en == 1){
					  ConvData0Type beta_conv = fifo_beta_conv.read();
					  ConvData0Type gamma_conv = fifo_gamma_conv.read();
          }
					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / RELU_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		// compute
		case 1:
		{
			if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
				// Read beta and gamma for the batch normalization
				// If there doesn't exist a batch normalization and it's a normal bias,
				// beta = bias, gamma = 0
				for (int o = 0; o < LAYER_OUT_NUM_T / RELU_LANE; o++){
#pragma HLS PIPELINE II=1
					ConvData0Type beta = fifo_beta_conv.read();
					ConvData0Type gamma = fifo_gamma_conv.read();
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_beta = beta(DATA_W0 - 1, 0);
						beta_buf[o][lane] = Reinterpret<data_t2>(u32_beta);
						beta = beta >> DATA_W0;
					}

					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_gamma = gamma(DATA_W0 - 1, 0);
						gamma_buf[o][lane] = Reinterpret<data_t2>(u32_gamma);
						gamma = gamma >> DATA_W0;
					}
				}

				int o = 0;
				int h = 0;
				int w = 0;
				bool done2 = 0;

				int w_bound = (LAYER_IN_W_T / STRIDE)*LAYER_TCONV_STRIDE;
				int h_bound = (LAYER_IN_H_T / STRIDE)*LAYER_TCONV_STRIDE;

				while(!done2){
#pragma HLS PIPELINE II=1
					ConvData0Type cin_tmp = fifo_cin.read();
					// Unpack data according to SIMD_LANE
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_tmp = cin_tmp(DATA_W0 - 1, 0);
						cin_buf[lane] = Reinterpret<data_t0>(u32_tmp);
						cin_tmp = cin_tmp >> DATA_W0;
					}
					// Apply beta and gamma + ReLU(6)
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL    
						data_t0 cin_data = cin_buf[lane];
						data_t0 tmp = cin_data;
						if (bias_en || BATCH_NORM_EN)
							tmp = cin_data + beta_buf[o][lane];
						//else if(BATCH_NORM_EN)
						//	tmp = gamma_buf[o][lane]*tmp + beta_buf[o][lane];
						if (RELU6_EN && !BATCH_NORM_EN_DEPTH)
							tmp = min(max(0, tmp), 6);
						else if (RELU_EN)
							tmp = max(tmp*0.001, tmp);
						cout_buf[lane] = Reinterpret<ap_uint<DATA_W0> >(tmp);
#ifdef DEBUG_relu
						if(out_num_iter == 0 && in_h_iter == 0){
							cout << cin_data << " " << tmp << endl;
						}
#endif
#ifdef DEBUG_conv_relu
						if(DEPTH_CONV_EN && lane == 0)
							cout << "in: " << cin_buf[lane] << " gamma: " << gamma_buf[o][lane] << " beta: " << beta_buf[o][lane] << " norm: " << gamma_buf[o][lane]*cin_buf[lane] + beta_buf[o][lane] << " tmp: " << tmp << endl;

#endif
					}
					// write out
					// Pack according to SIMD_LANE
					ReluData0Type wide_tmp = (
#if RELU_LANE == 16
							cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
							cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
							cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
							cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 8
																			cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
																			cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 4
																															cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 2              
																																											cout_buf[1], cout_buf[0]
#elif RELU_LANE == 1
																																																  cout_buf[0]
#endif                
					);
					fifo_cout.write(wide_tmp);

					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / RELU_LANE){
								o = 0;
								done2 = 1;
							}
						}
					}
				}
			}
			break;
		}
		}

		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

/**
 * Function name: add
 * Function description: This functions add the input of previous layer to result of this layer.
 *                       It helps supporting building blocks such as residual bottleneck layer in MobileNetV2
 */
void add(
		hls::stream<ConvData0Type>        &fifo_cin,
		hls::stream<ConvData0Type>        &fifo_conv,
		hls::stream<ConfigInst>           &fifo_config_in,
		hls::stream<ConvData0Type>        &fifo_cout,
		hls::stream<ConfigInst>           &fifo_config_out
){
#pragma INLINE off
	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);


	bool layer_start = 0;
	bool done = 0;
	while(!done){
    
		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

    ap_uint<32> LAYER_TCONV_STRIDE 	= inst5(32*2+31, 32*2);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  LOAD_PREV_CIN  = LAYER_EN[11];

#ifdef DEBUG_config_add
		cout << LAYER_IN_NUM_HW << " " << LAYER_OUT_NUM_HW << " " << LAYER_IN_H_HW << " " << LAYER_IN_W_HW << " " << LAYER_OUT_H_HW << " " << LAYER_OUT_W_HW << endl;
		cout << LAYER_IN_NUM << " " << LAYER_OUT_NUM << " " << LAYER_IN_H << " " << LAYER_IN_W << " " << LAYER_OUT_H << " " << LAYER_OUT_W << endl;
		cout << CIN_OFFSET << " " << WEIGHT_OFFSET << " " << BIAS_OFFSET << " " << COUT_OFFSET << " " << FILTER_S1 << " " << FILTER_S2 << " " << STRIDE << endl;
		cout << LAYER_EN << " " << PREV_CIN_OFFSET << " " << LAYER_IN_NUM_T << " " << LAYER_OUT_NUM_T << " " << LAYER_IN_H_T << " " << LAYER_IN_W_T << endl;
#endif

		data_t0 cin_buf[CONV_LANE];
		data_t0 conv_buf[CONV_LANE];
		ap_uint<DATA_W0> cout_buf[CONV_LANE];
#pragma HLS ARRAY_PARTITION variable=cin_buf complete
#pragma HLS ARRAY_PARTITION variable=conv_buf complete
#pragma HLS ARRAY_PARTITION variable=cout_buf complete

		// Set up some configuration signals
		uint FILTER_S = 1;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		uint stride = (max_pool == 1)? 1 : (uint)STRIDE;
		bool en = LOAD_PREV_CIN;
#ifdef DEBUG
		uint relu_cout_cnt = 0;
		ofstream relu_data;
		relu_data.open("relu_patch.dat", ios::app);
#endif
		switch(en){
		case 0:
			// bypass this module
			if (((max_pool || UP_SAMPLE_EN) && out_num_iter == 0) || (!max_pool && (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM))){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				// int w_bound = LAYER_IN_W_T / stride + FILTER_S - 1;
				// int h_bound = LAYER_IN_H_T / stride + FILTER_S - 1;
        int w_bound = (LAYER_IN_W_T / stride + FILTER_S - 1)*LAYER_TCONV_STRIDE;
				int h_bound = (LAYER_IN_H_T / stride + FILTER_S - 1)*LAYER_TCONV_STRIDE;
        // cout<<w_bound<<" "<<h_bound<<" "<<LAYER_OUT_NUM_T<<" "<<LAYER_TCONV_STRIDE<<" "<<stride<<endl;
				while(!done1){
#pragma HLS PIPELINE II=1
					if(!fifo_conv.empty()/* && !fifo_cin.empty()*/){
						ConvData0Type tmp = 0;
						fifo_conv.read_nb(tmp);
						fifo_cout.write(tmp);
						//ConvData0Type junk = 0;
						//fifo_cin.read_nb(junk);
						
						// Repeat until the whole tile is read
						w++;
						if (w == w_bound){
							w = 0;
							h++;
							if (h == h_bound){
								h = 0;
								o++;
								if (o == LAYER_OUT_NUM_T / CONV_LANE){
									o = 0;
									done1 = 1;
								}
							}
						}
					}
				}
			}
			break;
		// compute
		case 1:
		{
			if (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done2 = 0;

				int w_bound = LAYER_IN_W_T;
				int h_bound = LAYER_IN_H_T;

				while(!done2){
#pragma HLS PIPELINE II=1
          // cout<<(!fifo_cin.empty() && !fifo_conv.empty())<<" "<<(!fifo_cin.empty())<<" "<<(!fifo_conv.empty())<<endl;
					if(!fifo_cin.empty() && !fifo_conv.empty()){
						// Read the result of this layer and the previous cin
						ConvData0Type cin_tmp = 0;
						fifo_cin.read_nb(cin_tmp);
						ConvData0Type conv_tmp = 0;
						fifo_conv.read_nb(conv_tmp);
						// Unpack the data according to SIMD_LANE
						for (int lane = 0; lane < CONV_LANE; lane++){
#pragma HLS UNROLL
							ap_uint<DATA_W0> u32_tmp = cin_tmp(DATA_W0 - 1, 0);
							cin_buf[lane] = Reinterpret<data_t0>(u32_tmp);
							cin_tmp = cin_tmp >> DATA_W0;
						}

						for (int lane = 0; lane < CONV_LANE; lane++){
#pragma HLS UNROLL
							ap_uint<DATA_W0> u32_tmp = conv_tmp(DATA_W0 - 1, 0);
							conv_buf[lane] = Reinterpret<data_t0>(u32_tmp);
							conv_tmp = conv_tmp >> DATA_W0;
						}

						// Add
						for (int lane = 0; lane < CONV_LANE; lane++){
#pragma HLS UNROLL    
							data_t0 cin_data = cin_buf[lane];
							data_t0 conv_data = conv_buf[lane];
							data_t0 tmp = cin_data + conv_data;
							cout_buf[lane] = Reinterpret<ap_uint<DATA_W0> >(tmp);
              // #define DEBUG_add
#ifdef DEBUG_add
            if(lane==0 && o==0)
							cout << "cin: " << cin_data << " conv: " << conv_data << " tmp: " << tmp << endl;
#endif
						}

						// write out
						// Pack the data according to SIMD_LANE
						ReluData0Type wide_tmp = (
#if RELU_LANE == 16
								cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
								cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
								cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
								cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 8
																				cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
																				cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 4
																																cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 2              
																																												cout_buf[1], cout_buf[0]
#elif RELU_LANE == 1
																																																	  cout_buf[0]
#endif                
						);
						fifo_cout.write(wide_tmp);

						// Repeat until the whole tile is read
						w++;
						if (w == w_bound){
							w = 0;
							h++;
							if (h == h_bound){
								h = 0;
								o++;
								if (o == LAYER_OUT_NUM_T / RELU_LANE){
									o = 0;
									done2 = 1;
								}
							}
						}
					}
				}
			}
			break;
		}
		}
    // cout<<count++<<endl;
		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

/**
 * Function name: relu
 * Function description: This functions performs ReLu operation and adds bias/applies batch normalization to cout results.
 */
void relu_1(
		hls::stream<ConvData0Type>        &fifo_cin,
		hls::stream<ConfigInst>           &fifo_config_in,
		hls::stream<ReluData0Type>        &fifo_cout,
		hls::stream<ConfigInst>           &fifo_config_out,
		hls::stream<ConvData0Type>        &fifo_gamma_conv,
		hls::stream<ConvData0Type>        &fifo_beta_conv
){
#pragma INLINE off
	// tiling iterators
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

  fifo_config_out.write(inst0);
	fifo_config_out.write(inst1);
	fifo_config_out.write(inst2);
	fifo_config_out.write(inst3);
	fifo_config_out.write(inst4);
  fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
  int count = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

    ap_uint<32> LAYER_TCONV_STRIDE 	=  inst5(32*2+31, 32*2);
    ap_uint<32> FILTER_D0           =  inst5(32*4+31, 32*4+16);

		ap_uint<1>  CONV_1ST_EN           = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN         = LAYER_EN[1];
		ap_uint<1>  CONV_EN               = LAYER_EN[2];
		// ap_uint<1>  RELU_EN               = LAYER_EN[3];
		ap_uint<1>  RELU6_EN              = LAYER_EN[4];
		ap_uint<1>  POOL_EN               = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN          = LAYER_EN[6];  // reserved
		// ap_uint<1>  BIAS_EN               = LAYER_EN[7];
		// ap_uint<1>  BATCH_NORM_EN         = LAYER_EN[10];
		ap_uint<1>  LOAD_PREV_CIN         = LAYER_EN[11];
    ap_uint<1>  BATCH_NORM_EN_DEPTH   = LAYER_EN[12];
    ap_uint<1>  RELU_1_EN             = LAYER_EN[13];
    ap_uint<1>  BIAS_1_EN             = LAYER_EN[14];
    ap_uint<1>  BATCH_NORM_1_EN       = LAYER_EN[15];

    // cout<<RELU_EN<<" "<<BIAS_EN<<" "<<BATCH_NORM_EN<<endl;

		data_t2 beta_buf[OUT_NUM_T / RELU_LANE][RELU_LANE];
		data_t2 gamma_buf[OUT_NUM_T / RELU_LANE][RELU_LANE]; 
#pragma HLS ARRAY_PARTITION variable=beta_buf dim=2 complete 
#pragma HLS ARRAY_PARTITION variable=gamma_buf dim=2 complete 
		data_t0 cin_buf[RELU_LANE];
		ap_uint<DATA_W0> cout_buf[RELU_LANE];
#pragma HLS ARRAY_PARTITION variable=cin_buf complete
#pragma HLS ARRAY_PARTITION variable=cout_buf complete
		// Set up some configuration signals
		uint FILTER_S = FILTER_D0;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		uint stride = (max_pool == 1)? 1 : (uint)STRIDE;
		bool en = RELU_1_EN || BIAS_1_EN || RELU6_EN || BATCH_NORM_1_EN;
    bool norm_conv_en = (CONV_EN == 1 && BATCH_NORM_1_EN == 1);
    bool bias_en = (CONV_EN == 1 && BIAS_1_EN == 1);
    ap_uint<4> padding = (LAYER_IN_W_HW - LAYER_IN_H)/2;


#ifdef DEBUG
		uint relu_cout_cnt = 0;
		ofstream relu_data;
		relu_data.open("relu_patch.dat", ios::app);
#endif
    int count2 = 0;
    // cout<<en<<endl;
		switch(en){
		case 0:
			// bypass this module
			if (((max_pool || UP_SAMPLE_EN) && out_num_iter == 0) || (!max_pool && (out_num_iter + LAYER_OUT_NUM_T <= LAYER_OUT_NUM))){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;
        

				int w_bound = (LAYER_IN_W_T / stride + FILTER_S - 1);
				int h_bound = (LAYER_IN_H_T / stride + FILTER_S - 1);
        
				while(!done1){
#pragma HLS PIPELINE II=1
					ConvData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);

					// If after conv module neither exists bias nor batch normalization layer, there is no data to read from these FIFOs
					if (norm_conv_en == 1){
					  ConvData0Type beta_conv = fifo_beta_conv.read();
					  ConvData0Type gamma_conv = fifo_gamma_conv.read();
          }
					// Repeat until the whole tile is read
          // count2++;
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_IN_NUM_T / RELU_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		// compute
		case 1:
		{
			if (out_num_iter + LAYER_OUT_NUM_T <= LAYER_OUT_NUM){
				// Read beta and gamma for the batch normalization
				// If there doesn't exist a batch normalization and it's a normal bias,
				// beta = bias, gamma = 0
				for (int o = 0; o < LAYER_IN_NUM_T / RELU_LANE; o++){
#pragma HLS PIPELINE II=1
					ConvData0Type beta = fifo_beta_conv.read();
					ConvData0Type gamma = fifo_gamma_conv.read();
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_beta = beta(DATA_W0 - 1, 0);
						beta_buf[o][lane] = Reinterpret<data_t2>(u32_beta);
						beta = beta >> DATA_W0;
					}

					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_gamma = gamma(DATA_W0 - 1, 0);
						gamma_buf[o][lane] = Reinterpret<data_t2>(u32_gamma);
						gamma = gamma >> DATA_W0;
					}
				}

				int o = 0;
				int h = 0;
				int w = 0;
				bool done2 = 0;

				int w_bound = (LAYER_IN_W_T+FILTER_S2-1) / STRIDE;
				int h_bound = (LAYER_IN_H_T+FILTER_S2-1) / STRIDE;//change

        bool topPaddingFlag = false;
        bool downPaddingFlag = false;
        bool leftPaddingFlag = false;
        bool rightPaddingFlag = false;
        if(in_h_iter==0)
          topPaddingFlag = true;
        if(in_h_iter==(LAYER_IN_H-LAYER_IN_H_T))
          downPaddingFlag = true;
        if(in_w_iter==0)
          leftPaddingFlag = true;
        if(in_w_iter==(LAYER_IN_W-LAYER_IN_W_T))
          rightPaddingFlag = true;
         
				while(!done2){
          
#pragma HLS PIPELINE II=1
					ConvData0Type cin_tmp = fifo_cin.read();
					// Unpack data according to SIMD_LANE
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL
						ap_uint<DATA_W0> u32_tmp = cin_tmp(DATA_W0 - 1, 0);
						cin_buf[lane] = Reinterpret<data_t0>(u32_tmp);
						cin_tmp = cin_tmp >> DATA_W0;
					}
					// Apply beta and gamma + ReLU(6)
					for (int lane = 0; lane < RELU_LANE; lane++){
#pragma HLS UNROLL    
						data_t0 cin_data = cin_buf[lane];
						data_t0 tmp = cin_data;
						if (bias_en || BATCH_NORM_1_EN)
							tmp = gamma_buf[o][lane]*cin_data + beta_buf[o][lane];
              // cout<<gamma_buf[o][lane] <<" "<<beta_buf[o][lane] <<endl;
              // cout<<
						// else if(BATCH_NORM_EN)
						// 	tmp = gamma_buf[o][lane]*tmp + beta_buf[o][lane];
						if (RELU6_EN && !BATCH_NORM_EN_DEPTH)
							tmp = min(max(0, tmp), 6);
						else if (RELU_1_EN)
							tmp = max(tmp*0.001, tmp);
						cout_buf[lane] = Reinterpret<ap_uint<DATA_W0> >(tmp);
#ifdef DEBUG_relu
						if(out_num_iter == 0 && in_h_iter == 0){
							cout << cin_data << " " << tmp << endl;
						}
#endif
#ifdef DEBUG_conv_relu
						if(DEPTH_CONV_EN && lane == 0)
							cout << "in: " << cin_buf[lane] << " gamma: " << gamma_buf[o][lane] << " beta: " << beta_buf[o][lane] << " norm: " << gamma_buf[o][lane]*cin_buf[lane] + beta_buf[o][lane] << " tmp: " << tmp << endl;

#endif
					}
					// write out
					// Pack according to SIMD_LANE
					ReluData0Type wide_tmp = (
#if RELU_LANE == 16
							cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
							cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
							cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
							cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 8
																			cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
																			cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 4
																															cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif RELU_LANE == 2              
																																											cout_buf[1], cout_buf[0]
#elif RELU_LANE == 1
																																																  cout_buf[0]
#endif                
					);

          if(h<=(padding-1) && topPaddingFlag)
            wide_tmp = 0;
          if(h>=h_bound-padding && downPaddingFlag)
            wide_tmp = 0;
          if(w<=(padding-1) && leftPaddingFlag)
            wide_tmp = 0;
          if(w>=w_bound-padding && rightPaddingFlag)
            wide_tmp = 0;
          
					fifo_cout.write(wide_tmp);

					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_IN_NUM_T / RELU_LANE){
								o = 0;
								done2 = 1;
							}
						}
					}
				}
			}
			break;
		}
		}
    // cout<<count2<<endl;
    // cout<<count++<<endl;
    // cout<<LAYER_IN_H<<" "<<LAYER_IN_H_T<<endl;
		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}

/**
 * Function name: pool
 * Function description: This functions performs max-pooling operation.
 */
void pool(
		hls::stream<ReluData0Type>  &fifo_cin,
		hls::stream<ConfigInst>     &fifo_config_in,
		hls::stream<PoolData0Type>  &fifo_cout,
		hls::stream<ConfigInst>     &fifo_config_out
){
	// tiling factors
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
	    fifo_config_out.write(inst5);

			layer_start = 0;
		}
		
		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

    ap_uint<32> LAYER_TCONV_STRIDE 	= inst5(32*2+31, 32*2);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];

		// Set up some configuration signals
		bool en = POOL_EN;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);

		switch(en){
		// bypass this module
		case 0:
			if ((UP_SAMPLE_EN && out_num_iter == 0) || (!UP_SAMPLE_EN && in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM)){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = (LAYER_IN_W_T / STRIDE)*LAYER_TCONV_STRIDE;
				int h_bound = (LAYER_IN_H_T / STRIDE)*LAYER_TCONV_STRIDE;

				while(!done1){
#pragma HLS PIPELINE II=1
					PoolData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);
					
					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / POOL_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		// compute
		case 1:
			if ((max_pool && out_num_iter == 0) || (!max_pool && (in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM))){
				maxpool_w2 <data_t0, OUT_H_T, OUT_W_T, POOL_LANE, 2, DATA_W0> (fifo_cin, fifo_cout, STRIDE, POOL_EN, LAYER_OUT_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T);
			}
			break;
		}

		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}


/**
 * Function name: upsample
 * Function description: This function performs bilinear interpolation upsampling to 2x size.
 */
void upsample(
		hls::stream<ReluData0Type>  &fifo_cin,
		hls::stream<ConfigInst>     &fifo_config_in,
		hls::stream<PoolData0Type>  &fifo_cout,
    hls::stream<PoolData0Type>  &fifo_cout2,
		hls::stream<ConfigInst>     &fifo_config_out
){
	// tiling factors
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}
		
		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
    ap_uint<1>  UP_SAMPLE_OUT  = LAYER_EN[12];

		// Set up some configuration signals
		bool en = UP_SAMPLE_EN;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0) && (UP_SAMPLE_OUT == 0);

		switch(en){
		// bypass this module
		case 0:
			if ((max_pool && out_num_iter == 0) || (!max_pool && in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM)){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = LAYER_IN_W_T / STRIDE;
				int h_bound = LAYER_IN_H_T / STRIDE;

				while(!done1){
#pragma HLS PIPELINE II=1
		PoolData0Type tmp = fifo_cin.read();
		fifo_cout.write(tmp);

		// Repeat until the whole tile is read
		w++;
		if (w == w_bound){
			w = 0;
			h++;
			if (h == h_bound){
				h = 0;
				o++;
				if (o == LAYER_OUT_NUM_T / POOL_LANE){
					o = 0;
					done1 = 1;
				}
			}
		}
				}
			}
			break;
		// compute
		// It passes the results to two FIFOs,
		// one for the results of the odd rows of the imagesize
		// and the other for the even rows
		case 1:
			
				upsample_w2 <data_t0, OUT_H_T, OUT_W_T2, POOL_LANE, 2, DATA_W0> (fifo_cin, fifo_cout, fifo_cout2, STRIDE, en, LAYER_OUT_NUM_T, LAYER_IN_H_T, LAYER_IN_W_T);
			
			break;
		}

		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}


/**
 * Function name: merge_upsample
 * Function description: This function merges two fifos generated by bilinear upsample layer.
 *						 The upsample moduel passes the results to two FIFOs,
 *                       one for the results of the odd rows of the imagesize
 *                       and the other for the even rows
 */
void merge_upsample(
		hls::stream<PoolData0Type>  &fifo_cin,
    hls::stream<PoolData0Type>  &fifo_cin2,
		hls::stream<ConfigInst>     &fifo_config_in,
		hls::stream<PoolData0Type>  &fifo_cout,
		hls::stream<ConfigInst>     &fifo_config_out
){
	// tiling factors
	uint in_num_iter = 0;
	uint out_num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	fifo_config_out.write(inst0);
	ConfigInst inst1 = fifo_config_in.read();
	fifo_config_out.write(inst1);
	ConfigInst inst2 = fifo_config_in.read();
	fifo_config_out.write(inst2);
	ConfigInst inst3 = fifo_config_in.read();
	fifo_config_out.write(inst3);
	ConfigInst inst4 = fifo_config_in.read();
	fifo_config_out.write(inst4);
  ConfigInst inst5 = fifo_config_in.read();
	fifo_config_out.write(inst5);

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool layer_start = 0;
	bool done = 0;
	while(!done){

		if (layer_start){
			inst0 = fifo_config_in.read();
			fifo_config_out.write(inst0);
			inst1 = fifo_config_in.read();
			fifo_config_out.write(inst1);
			inst2 = fifo_config_in.read();
			fifo_config_out.write(inst2);
			inst3 = fifo_config_in.read();
			fifo_config_out.write(inst3);
			inst4 = fifo_config_in.read();
			fifo_config_out.write(inst4);
      inst5 = fifo_config_in.read();
			fifo_config_out.write(inst5);

			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		ap_uint<32> LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		ap_uint<32> LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		ap_uint<32> LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		ap_uint<32> LAYER_IN_H       = inst1(32*2+31, 32*2);
		ap_uint<32> LAYER_IN_W       = inst1(32*3+31, 32*3);
		ap_uint<32> LAYER_OUT_H      = inst1(32*4+31, 32*4);
		ap_uint<32> LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		ap_uint<32> CIN_OFFSET       = inst2(32*0+31, 32*0);
		ap_uint<32> WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		ap_uint<32> BIAS_OFFSET      = inst2(32*2+31, 32*2);
		ap_uint<32> COUT_OFFSET      = inst2(32*3+31, 32*3);
		ap_uint<16> FILTER_S1        = inst2(32*4+15, 32*4);
		ap_uint<16> FILTER_S2        = inst2(32*4+31, 32*4+16);
		ap_uint<32> STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		ap_uint<32> LAYER_EN         = inst3(32*0+31, 32*0);
		ap_uint<32> PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		ap_uint<16> LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		ap_uint<16> LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		ap_uint<32> LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		ap_uint<32> LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		ap_uint<1>  CONV_1ST_EN    = LAYER_EN[0];
		ap_uint<1>  DEPTH_CONV_EN  = LAYER_EN[1];
		ap_uint<1>  CONV_EN        = LAYER_EN[2];
		ap_uint<1>  RELU_EN        = LAYER_EN[3];
		ap_uint<1>  RELU6_EN       = LAYER_EN[4];
		ap_uint<1>  POOL_EN        = LAYER_EN[5];
		ap_uint<1>  UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		ap_uint<1>  BIAS_EN        = LAYER_EN[7];
		ap_uint<1>  UP_SAMPLE_OUT  = LAYER_EN[12];

		// Set up some configuration signals
		bool en = UP_SAMPLE_EN;
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0) && (UP_SAMPLE_OUT == 0);

		switch(en){
		// bypass this module
		case 0:
			if ((max_pool && out_num_iter == 0) || (!max_pool && in_num_iter + LAYER_IN_NUM_T >= LAYER_IN_NUM)){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = LAYER_IN_W_T / STRIDE;
				int h_bound = LAYER_IN_H_T / STRIDE;

				while(!done1){
#pragma HLS PIPELINE II=1
					PoolData0Type tmp = fifo_cin.read();
					fifo_cout.write(tmp);

					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / POOL_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			break;
		// merge
		case 1:
			if (out_num_iter == 0){
				int o = 0;
				int h = 0;
				int w = 0;
				bool done1 = 0;

				int w_bound = LAYER_IN_W_T * 2;
				int h_bound = LAYER_IN_H_T * 2;

				while(!done1){
#pragma HLS PIPELINE II=1
					PoolData0Type tmp = 0;
					// Read the data row by row from the input FIFOs
					if (h % 2 == 0)
						tmp = fifo_cin.read();
					else 
						tmp = fifo_cin2.read();
					fifo_cout.write(tmp);
				
#ifdef DEBUG_merge
					for (int lane = 0; lane < CONV_LANE; lane++){
						ap_uint<DATA_W0> u32_tmp = tmp(DATA_W0 - 1, 0);
						cout << "lane:" << lane<< "->" << Reinterpret<data_t0>(u32_tmp) << " ";
						tmp = tmp >> DATA_W0;
					}
					cout << endl;
#endif
					// Repeat until the whole tile is read
					w++;
					if (w == w_bound){
						w = 0;
						h++;
						if (h == h_bound){
							h = 0;
							o++;
							if (o == LAYER_OUT_NUM_T / POOL_LANE){
								o = 0;
								done1 = 1;
							}
						}
					}
				}
			}
			
			break;
		}

		// Repeat until all the tiles are read
		// Must repeat the computation until LAYER_OUT_NUM output feature maps are generated
		in_num_iter += LAYER_IN_NUM_T;
		if (in_num_iter >= LAYER_IN_NUM){
			in_num_iter = 0;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					out_num_iter += LAYER_OUT_NUM_T;
					if (out_num_iter >= LAYER_OUT_NUM){
						out_num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		}
	}
}


/**
 * Function name: cout_write_fifo_read
 * Function description: This function reads cout data.
 */
void cout_write_fifo_read(
		bus_t0 cout_burst_buf[],
		hls::stream<PoolData0Type>  &fifo_cout,
		bool en,
		bool up_sample,
		uint LAYER_IN_NUM,
		uint LAYER_OUT_H,
		uint LAYER_OUT_W,
		uint LAYER_IN_NUM_T,
		uint LAYER_OUT_NUM_T,
		uint LAYER_IN_H_T,
		uint LAYER_IN_W_T,
		uint in_h_iter,
		uint in_w_iter
){
	PoolData0Type cout_buf[DATA_SEL_FACTOR0];
#pragma HLS ARRAY_PARTITION variable=cout_buf complete

#ifdef DEBUG
	ofstream cout_debug;
	cout_debug.open("hw_cout_write_patch.dat", ios::app);
#endif        

	uint write = 0;
	// Set up the writing mode
	if (en == 0 && up_sample == 0) write = 0; // normal writing
	else if (en == 1 && up_sample == 0) write = 1; // writing after pooling
	else if (up_sample == 1) write = 2; // writing after upsampling
  // cout<<"cout_write_fifo_read: "<<write<<endl;
	// Should store the data as Th * Tw * Tn
	// write = 2;
  int count = 0;
	switch(write){
	case 0:
	{
		int o = 0;
		int h = 0;
		int w = 0;
		bool done = 0;
		while(!done){
#pragma HLS PIPELINE II=1       
#pragma HLS DEPENDENCE INTER false variable=cout_burst_buf
			uint local_cout_idx = h * LAYER_IN_W_T * LAYER_OUT_NUM_T + w * LAYER_OUT_NUM_T + o * POOL_LANE;
			bus_t0 wide_tmp = cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0];
			for (int lane = 0; lane < DATA_SEL_FACTOR0; lane++){
#pragma HLS UNROLL
				cout_buf[lane] = wide_tmp(DATA_W0 * POOL_LANE - 1, 0);
				wide_tmp = wide_tmp >> DATA_W0 * POOL_LANE;
			}
			PoolData0Type tmp = fifo_cout.read();
			if (in_h_iter + h < LAYER_OUT_H && in_w_iter + w < LAYER_OUT_W)
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;
			else
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;

			bus_t0 wide_pack = (
#if DATA_SEL_FACTOR0 == 1
					cout_buf[0]
#elif DATA_SEL_FACTOR0 == 2
					cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 4
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 8
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 16
				    cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
				    cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
				    cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
				    cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#endif                  
			);
			cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0] = wide_pack;
      //  print<512>(cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0]);

			// Repeat until the whole tile is read
			w++;
			if (w == LAYER_IN_W_T){
				w = 0;
				h++;
				if (h == LAYER_IN_H_T){
					h = 0;
					o++;
					if (o == LAYER_OUT_NUM_T / POOL_LANE){
						o = 0;
						done = 1;
					}
				}
			}
		}
		//        }
		break;
	}
	case 1:
	{
		int o = 0;
		int h = 0;
		int w = 0;
		bool done = 0;
		while(!done){
#pragma HLS PIPELINE II=1
			//#pragma HLS DEPENDENCE INTER false variable=cout_burst_buf
			uint local_cout_idx = h * (LAYER_IN_W_T / 2) * LAYER_OUT_NUM_T + w * LAYER_OUT_NUM_T + o * POOL_LANE;
			bus_t0 wide_tmp = cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0];
			for (int lane = 0; lane < DATA_SEL_FACTOR0; lane++){
#pragma HLS UNROLL
				cout_buf[lane] = wide_tmp(DATA_W0 * POOL_LANE - 1, 0);
				wide_tmp = wide_tmp >> DATA_W0 * POOL_LANE;
        // cout<<"lane1: "<<lane<<endl;
			}
			PoolData0Type tmp = fifo_cout.read();
      // cout<<"lane2: "<<(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE<<endl;
      // cout<<h<<" "<<w<<" "<<o<<" "<<in_h_iter<<" "<<in_w_iter<<" "<<LAYER_OUT_H<<" "<<LAYER_OUT_W<<endl;
			if (in_h_iter / 2 + h < LAYER_OUT_H && in_w_iter / 2 + w < LAYER_OUT_W){
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;
        // print<256>(tmp);
      }
			else{
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = 0;
      }
      // print<256>(cout_buf[0]);
      // print<256>(cout_buf[1]);
      // cout<<(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE<<endl;
      // print<256>(cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] );
			bus_t0 wide_pack = (
#if DATA_SEL_FACTOR0 == 1
					cout_buf[0]
#elif DATA_SEL_FACTOR0 == 2
					cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 4
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 8
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 16
					cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
					cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#endif                  
			);
			cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0] = wide_pack;
      // cout<<cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0]<<endl;
      // print<512>(cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0]);

			// Repeat until the whole tile is read
			w++;
			if (w == LAYER_IN_W_T / 2){
				w = 0;
				h++;
				if (h == LAYER_IN_H_T / 2){
					h = 0;
					o++;
					if (o == LAYER_OUT_NUM_T / POOL_LANE){
						o = 0;
						done = 1;
					}
				}
			}
		}
    // exit(0);
	}
	break;
	case 2:
	{
		int o = 0;
		int h = 0;
		int w = 0;
		bool done = 0;
		while(!done){
#pragma HLS PIPELINE II=1
			//#pragma HLS DEPENDENCE INTER false variable=cout_burst_buf
			uint local_cout_idx = h * (LAYER_IN_W_T * 2) * LAYER_OUT_NUM_T + w * LAYER_OUT_NUM_T + o * POOL_LANE;
			bus_t0 wide_tmp = cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0];
			for (int lane = 0; lane < DATA_SEL_FACTOR0; lane++){
#pragma HLS UNROLL
				cout_buf[lane] = wide_tmp(DATA_W0 * POOL_LANE - 1, 0);
				wide_tmp = wide_tmp >> DATA_W0 * POOL_LANE;
			}
			PoolData0Type tmp = fifo_cout.read();
      count++;

			if (in_h_iter * 2 + h < LAYER_OUT_H && in_w_iter * 2 + w < LAYER_OUT_W)
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = tmp;
			else
				cout_buf[(local_cout_idx % BUS_PACK_FACTOR0) / POOL_LANE] = 0;
			bus_t0 wide_pack = (
#if DATA_SEL_FACTOR0 == 1
					cout_buf[0]
#elif DATA_SEL_FACTOR0 == 2
					cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 4
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 8
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#elif DATA_SEL_FACTOR0 == 16
					cout_buf[15], cout_buf[14], cout_buf[13], cout_buf[12],
					cout_buf[11], cout_buf[10], cout_buf[9], cout_buf[8],
					cout_buf[7], cout_buf[6], cout_buf[5], cout_buf[4],
					cout_buf[3], cout_buf[2], cout_buf[1], cout_buf[0]
#endif                  
			);
			cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0] = wide_pack;
#ifdef DEBUG_up_fifo
			cout << "after merge: " << local_cout_idx / BUS_PACK_FACTOR0 << " " ;
			for (int lane = 0; lane < CONV_LANE*2; lane++){
				ap_uint<DATA_W0> u32_tmp = wide_pack(DATA_W0 - 1, 0);
				cout << "lane: " << lane<< " " << Reinterpret<data_t0>(u32_tmp) << " ";
				wide_pack = wide_pack >> DATA_W0;
			}
			cout << endl;
#endif
			// Repeat until the whole tile is read
			w++;
			if (w == LAYER_IN_W_T * 2){
				w = 0;
				h++;
				if (h == LAYER_IN_H_T * 2){
					h = 0;
					o++;
					if (o == LAYER_OUT_NUM_T / POOL_LANE){
						o = 0;
						done = 1;
					}
				}
			}
		}
	}
	break;
	}
  // exit(0);
}

/**
 * Function name: cout_write_ddr_write
 * Function description: This function writes out cout results to off-chip DRAM.
 */
void cout_write_ddr_write(
		bus_t0 cout_burst_buf[],
		bus_t0 *global_cout,
		bool en,
		bool up_sample,
		uint num_iter,
		uint in_h_iter,
		uint in_w_iter,
		uint LAYER_IN_NUM,
		uint LAYER_OUT_NUM,
		uint LAYER_IN_NUM_T,
		uint LAYER_OUT_NUM_T,
		uint LAYER_IN_H_T,
		uint LAYER_IN_W_T,
		uint LAYER_OUT_H_HW,
		uint LAYER_OUT_W_HW,
		uint num_tile,
		uint ind_w_t,
		uint ind_w,
		uint cout_offset,
		bool change_layout,
		bool run
){
	// Set up the writing mode
	uint write = 0;
	if (up_sample == 1) write = 2; // writing after upsampling
	else if (en == 0) write = 0; // normal writing
	else if (en == 1) write = 1; // writing after pooling
	// The default data layout is ceil(N / Tn) * H * ceil(W / Tw) * Tw * Tn
	// If filter size is 1, the data layout should change to ceil(N / Tn) * ceil(H / Th) * ceil(W / Tw) * Th * Tw * Tn
	if (change_layout) write += 3; 

  // cout<<"cout_write_ddr_write: "<<write<<" "<<cout_offset<<" "<<cout_offset + LAYER_OUT_W_HW*LAYER_OUT_H_HW*LAYER_OUT_NUM<<" "<<endl;
  // write = 2;
	if (run){
		switch(write){
		case 0:
		{
			// write out
			for (int hh  = 0; hh < LAYER_IN_H_T; hh++){
				uint h = in_h_iter + hh;
				uint global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T * LAYER_OUT_NUM_T;
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * LAYER_OUT_NUM_T);
			}
		}
		break;
		case 1:
		{
			for (int hh = 0; hh < LAYER_IN_H_T / 2; hh++){
				uint h = in_h_iter / 2 + hh;
				uint global_cout_idx;
				global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter / 2 * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T;
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T);
			}
		}
		break;
		case 2:
		{
			for (int hh = 0; hh < LAYER_IN_H_T * 2; hh++){
				uint h = in_h_iter * 2 + hh;
				uint global_cout_idx;
				global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter * 2 * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T;
#ifdef DEBUG_cout_ddr_up
				cout << "global:" << global_cout_idx << " h: " << h << " in_h_iter: " << in_h_iter << " local: " << local_cout_idx << endl;
#endif
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T);
			}
		}
		break;
		case 3:
		{
      // cout<<num_tile<<" "<<num_tile * (LAYER_IN_W_T) * (LAYER_IN_H_T) * LAYER_OUT_NUM_T<<" "<<sizeof(data_t0) * LAYER_OUT_NUM_T * (LAYER_IN_W_T) * (LAYER_IN_H_T)<<endl;
			// write out
			for (int hh  = 0; hh < 1; hh++){
				uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * LAYER_IN_W_T * LAYER_IN_H_T;
				uint local_cout_idx = hh * LAYER_IN_W_T * LAYER_OUT_NUM_T;
        // cout<<local_cout_idx / BUS_PACK_FACTOR0<<endl;
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * LAYER_OUT_NUM_T * LAYER_IN_H_T);
			}
		}
		break;
		case 4:
		{
      // write out
			for (int hh  = 0; hh < 1; hh++){
				uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * (LAYER_IN_W_T/2) * (LAYER_IN_H_T/2);
				uint local_cout_idx = hh * (LAYER_IN_W_T/2) * LAYER_OUT_NUM_T;
        // cout<<local_cout_idx / BUS_PACK_FACTOR0<<endl;
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * (LAYER_IN_W_T/2) * LAYER_OUT_NUM_T * (LAYER_IN_H_T/2));
			}

      LAYER_OUT_W_HW += 2;
      LAYER_OUT_H_HW += 2;
      cout_offset += (LAYER_OUT_W_HW-2)*(LAYER_OUT_H_HW-2)*LAYER_OUT_NUM + (LAYER_OUT_H_HW+1)*LAYER_OUT_NUM;

      for (int hh = 0; hh < LAYER_IN_H_T / 2; hh++){
				uint h = in_h_iter / 2 + hh;
				uint global_cout_idx;
				global_cout_idx = num_iter / LAYER_OUT_NUM_T * LAYER_OUT_H_HW * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + h * LAYER_OUT_W_HW * LAYER_OUT_NUM_T + in_w_iter / 2 * LAYER_OUT_NUM_T + cout_offset;
				uint local_cout_idx = hh * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T;
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T);
			}
      // for (int hh  = 0; hh < 1; hh++){
			// 	uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * (LAYER_IN_W_T/2) * (LAYER_IN_H_T/2);
			// 	uint local_cout_idx = hh * (LAYER_IN_W_T/2) * LAYER_OUT_NUM_T;
      //   // cout<<local_cout_idx / BUS_PACK_FACTOR0<<endl;
			// 	memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * (LAYER_IN_W_T/2) * LAYER_OUT_NUM_T * (LAYER_IN_H_T/2));
			// }
			// for (int hh = 0; hh < LAYER_IN_H_T / 2; hh++){
			// 	uint global_cout_idx = 0;
			// 	if (LAYER_IN_W_T / 2 == LAYER_OUT_W_HW) {
			// 		global_cout_idx = cout_offset + ind_w * LAYER_OUT_NUM_T * LAYER_IN_W_T * LAYER_IN_H_T / 4 + num_tile * LAYER_OUT_NUM_T * LAYER_IN_W_T * LAYER_IN_H_T / 4 + hh * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T;
			// 	} else {
			// 		global_cout_idx = cout_offset + ind_w * LAYER_OUT_NUM_T * (LAYER_IN_W_T/2) * LAYER_IN_H_T / 2 + num_tile * LAYER_OUT_NUM_T * (LAYER_IN_W_T/2) * LAYER_IN_H_T / 2 + ind_w_t * LAYER_OUT_NUM_T * LAYER_IN_W_T / 2 + hh * (LAYER_IN_W_T/2) * LAYER_OUT_NUM_T;//tweak
      //     // cout<<global_cout_idx<<" "<<cout_offset<<" "<<ind_w<<" "<<num_tile<<" "<<ind_w_t<<" "<<hh<<endl;
      //   }
			// 	uint local_cout_idx = hh * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T;
      //   // cout<<local_cout_idx<<" "<<global_cout_idx<<endl;
			// 	memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T / 2 * LAYER_OUT_NUM_T);
			// }
      // for(int i=0; i<4096; i++){
      //   print<512>(cout_burst_buf[i / BUS_PACK_FACTOR0]);
      // }
		}
		break;
		case 5:
		{
			for (int hh = 0; hh < 1; hh++){
				uint global_cout_idx = cout_offset + num_tile * LAYER_OUT_NUM_T * LAYER_IN_W_T * LAYER_IN_H_T * 4;
				uint local_cout_idx = hh * LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T;
#ifdef DEBUG_cout_ddr_up
				cout << "global:" << global_cout_idx << " h: " << h << " in_h_iter: " << in_h_iter << " local: " << local_cout_idx << endl;
#endif
				memcpy((void*)&global_cout[global_cout_idx / BUS_PACK_FACTOR0], (void*)&cout_burst_buf[local_cout_idx / BUS_PACK_FACTOR0], sizeof(data_t0) * LAYER_IN_W_T * 2 * LAYER_OUT_NUM_T * LAYER_IN_H_T * 2);
			}
		}
		break;
		}
	}
  // exit(0);
}

/**
 * Function name: cout_write
 * Function description: This function collects and writes out cout results.
 */
void cout_write(
		hls::stream<PoolData0Type>  &fifo_cout,
		hls::stream<ConfigInst>     &fifo_config_in,
		bus_t0                      *global_cout
){
	 bus_t0 cout_burst_buf_ping[OUT_H_T * OUT_W_T * OUT_NUM_T / BUS_PACK_FACTOR0];
	 bus_t0 cout_burst_buf_pong[OUT_H_T * OUT_W_T * OUT_NUM_T / BUS_PACK_FACTOR0];
#pragma HLS RESOURCE variable=cout_burst_buf_ping core=XPM_MEMORY uram
#pragma HLS RESOURCE variable=cout_burst_buf_pong core=XPM_MEMORY uram  

	// iterators
	uint num_iter = 0;
	uint in_h_iter = 0;
	uint in_w_iter = 0;
	uint layer_iter = 0;

	uint cout_offset = 0;

	uint num_iter_prev = 0;
	uint in_h_iter_prev = 0;
	uint in_w_iter_prev = 0;

	// parameters
	// inst0
	ap_uint<32> LAYER_IN_NUM_HW;
	ap_uint<32> LAYER_OUT_NUM_HW;
	ap_uint<32> LAYER_IN_H_HW;
	ap_uint<32> LAYER_IN_W_HW;
	ap_uint<32> LAYER_OUT_H_HW;
	ap_uint<32> LAYER_OUT_W_HW;
	// inst1
	ap_uint<32> LAYER_IN_NUM;
	ap_uint<32> LAYER_OUT_NUM;
	ap_uint<32> LAYER_IN_H;
	ap_uint<32> LAYER_IN_W;
	ap_uint<32> LAYER_OUT_H;
	ap_uint<32> LAYER_OUT_W;
	// inst2
	ap_uint<32> CIN_OFFSET;
	ap_uint<32> WEIGHT_OFFSET;
	ap_uint<32> BIAS_OFFSET;
	ap_uint<32> COUT_OFFSET;
	ap_uint<16> FILTER_S1;
	ap_uint<16> FILTER_S2;
	ap_uint<32> STRIDE;
	// inst3
	ap_uint<32> LAYER_EN;
	ap_uint<32> PREV_CIN_OFFSET;
	ap_uint<16> LAYER_IN_NUM_T;
	ap_uint<16> LAYER_OUT_NUM_T;
	ap_uint<32> LAYER_IN_H_T;
	ap_uint<32> LAYER_IN_W_T;
	ap_uint<1>  CONV_1ST_EN;
	ap_uint<1>  DEPTH_CONV_EN;
	ap_uint<1>  CONV_EN;
	ap_uint<1>  RELU_EN;
	ap_uint<1>  RELU6_EN;
	ap_uint<1>  POOL_EN;
	ap_uint<1>  UP_SAMPLE_EN;
	ap_uint<1>  BIAS_EN;
	ap_uint<1>  INTER_LOAD_EN;
	ap_uint<1>  INTER_WRITE_EN;

	ap_uint<2> LAYER_CONV_TYPE;	

	// Read instructions
	ConfigInst inst0 = fifo_config_in.read();
	ConfigInst inst1 = fifo_config_in.read();
	ConfigInst inst2 = fifo_config_in.read();
	ConfigInst inst3 = fifo_config_in.read();
	ConfigInst inst4 = fifo_config_in.read();
	ConfigInst inst5 = fifo_config_in.read();

	ap_uint<32> LAYER_BATCH = inst3(32*5+31, 32*5);

	bool en_prev;
	bool max_pool_prev;
	bool up_sample_prev;
  bool t_conv_prev;
	bool change_layout;
	uint LAYER_IN_NUM_prev;
	uint LAYER_OUT_NUM_prev;
	uint LAYER_IN_NUM_T_prev;
	uint LAYER_OUT_NUM_T_prev;
	uint LAYER_IN_H_T_prev;
	uint LAYER_IN_W_T_prev;
	uint LAYER_OUT_H_HW_prev;
	uint LAYER_OUT_W_HW_prev;
	uint cout_offset_prev;

	bool write_done = 0;
	uint task_cnt = 0;
	uint iter_h = 1;
	uint num_tile = 0;
	uint ind_w = 0;
	uint ind_w_t = 0;
	uint num_tile_prev = 0;
	uint ind_w_t_prev = 0;
	uint ind_w_prev = 0;
	bool layer_start = 0;
	bool done = 0;
	bool change_layout_prev = 0;
  int count = 0;
	// We assum that cin has been pre-padded with zeros
	while(!done){
    // cout<<count++<<endl;
		if (layer_start){
			inst0 = fifo_config_in.read();
			inst1 = fifo_config_in.read();
			inst2 = fifo_config_in.read();
			inst3 = fifo_config_in.read();
			inst4 = fifo_config_in.read();
			inst5 = fifo_config_in.read();
			layer_start = 0;
		}

		// Refer to cin_load module to understand the meaning of the instructions
		// inst0
		LAYER_IN_NUM_HW  = inst0(32*0+31, 32*0);
		LAYER_OUT_NUM_HW = inst0(32*1+31, 32*1);
		LAYER_IN_H_HW    = inst0(32*2+31, 32*2);
		LAYER_IN_W_HW    = inst0(32*3+31, 32*3);
		LAYER_OUT_H_HW   = inst0(32*4+31, 32*4);
		LAYER_OUT_W_HW   = inst0(32*5+31, 32*5);
		// inst1
		LAYER_IN_NUM     = inst1(32*0+31, 32*0);
		LAYER_OUT_NUM    = inst1(32*1+31, 32*1);
		LAYER_IN_H       = inst1(32*2+31, 32*2);
		LAYER_IN_W       = inst1(32*3+31, 32*3);
		LAYER_OUT_H      = inst1(32*4+31, 32*4);
		LAYER_OUT_W      = inst1(32*5+31, 32*5);
		// inst2
		CIN_OFFSET       = inst2(32*0+31, 32*0);
		WEIGHT_OFFSET    = inst2(32*1+31, 32*1);
		BIAS_OFFSET      = inst2(32*2+31, 32*2);
		COUT_OFFSET      = inst2(32*3+31, 32*3);
		FILTER_S1        = inst2(32*4+15, 32*4);
		FILTER_S2        = inst2(32*4+31, 32*4+16);
		STRIDE           = inst2(32*5+31, 32*5);
		// inst3
		LAYER_EN         = inst3(32*0+31, 32*0);
		PREV_CIN_OFFSET  = inst3(32*1+31, 32*1);
		LAYER_IN_NUM_T   = inst3(32*2+15, 32*2);
		LAYER_OUT_NUM_T  = inst3(32*2+31, 32*2+16);
		LAYER_IN_H_T     = inst3(32*3+31, 32*3);
		LAYER_IN_W_T     = inst3(32*4+31, 32*4);

		///////inst5///////////////
		LAYER_CONV_TYPE = inst5(32*5+31, 32*5);

		CONV_1ST_EN    = LAYER_EN[0];
		DEPTH_CONV_EN  = LAYER_EN[1];
		CONV_EN        = LAYER_EN[2];
		RELU_EN        = LAYER_EN[3];
		RELU6_EN       = LAYER_EN[4];
		POOL_EN        = LAYER_EN[5];
		UP_SAMPLE_EN   = LAYER_EN[6];  // reserved
		BIAS_EN        = LAYER_EN[7];
		INTER_LOAD_EN  = LAYER_EN[8];
		INTER_WRITE_EN = LAYER_EN[9];

		// Set up some configuration signals
		cout_offset = COUT_OFFSET;
		bool en = POOL_EN || (POOL_EN == 0 && STRIDE == 2);
		bool separable_conv = (DEPTH_CONV_EN == 1) && (CONV_EN == 1);
		bool conv2d = (DEPTH_CONV_EN == 0) && (CONV_EN == 1);
		bool max_pool = (DEPTH_CONV_EN == 0) && (CONV_EN == 0);
		bool up_sample = UP_SAMPLE_EN;
    bool t_conv = (LAYER_CONV_TYPE == 1)? 1 : 0;
		change_layout = (((LAYER_OUT_W_HW == LAYER_OUT_W) || (LAYER_OUT_W_HW == LAYER_IN_W_T)) && ((LAYER_OUT_H_HW == LAYER_OUT_H) || (LAYER_OUT_H_HW == LAYER_IN_H_T))); // if next filter = 1 : change the layout to num_tile, h_t, w_t, in_t
		
		// If it is supposed to store the result in DRAM
		if (INTER_WRITE_EN == 0){

			if (task_cnt == 0){
				// First, read the data of the first tile from FIFO
				cout_write_fifo_read(
						cout_burst_buf_ping, fifo_cout, en, (up_sample || t_conv),
						LAYER_IN_NUM, LAYER_OUT_H, LAYER_OUT_W,
						LAYER_IN_NUM_T, LAYER_OUT_NUM_T,
						LAYER_IN_H_T, LAYER_IN_W_T,
						in_h_iter, in_w_iter
				);
			} else {
				// Apply double buffering for reading the data from FIFO and writing to DRAM
				if (task_cnt % 2 == 1){
					cout_write_fifo_read(
							cout_burst_buf_pong, fifo_cout, en, (up_sample || t_conv),
							LAYER_IN_NUM, LAYER_OUT_H, LAYER_OUT_W,
							LAYER_IN_NUM_T, LAYER_OUT_NUM_T,
							LAYER_IN_H_T, LAYER_IN_W_T,
							in_h_iter, in_w_iter
					);
					cout_write_ddr_write(
							cout_burst_buf_ping, global_cout,
							en_prev, (up_sample_prev || t_conv_prev),
							num_iter_prev, in_h_iter_prev, in_w_iter_prev,
							LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
							LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
							LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
							LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
							num_tile_prev,
							ind_w_t_prev,
							ind_w_prev,
							cout_offset_prev,
							change_layout_prev,
							!write_done
					);
				} else {
					cout_write_fifo_read(
							cout_burst_buf_ping, fifo_cout, en, (up_sample || t_conv),
							LAYER_IN_NUM, LAYER_OUT_H, LAYER_OUT_W,
							LAYER_IN_NUM_T, LAYER_OUT_NUM_T,
							LAYER_IN_H_T, LAYER_IN_W_T,
							in_h_iter, in_w_iter
					);

					cout_write_ddr_write(
							cout_burst_buf_pong, global_cout,
							en_prev, (up_sample_prev || t_conv_prev),
							num_iter_prev, in_h_iter_prev, in_w_iter_prev,
							LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
							LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
							LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
							LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
							num_tile_prev,
							ind_w_t_prev,
							ind_w_prev,
							cout_offset_prev,
							change_layout_prev,
							!write_done
					);
				}
			}

			if (task_cnt > 0){
				write_done = 1;
			}
			
			// need to know the config of the current tile in the next iteration since we are using double buffering
			task_cnt++;
			num_iter_prev = num_iter;
			in_h_iter_prev = in_h_iter;
			in_w_iter_prev = in_w_iter;
			en_prev = en;
			up_sample_prev = up_sample;
      t_conv_prev = t_conv;
			max_pool_prev = max_pool;
			LAYER_IN_NUM_prev = LAYER_IN_NUM;
			LAYER_OUT_NUM_prev = LAYER_OUT_NUM;
			LAYER_IN_NUM_T_prev = LAYER_IN_NUM_T;
			LAYER_OUT_NUM_T_prev = LAYER_OUT_NUM_T;
			LAYER_IN_H_T_prev = LAYER_IN_H_T;
			LAYER_IN_W_T_prev = LAYER_IN_W_T;
			LAYER_OUT_H_HW_prev = LAYER_OUT_H_HW;
			LAYER_OUT_W_HW_prev = LAYER_OUT_W_HW;
			cout_offset_prev = cout_offset;
			num_tile_prev = num_tile;
			ind_w_t_prev = ind_w_t;
			ind_w_prev = ind_w;
			change_layout_prev = change_layout;
			write_done = 0;
			
		}
    // cout<<num_tile<<endl;
		// Repeat until all the tiles are stored
		if (max_pool || up_sample){
			//num_tile = task_cnt - 1;
			num_tile = task_cnt;
			num_iter += LAYER_IN_NUM_T;
			if (num_iter >= LAYER_IN_NUM){
				num_iter = 0;
				in_h_iter += LAYER_IN_H_T;
				if (in_h_iter >= LAYER_IN_H){
					in_h_iter = 0;
					in_w_iter += LAYER_IN_W_T;
					if (in_w_iter >= LAYER_IN_W){
						in_w_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		} else if (STRIDE == 2){
			num_tile += 1;
			if (num_tile == (LAYER_IN_H / LAYER_IN_H_T)){
				num_tile = 0;
				ind_w_t += 1;
				if (LAYER_IN_W_T / 2 == LAYER_OUT_W_HW) ind_w_t += 1;
				if (ind_w_t == 2){
					ind_w_t = 0;
					ind_w += (LAYER_IN_H / LAYER_IN_H_T);
				}
			}
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					num_iter += LAYER_OUT_NUM_T;
					if (num_iter >= LAYER_OUT_NUM){
						num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}
		} else {
			//num_tile = task_cnt - 1;
			num_tile = task_cnt;
			in_h_iter += LAYER_IN_H_T;
			if (in_h_iter >= LAYER_IN_H){
				in_h_iter = 0;
				in_w_iter += LAYER_IN_W_T;
				if (in_w_iter >= LAYER_IN_W){
					in_w_iter = 0;
					num_iter += LAYER_OUT_NUM_T;
					if (num_iter >= LAYER_OUT_NUM){
						num_iter = 0;
						layer_iter += 1;
						layer_start = 1;
						if (layer_iter == LAYER_BATCH){
							layer_iter = 0;
							done = 1;
						}
					}
				}
			}

		}

	}

	// Store the last tile
	if (INTER_WRITE_EN == 0){
		if (task_cnt % 2 == 1){
			cout_write_ddr_write(
					cout_burst_buf_ping, global_cout,
					en_prev, (up_sample_prev || t_conv_prev),
					num_iter_prev, in_h_iter_prev, in_w_iter_prev,
					LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
					LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
					LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
					LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
					num_tile_prev,
					ind_w_t_prev,
					ind_w_prev,
					cout_offset_prev,
					change_layout_prev,
					!write_done
			);
		} else {
			cout_write_ddr_write(
					cout_burst_buf_pong, global_cout,
					en_prev, (up_sample_prev || t_conv_prev),
					num_iter_prev, in_h_iter_prev, in_w_iter_prev,
					LAYER_IN_NUM_prev, LAYER_OUT_NUM_prev,
					LAYER_IN_NUM_T_prev, LAYER_OUT_NUM_T_prev,
					LAYER_IN_H_T_prev, LAYER_IN_W_T_prev,
					LAYER_OUT_H_HW_prev, LAYER_OUT_W_HW_prev,
					num_tile_prev,
					ind_w_t_prev,
					ind_w_prev,
					cout_offset_prev,
					change_layout_prev,
					!write_done
			);
		}
	}
}


/**
You can add any new module that you want here.
You just need to follow the coding structure of the other modules.
You can uncomment the commented modules if your application needs them. All the modules listed in this file (commneted or uncommented) has a working implementation.
For convolution, you can either choose to use a naive implementation (which is slow), or add the systolic array kernel.
**/
void engine(
		bus_t0 *global_cin,
		bus_t0 *global_prev_cin,
		bus_t1 *global_weight,
		bus_t2 *global_bias,
		bus_t0 *global_cout,
		uint    config[CONFIG_PARAMS]
){
#pragma HLS DATAFLOW
	/**
	 * Comments: naming rule
	 * Datatypes: <module_name> + 'Data' + <port_number> + 'Type'
	 * Inst_names: fifo + <module_name> + <port_number>
	 */
	// --------------------------------------------
	// Definitions of data fifos
	// --------------------------------------------
	// Module: cin_load
	// Output ports:
	// 0: cout -> inter_load
	hls::stream<CinLoadData0Type> fifo_cin_load_0;
#pragma HLS STREAM variable=fifo_cin_load_0 depth=128
	// Module: weight_load
	// Output ports:
	// 0: weight -> depth_conv
	// 1: weight -> conv
	hls::stream<WeightLoadData0Type> fifo_weight_load_0;
	hls::stream<WeightLoadData1Type> fifo_weight_load_1;
#pragma HLS STREAM variable=fifo_weight_load_0 depth=64
#pragma HLS STREAM variable=fifo_weight_load_1 depth=64
	// Module: inter_load
	// Output ports:
	// 0: cout -> depth_conv
	//hls::stream<InterLoadData0Type> fifo_inter_load_0;
//#pragma HLS STREAM variable=fifo_inter_load_0 depth=64
	// Module: depth_conv
	// Output ports:
	// 0: cout -> relu6
	hls::stream<DepthConvData0Type> fifo_depth_conv_0;
#pragma HLS STREAM variable=fifo_depth_conv_0 depth=64
	// Module: relu6
	// Output ports:
	// 0: cout -> conv
	hls::stream<ReluData0Type> fifo_relu6_0;
#pragma HLS STREAM variable=fifo_relu6_0 depth=64
	// Module: conv
	// Output ports:
	// 0: cout -> add
	hls::stream<ConvData0Type> fifo_conv_0;
#pragma HLS STREAM variable=fifo_conv_0 depth=64
	// Module: add
	// Output ports:
	// 0: cout -> relu
	hls::stream<ReluData0Type> fifo_add_0;
#pragma HLS STREAM variable=fifo_add_0 depth=64
	// Module: relu
	// Output ports:
	// 0: cout -> pool
	hls::stream<ReluData0Type> fifo_relu_0;
#pragma HLS STREAM variable=fifo_relu_0 depth=64

	hls::stream<ReluData0Type> fifo_relu_1;
#pragma HLS STREAM variable=fifo_relu_1 depth=64
	// Module: pool
	// Output ports:
	// 0: cout -> inter_write
	hls::stream<PoolData0Type> fifo_pool_0;
#pragma HLS STREAM variable=fifo_pool_0 depth=64
  // Module: upsample
	// Output ports:
	// 0: cout -> data_write
	hls::stream<UpsampleData0Type> fifo_upsample_0;
#pragma HLS STREAM variable=fifo_upsample_0 depth=256
  hls::stream<UpsampleData0Type> fifo_upsample_1;
#pragma HLS STREAM variable=fifo_upsample_1 depth=256
// Module: merge_upsample
	// Output ports:
	// 0: cout -> data_write
	hls::stream<UpsampleData0Type> fifo_merge_0;
#pragma HLS STREAM variable=fifo_merge_0 depth=512
	// Module: inter_write
	// Output ports:
	// 0: cout -> cout_write
	// 1: cout -> inter_load
	//hls::stream<InterWriteData0Type> fifo_inter_write_0;
	// hls::stream<InterWriteData1Type> fifo_inter_write_1;
//#pragma HLS STREAM variable=fifo_inter_write_0 depth=64
//#pragma HLS STREAM variable=fifo_inter_write_1 depth=64
	// Module: upsample
	// Output ports:
	// 0: cout -> data_write
	//  hls::stream<UpsampleData0Type> fifo_upsample_0;
	//#pragma HLS STREAM variable=fifo_upsample_0 depth=64
	// Module: cout_write
	// Ouput ports:
	// 0: cout -> global_cout


	// ----------------------------------------------
	// Definitions of bypassing prev cin fifos
	// ----------------------------------------------
	hls::stream<CinLoadData0Type> fifo_cin_prev_0;
#pragma HLS STREAM variable=fifo_cin_prev_0 depth=4096


	// ----------------------------------------------
	// Definitions of batch normalization fifos
	// ----------------------------------------------
	hls::stream<ConvData0Type> fifo_beta_depth;
	hls::stream<ConvData0Type> fifo_beta_conv;
	hls::stream<ConvData0Type> fifo_gamma_depth;
	hls::stream<ConvData0Type> fifo_gamma_conv;

  hls::stream<ConvData0Type> fifo_beta_conv_1;
  hls::stream<ConvData0Type> fifo_gamma_conv_1;
#pragma HLS STREAM variable=fifo_beta_depth depth=16
#pragma HLS STREAM variable=fifo_beta_conv depth=16
#pragma HLS STREAM variable=fifo_gamma_depth depth=16
#pragma HLS STREAM variable=fifo_gamma_conv depth=16

#pragma HLS STREAM variable=fifo_beta_conv_1 depth=16
#pragma HLS STREAM variable=fifo_gamma_conv_1 depth=16

	// ----------------------------------------------
	// Definitions of config fifos
	// ----------------------------------------------
	hls::stream<ConfigInst> config_prev_load;
  hls::stream<ConfigInst> config_bias_load;
	hls::stream<ConfigInst> config_weight_load;
	//hls::stream<ConfigInst> config_inter_load;
	hls::stream<ConfigInst> config_depth_conv;
	hls::stream<ConfigInst> config_relu6;
	hls::stream<ConfigInst> config_conv;
	hls::stream<ConfigInst> config_add;
	hls::stream<ConfigInst> config_relu;
  hls::stream<ConfigInst> config_relu_1;
	hls::stream<ConfigInst> config_pool;
	hls::stream<ConfigInst> config_upsample; // reserved
	hls::stream<ConfigInst> config_merge;
//	hls::stream<ConfigInst> config_inter_write;
	hls::stream<ConfigInst> config_data_write;
#pragma HLS STREAM variable=config_prev_load depth=16
#pragma HLS STREAM variable=config_bias_load depth=16
#pragma HLS STREAM variable=config_weight_load depth=16
//#pragma HLS STREAM variable=config_inter_load depth=16
#pragma HLS STREAM variable=config_depth_conv depth=16
#pragma HLS STREAM variable=config_relu6 depth=16
#pragma HLS STREAM variable=config_conv depth=16
#pragma HLS STREAM variable=config_add depth=16
#pragma HLS STREAM variable=config_relu depth=16
#pragma HLS STREAM variable=config_relu_1 depth=16
#pragma HLS STREAM variable=config_pool depth=16
#pragma HLS STREAM variable=config_upsample depth=16
#pragma HLS STREAM variable=config_merge depth=16
//#pragma HLS STREAM variable=config_inter_write depth=16
#pragma HLS STREAM variable=config_data_write depth=16

#define DEBUG_engine
  // layer_id++;
  // FILE *f;
  // f = fopen("D:/Spring2021/recut/recut/fpga/data/test/L.dat", "w");


// #define DEBUG_engine
#ifdef DEBUG_engine
	cout << "start" << endl;
#endif
	cin_load(
			global_cin, 
			config,
			fifo_cin_load_0, 
			config_prev_load
	);
#ifdef DEBUG_engine
	cout << "passed cin load" << endl;
#endif

  // int count = 0;
  // while(!fifo_cin_load_0.empty()){
  //   ReluData0Type item = fifo_cin_load_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);


	cin_load_prev(
			global_prev_cin, 
			config_prev_load,
			fifo_cin_prev_0,
			config_bias_load
	);
#ifdef DEBUG_engine
	cout << "passed prev cin load" << endl;
#endif

  // int count = 0;
  // while(!fifo_cin_prev_0.empty()){
  //   ReluData0Type item = fifo_cin_prev_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);
  // int count = 0;
  // while(!config_bias_load.empty()){
  //   ConvData0Type item = config_bias_load.read();
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);
	bias_load(
			global_bias,
			config_bias_load,
			fifo_beta_conv_1, fifo_gamma_conv_1,
      fifo_beta_conv, fifo_gamma_conv,
			config_weight_load
	);
#ifdef DEBUG_engine
	cout << "passed bias load" << endl;
#endif

	// int count = 0;
  // while(!fifo_beta_conv_1.empty()){
  //   ConvData0Type item = fifo_beta_conv_1.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // count = 0;
  // while(!fifo_gamma_conv_1.empty()){
  //   ConvData0Type item = fifo_gamma_conv_1.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);


	weight_load(
			global_weight,
			config_weight_load,
			fifo_weight_load_1,
			config_relu_1
	);
#ifdef DEBUG_engine
	cout << "passed weight load" << endl;
#endif

  // int count = 0;
  // while(!fifo_weight_load_1.empty()){
  //   ReluData0Type item = fifo_weight_load_1.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);

	// int count = 0;
  // while(!fifo_weight_load_1.empty()){
  //   ConvData0Type item = fifo_weight_load_1.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  relu_1(
			fifo_cin_load_0, 
			config_relu_1,
			fifo_relu_1,
			config_conv,
			fifo_beta_conv_1, fifo_gamma_conv_1
	);
#ifdef DEBUG_engine
	cout << "passed relu_1" << endl;
#endif

	// int count = 0;
  // while(!fifo_weight_load_1.empty()){
  //   ConvData0Type item = fifo_weight_load_1.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  // int count = 0;
  // while(!fifo_relu_0.empty()){
  //   ReluData0Type item = fifo_relu_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);

	conv(
			fifo_relu_1, fifo_weight_load_1,
			config_conv,
			fifo_conv_0,
			config_relu
	);
#ifdef DEBUG_engine
	cout << "passed conv" << endl;
#endif

  // int count = 0;
  // while(!fifo_conv_0.empty()){
  //   ReluData0Type item = fifo_conv_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);
  // float output[32][32];
  // float channel1[1024];
  // int count = 0;
  // while(!fifo_conv_0.empty()){
  //   ReluData0Type item = fifo_conv_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     channel1[count] = num[i];
  //     fprintf(f, "%10f\t", num[i]);
      
  //   }
  //   count++;
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  //   for (int w1 = 0; w1 < 2; w1++){
  //     for (int h1 = 0; h1 < 2; h1++){
  //       for(int h2 = 0; h2 < 16; h2++){
  //         for(int w2 = 0; w2 < 16; w2++){
  //           int h = h1 * 16 + h2;
  //           int w = w1 * 16 + w2;
            
  //           int L2 = w1 * 32 * 16;
  //           int L3 = h1 * 16 * 16;
  //           int L4 = h2 * 16;
  //           int L5 = w2;

  //           output[h][w] = channel1[ L2 + L3 + L4 + L5 ]; 
  //         }
  //       }
  //     }
  //   }
  // cout<<"OUTPUTS"<<endl;
  // for(int h=0; h<32; h++){
  //   for(int w=0; w<32; w++){
  //     printf("%10f\t", output[h][w]);
  //   }
  //   printf("\n");
  // }
  // exit(0);
	// int count = 0;
  // while(!fifo_conv_0.empty()){
  //   ConvData0Type item = fifo_conv_0.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

	// int count = 0;
  // while(!fifo_beta_conv.empty()){
  //   ConvData0Type item = fifo_beta_conv.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // count = 0;
  // while(!fifo_gamma_conv.empty()){
  //   ConvData0Type item = fifo_gamma_conv.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);

  relu(
			fifo_conv_0, 
			config_relu,
			fifo_relu_0,
			config_add,
			fifo_beta_conv, fifo_gamma_conv
	);
#ifdef DEBUG_engine
	cout << "passed relu" << endl;
#endif

  // int count = 0;
  // while(!fifo_relu_0.empty()){
  //   ReluData0Type item = fifo_relu_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);
	// both relu and relu6 support normal relu and relu6, 
	// the difference in the modules here is their location in the pipeline
	// they both have batch normalization in them





	add(
			fifo_cin_prev_0,
			fifo_relu_0,
			config_add,
			fifo_add_0,
			config_pool
			// config_upsample
	);
#ifdef DEBUG_engine
	cout << "passed add" << endl;
#endif

  // int count = 0;
  // while(!fifo_add_0.empty()){
  //   ReluData0Type item = fifo_add_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);

  pool(
        fifo_add_0,
        config_pool,
        fifo_pool_0,
        config_data_write
        // config_upsample
	);
#ifdef DEBUG_engine
	cout << "passed pool" << endl;
#endif

  // int count = 0;
  // while(!fifo_pool_0.empty()){
  //   ReluData0Type item = fifo_pool_0.read();
  //   data_t2 num[8];
  //   for(int i=0; i<8; i++){
  //     num[i] = Reinterpret<data_t2>((ap_uint<32>)item((i+1)*32-1, 32*i));
  //     fprintf(f, "%10f\t", num[i]);
  //     count++;
  //   }
  //   // cout<<"done"<<endl;
  //   fprintf(f, "\n");
  // }
  // cout<<count<<endl;
  // fclose(f);
  // exit(0);

    // int count = 0;
    // while(!fifo_pool_0.empty()){
    //   ConvData0Type item = fifo_pool_0.read();
    //   // float num[8];
    //   // printf("output: ");
    //   // for(int i=0; i<8; i++){
    //   //   num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
    //   //   printf("%10f\t", num[i]);
    //   // }
    //   // printf("\n");
    //   count++;
    // }
    // cout<<count<<endl;
    // exit(0);
//   upsample(
// 			fifo_pool_0,
// 			fifo_add_0,
// 			config_upsample,
// 			fifo_upsample_0,
// 			fifo_upsample_1,
// 			config_merge
// 	);
// #ifdef DEBUG_engine
// 	cout << "passed upsample" << endl;
// #endif
//   merge_upsample(
// 			fifo_upsample_0,
// 			fifo_upsample_1,
// 			config_merge,
// 			fifo_merge_0,
// 			//config_inter_write
// 			config_data_write
// 	);
// #ifdef DEBUG_engine
// 	cout << "passed merge upsample" << endl;
// #endif
	/*inter_write(
			fifo_merge_0,
			config_inter_write,
			fifo_inter_write_0,
			//    fifo_inter_write_1, // reserved
			config_data_write
	);
#ifdef DEBUG_engine
	cout << "passed inter write" << endl;
#endif
*/
  // int count = 0;
  // while(!fifo_merge_0.empty()){
  //   ConvData0Type item = fifo_merge_0.read();
	// 	float num[8];
	// 	// printf("output: ");
	// 	for(int i=0; i<8; i++){
	// 		num[i] = Reinterpret<float>((ap_uint<32>)item((i+1)*32-1, 32*i));
	// 		printf("%10f\t", num[i]);
	// 	}
	// 	printf("\n");
  //   count++;
  // }
  // cout<<count<<endl;
  // exit(0);
	cout_write(
			//fifo_inter_write_0,
			// fifo_merge_0,
			fifo_pool_0,
			config_data_write,
			global_cout
	);
#ifdef DEBUG_engine
	cout << "passed cout write" << endl;
#endif

}


extern "C" {
	void top_kernel(
			bus_t0 *global_cin,
			bus_t0 *global_prev_cin,
			bus_t0 *global_cout,
			bus_t1 *global_weight,
			bus_t2 *global_bias,
			bus_t3 *layer_config
	){
#pragma HLS INTERFACE m_axi port=global_cin offset=slave bundle=gmem1 depth=0
#pragma HLS INTERFACE m_axi port=global_prev_cin offset=slave bundle=gmem3 depth=0
#pragma HLS INTERFACE m_axi port=global_cout offset=slave bundle=gmem1 depth=826274
#pragma HLS INTERFACE m_axi port=global_weight offset=slave bundle=gmem2 depth=34234
#pragma HLS INTERFACE m_axi port=global_bias offset=slave bundle=gmem4 depth=1026
#pragma HLS INTERFACE m_axi port=layer_config offset=slave bundle=gcontrol depth=2815

#pragma HLS INTERFACE s_axilite port=global_cin bundle=control
#pragma HLS INTERFACE s_axilite port=global_prev_cin bundle=control
#pragma HLS INTERFACE s_axilite port=global_weight bundle=control
#pragma HLS INTERFACE s_axilite port=global_bias bundle=control
#pragma HLS INTERFACE s_axilite port=global_cout bundle=control
#pragma HLS INTERFACE s_axilite port=layer_config bundle=control
#pragma HLS INTERFACE s_axilite port=return bundle=control

		// Copy the first instruction
		unsigned int init_inst[5]; // [LAYERS]
		memcpy((void*)init_inst, (void*)(&layer_config[0]), sizeof(unsigned int) * 5);
		int layers = init_inst[0];

		int layer_num = layers;
		unsigned int config[CONFIG_PARAMS * MAX_LAYER_BATCH];
		int cur_layer_batch = 1;
		int nxt_layer_batch = 1;
		int layer_id = 0;
		while(layer_id < layer_num){
			cur_layer_batch = nxt_layer_batch;
#ifdef DEBUG_layer
		cout << "Passed" << layer_id << endl;
#endif
			memcpy((void*)config, (void*)(&layer_config[5 + CONFIG_PARAMS * layer_id]), sizeof(unsigned int) * CONFIG_PARAMS * cur_layer_batch);
			nxt_layer_batch = config[CONFIG_PARAMS * (cur_layer_batch - 1) + 26 - 1];
			config[26 - 1] = cur_layer_batch;
			// call engine module for each of the layers
			engine(global_cin, global_prev_cin, global_weight, global_bias, global_cout, config);
			//layer_id += cur_layer_batch;
			layer_id += 1;
		}
	}
}
