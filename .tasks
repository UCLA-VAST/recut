# These are example project actions that may be useful to consult for
# reference. Some commands may be environment specific
# all of these commands can be run in background as asynchronous
# jobs leveraging asynctasks.vim and asyncrun.vim

[project-init]
command= rm -rf build && mkdir -p build && cd build && cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DTEST_ALL_BENCHMARKS=ON -DCMAKE_INSTALL_PREFIX=.. 
# -DCMAKE_CXX_COMPILER=g++
# -DFETCHCONTENT_UPDATES_DISCONNECTED=ON
# command=rm -rf build && cmake -B build -DRECUT_ENABLE_BENCHMARKING=ON 
#-DTEST_ALL_BENCHMARKS=ON
#-DLOG=ON -DLOG_FULL=ON -DFULL_PRINT=ON 
#-DCMAKE_CXX_COMPILER=clang++ 
cwd=<root>

[project-build:cmake]
command=cd build && make -j 8 && make -j 8 install && make installcheck
cwd=<root>

[project-build:nix]
command=nix build -L
cwd=<root>

[project-test]
command=recut_test 
;--gtest_also_run_disabled_tests
;command=result/bin/./recut_test 
;command=result/bin/./recut_test --gtest_filter=Scale.InitializeGlobals
;command=result/bin/./recut_test --gtest_filter=VDB.IntegrateUpdateGrid
;command=cd bin && ./recut_test --gtest_output=json:../data/test_detail.json  --gtest_also_run_disabled_tests --gtest_filter='*'.ChecksIfFinalVerticesCorrect/'*' | tee ../data/test_detail.log
;command=cd bin && ./recut_test --gtest_output=json:../data/test_detail.json  --gtest_also_run_disabled_tests --gtest_filter='*'.ChecksIfFinalVerticesCorrect/11 | tee ../data/test_detail.log
;--gtest_filter=Update.EachStageIteratively
cwd=<root>

# rebuild and run test
[project-run]
command= cd build && make -j 8 && make -j 8 install && make installcheck && ./recut_test --gtest_output=json:../data/test_detail.json  --gtest_also_run_disabled_tests --gtest_filter=Update.EachStageIteratively
;command=cd build && ninja install && cd ../bin && ./recut_test --gtest_output=json:../data/test_detail.json --gtest_filter=*.ChecksIfFinalVerticesCorrect/11
;command=cd misc_scripts && python performance_test.py
cwd=<root>

[project-gdb]
command=sudo sysctl -w kernel.core_patter=core-%e.%p.%h.%t && cd build && ./recut_test && gdb -c core* 
# (gdb) symbol-file [path to binary]
output=terminal
cwd=<root>

[project-bench]
command=cd bin && ./recut_bench --benchmark_filter=load_tile
cwd=<root>

[project-perf]
command=sudo cpupower frequency-set -g performance && cd bin && perf record -g recut_bench && sudo cpupower frequency-set -g powersave
#&& perf report -g 'graph,.9,caller'
#command=sudo cpupower frequency-set -g performance && cd bin && perf stat -e L1-dcache-misses L1-dcache-loads LLC-load-misses LLC-loads faults instructions cycles recut_bench && sudo cpupower frequency-set -g powersave
cwd=<root>

[project-tags]
command=ctags -R --exclude={lib,bin,build,extern,docs,include}
cwd=<root>

[project-dev]
cmd=cd bin && ./recut_bench --benchmark_out=../data/dev.txt --benchmark_out_format=console --benchmark_filter=load*
cwd=<root>

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%m:%l

# save all files in buffer before executing any command
save=2
