from argparse import RawDescriptionHelpFormatter, ArgumentParser, Namespace
from pathlib import Path
from pandas import read_csv, concat
from math import pi


def main(args: Namespace):
    seeds_path = Path(args.seeds)
    assert seeds_path.exists()
    ano_file = seeds_path / (seeds_path.name + ".ano")
    apo_file = ano_file.parent / (ano_file.name + ".apo")
    eswc_file = ano_file.parent / (ano_file.name + ".eswc")
    seeds_df = concat([
        read_csv(f, sep=",", comment="#", names=("x", "y", "z", "radius"), index_col=0) for f in seeds_path.glob(
            "marker_*")
    ]).reset_index()
    seeds_df['x'] /= args.voxel_size_x
    seeds_df['y'] /= args.voxel_size_y
    seeds_df['z'] /= args.voxel_size_z
    # print(seeds_df.head())
    # print(list(seeds_df.itertuples())[0])
    if apo_file.exists():
        apo_file.unlink()
    with apo_file.open('a') as apo:
        apo.write(
            "##n,orderinfo,name,comment,z,x,y,pixmax,intensity,sdev,volsize,mass,,,,color_r,color_g,color_b")
        for row in seeds_df.itertuples():
            apo.write(
                f"{row.Index},,,,{row.z},{row.x},{row.y},0.000,0.000,0.000,{4 / 3 * pi * row.radius**3},0.000,,,,"
                f"{args.red},{args.green},{args.blue}\n"
            )

    if ano_file.exists():
        ano_file.unlink()
    with open(ano_file, 'a') as ano:
        ano.write(f"APOFILE={apo_file.name}\n")
        ano.write(f"SWCFILE={eswc_file.name}\n")

    if eswc_file.exists():
        eswc_file.unlink()
    with open(eswc_file, 'a') as eswc:
        eswc.write("#")


if __name__ == '__main__':
    parser = ArgumentParser(
        description="Convert recut generated seed files to TeraFly ano format\n\n",
        formatter_class=RawDescriptionHelpFormatter,
        epilog="Developed 2023 by Keivan Moradi at UCLA, Hong Wei Dong Lab (B.R.A.I.N) \n"
    )
    parser.add_argument("--seeds", "-s", type=str, required=True,
                        help="Path folder containing all seed files generated by recut.")
    parser.add_argument("--red", "-r", type=int, required=False, default=0,
                        help="red intensity value between 0 to 255")
    parser.add_argument("--green", "-g", type=int, required=False, default=0,
                        help="green intensity value between 0 to 255")
    parser.add_argument("--blue", "-b", type=int, required=False, default=255,
                        help="blue intensity value between 0 to 255")
    parser.add_argument("--voxel_size_x", "-dx", type=float, default=1,
                        help="Image voxel size on x-axis (µm).")
    parser.add_argument("--voxel_size_y", "-dy", type=float, default=1,
                        help="Image voxel size on y-axis (µm).")
    parser.add_argument("--voxel_size_z", "-dz", type=float, default=1,
                        help="Image voxel size on z-axis (µm).")
    main(parser.parse_args())
